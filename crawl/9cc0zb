{"url": "https://www.reddit.com/r/learnprogramming/comments/9cc0zb/how_can_i_develop_better_analytical_skills/", "text": "I'm specially interested in the math portion of it. To come up with more efficient solutions. I've read books on Algorithms and Data Structures. I've taken courses on Linear Algebra, Probability and Statistics, which I thought could help as the complexity grows. I plan to read SICP, Concrete Mathematics and Design Patterns. Is there anything more I should look into? The objective is to improve complexity of my programs which ultimately form the web app. I don't want to delve deep in competitive programming because that usually leads to bad practices. So I'd rather not do that if that's avoidable. ", "score": 11, "comments": [{"body": "Since we're throwing acronyms around, after SICP you should also read CLRS that's probably more math oriented.\n\nBut maybe you should try a big project. Exercise after exercise about this algorithm, this data structure, this design pattern, does not give you any large scale analytical skills.\n\nI have no idea what competitive programming is, but then I've only been programming for my-lord-has-it-been 40 years.", "id": "e59ke4j", "replies": [{"body": "Thanks for sharing your experience, I really appreciate it. I'm trying to do both. I'm not focusing completely on one of those things. There have been times where I thought I was doing something correctly, then eventually I found out there was a better way of doing it. I know that doesn't matter for a rarely used module but it really aggregates when it's all over your code. And while I wouldn't advocate spending too much time on competitive programming, I think that it does improve your problem solving skills since most of the time, I'll end up getting Time Limit Exceeded at my first attempt. So I'd have to think more until I can come up with something better. But it really wrecks the readability since you get into that habit. ", "id": "e59kzet", "replies": [{"body": "I agree about competitive programming and problem solving skills. But the OP was asking about complexity and a whole app. Design Patterns is probably a good one to make you think about larger scale structure than something you can solve in an hour.\n\nIt's hard to find books that discuss the larger issues. You could of course read The Mythical Man/Month. Also Greg Wilson's Beautiful Code.", "id": "e59vzc1", "replies": [{"body": "I thought problem solving skills would translate into taking care of complexity for the app. But I guess that's not always the case. Thanks for the recommendations, I'll definitely check them out. ", "id": "e59xews", "replies": [{"body": "Well, overall architecture is a problem to be solved, but it's on a different level from finding a sorting algorithm or so. Things like what's the proper inheritance hierarchy, do you use multiple inheritance, is a pointer unique/shared/bare....\nThese may sound like technical issues but they really go to conceptual issues of how the abstract ideas of your problem are translated into code.", "id": "e59xmdf", "replies": [{"body": "That makes more sense. I completely agree with you now. Thanks a lot, that was really helpful! ", "id": "e59xxlt", "replies": []}]}]}]}]}, {"body": "What is SICP?", "id": "e59uqkl", "replies": [{"body": "Structure and Interpretation of Computer Programs. \n\nGreat book. Used to be an MIT textbook. It introduces you really quickly to important concepts. It uses Scheme, which is a Lisp dialect so you should not consider it a book for learning a specific language, but rather learning the important things in life.", "id": "e59vssy", "replies": []}]}]}, {"body": "The answer to OP's question : You can't. \n\nWant to build strong analytical skills : Delve deep.", "id": "e59popa", "replies": [{"body": "Wouldn't that mean that competitive coding is the only way to develop those skills? That's disheartening to say the least, I am not sure I can agree with that. But thanks for sharing your opinion ", "id": "e59q6m2", "replies": [{"body": "During competitive coding, one normally takes out of the box approach to gain the benefits. And that's normally open up some creative thinking which widens your cognitive/analytical skills.\n\nI guess it's subjective too.\n\nNote: I hadn't read your description.\n\nEdit: Still I woul say competitiveness keeps your analytical skills off the chart always, as you get to enjoy the current info and peers with similar skillset.\n\n", "id": "e59qiha", "replies": [{"body": "I understand your perspective. I really hope that's not the *only* way. I do think learning math has helped a bit. And personally, I was addicted to it initially. Then I wasn't progressing as fast as I thought I could. Plus, it was messing up the readability, I took variable names for granted all the time then I'd get shit for it. And so, I eventually lost all the motivation I had to do it. That's why I'd rather not get into it again. ", "id": "e59ra9l", "replies": []}]}]}]}, {"body": "I'm not sure I understand what you mean by analytical skills. Do you mean general problem-solving reasoning? If so, that can be practiced even outside of programming.\n\nOr do you mean something very specific to math and algorithms? In which case, I would think the more raw experience the better; practice implementing existing algorithms, get familiar with how they work, read up on people who made them and how they were crafted. Hell, some of those people might even be academic types and are reachable by email or some shit; you might be able to track some down and ask them pointed questions about their algorithms, or for advice.", "id": "e5ar4ph", "replies": [{"body": ">Do you mean general problem-solving reasoning? If so, that can be practiced even outside of programming.\n\nYes, I did mean general problem solving skills. Could you list some ways to do that? \n\nAnd thanks, that was really good advice about practicing algorithms. ", "id": "e5ay3do", "replies": [{"body": "Hey, no problem. Off the top of my head, I'd say... anything that is like logical puzzles. Lot of games with stuff like that, which could get you practice sometimes in your off-time for fun, if you're into that kind of thing. One of the most important named types of reasoning that comes to mind for me is process of elimination. It's kind of slow for debugging, but it's certainly a brute force way of looking at variables (not just programming variables, but variables in the sense of possibilities).\n\nFormal study of logic might be a helpful foundation kind of place to start. Inductive reasoning, deductive reasoning, that kind of thing. \n\nUh, let's see, also... these are some rough notes, but I actually have them on hand from some material I was working on for critical thinking at one point, that I never finished, so that might help with contextualizing some.\n\n>\\- probability and statistics (what is likely true or not true\u2026 e.g. is it likely that your mother lied to you about being late to pick you up? Does she show a distinct pattern of lying, or a distinct pattern of honesty? Is there enough information to form a probable conclusion?)  \n>  \n>\\- how things are connected (global impact and personal impact\u2026 e.g. being selfish might help you in the short-term, but might hurt you in the long-term, as the impact of your selfishness may create an overall worse environment, which you then have to deal with down the road)  \n>  \n>\\- future proofing (solving problems before they occur\u2026 breaking things down into the basics of the world's components and see what problems are likely to exist\u2026 e.g. you build a computer, you may one day want to swap out parts or move the computer around, so you want enough space for swapping easily and you want to be able to lock the parts in well, or at least me mindful of the fragility)  \n>  \n>\\- balancing advantages and disadvantages (figuring out what you want and then deciding what the pros and cons are various approaches\u2026 e.g. you want to travel to a different state by plane or car\u2026 how far away is it, how much money will you spend, how much time will you spend with each method, etc.)  \n>  \n>\\- skepticism and open-mindedness (assuming the possibility of being wrong)  \n>  \n>\\- consideration of the source and cross-referencing different, especially contrasting or unique, sources (e.g. comparing a story perspective from fox news vs. msnbc might be useful, but they are both still official news sources and so could be missing parts of the story in similar ways\u2026 going outside of the official sources might yield new and/or valuable information)  \n>  \n>\\- formal logic (if this, then this\u2026 a+b=c, and so on)  \n>  \n>\\- adapting and context (adapting to a changing world and taking context into account\u2026 e.g. if new information indicates that an old belief or value needs changing, taking that into consideration\u2026 context e.g. what are the specific circumstances? Does it matter that most computer towers are black if your customer desires a red one?)\n\nAs far as how to practice stuff like this, I think asking yourself questions, making notes on things you're confused or curious about, may help. You could even try a critical thinking kind of approach to seeing if something is working... try it out a few times in a few different ways. Take some notes (mental notes or written down) on what kind of impact it had for you. Try to stay flexible and be open to things that can bring an improvement, but also practice being skeptical and building a foundation of knowledge, so that conclusions aren't undermined by simple challenges.\n\nI don't know. That's my messy, off the top of my head version. ", "id": "e5az0sp", "replies": [{"body": "That was incredibly helpful, thanks a lot. I'm saving this comment ", "id": "e5azh8t", "replies": [{"body": "No problem. :) Best of luck to you!", "id": "e5b072z", "replies": []}]}]}]}]}], "title": "How can I develop better analytical skills without delving deep into competitive programming?"}