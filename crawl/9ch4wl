{"url": "https://www.reddit.com/r/learnprogramming/comments/9ch4wl/i_need_help_with_a_project_for_ap_cs_i_have_no/", "text": "I didn't take computer math before taking APCSA, but the teacher told me last year that all we needed to do was the summer assignment and we would be fine. I did it, and I understand everything in it, but this project covers things that were not in the SA. A lot of my friends are lost and I would really appreciated if someone could help me out here. I like programming, which is why I took the class, but I don't like the fact that I don't have the most basic idea on how to do this. Here is the rubric:\n\n&nbsp;\n\n***\nMoveable Lab\tAPCSA\n\n&nbsp;\n    \nObjectives:  To familiarize yourself with your IDE of choice and review how to work with interfaces and abstract classes, inheritance, constructors, other methods, instance data, etc. . . from our Computer Math course.\n\n&nbsp;\n    \nDescription:  First get the Moveable interface and the Animal abstract class files from VISION.\n\n&nbsp;\n    \nThe interface and abstract class have been written and commented for you.  Familiarize yourself with these files.\n\n&nbsp;\n    \nYou will be writing 6 additional classes as described below.  One of these classes is a driver to demonstrate your subclasses functionality.  One of these classes is an abstract class which must contain at least one abstract method.  The remaining 4 classes are subclasses; 2 subclasses of each abstract class.  \n \n&nbsp;\n\nNote that your driver can use polymorphism although it is not required.\n\n&nbsp;\n\nThe 6 classes:\n\n&nbsp;\n\n\u2022\tDriver:  The driver will need to instantiate one object from each of the 4 subclasses and generate output as indicate below.\n    \n\u2022\tVehicle:  This is another abstract class that will also implement the Moveable interface.\n    \n\u2022\tAnimal subclasses:  You will write 2 subclasses of Animal.  Each must move and speak differently.\n    \n\u2022\tVehicle subclasses:  You will write 2 subclasses of Vehicle.  Each must move differently and carry a different number of passengers.\n\n&nbsp;\n\nSample output:  \nAnimal Fido is a dog that says Woof and it runs\n\n&nbsp;\n\nVehicle 747 is a plane that carries 400 and it flies\n \nI have the two files from the description, but I don't know how to use them.\n***\nWe are Using Eclipse as IDE.\n\nThe two files say this:\n    \n###Movable:\n\n     /* B. Kerr\n     * 8/21/18\n     * interface moveable containing move method\n     */\n    interface Moveable\n    {\n    /* move\n    * @return String description of movement\n    */\n    public String move();\n    }\n***\n\n###Animal:\n\n    /*\n    * B. Kerr\n    * 8/21/18\n    * contains abstract method speak()\n    * does not implement the move() method from Moveable\n    */\n    public abstract class Animal implements Moveable\n    {\n    // instance data\n    private String name;\n    \n    // constructor creates an Animal with the specified name\n    // @param newName  this Animal object's name\n    // \n    public Animal(String newName)\n    {\n    name = newName;\n    }\n    \n    // accessor method \n    // @return this object's name; can be null\n    //\n        public String getName()\n    {\n    return name;\n    }\n    \n    //@return a String representation of this Animal\n    //\n    public String toString()\n    {\n    return \"Animal \"+name;\n    }\n   \n    // this method should return a string indicating what the Animal says.\n    public abstract String speak();\n    \n    }\n***\nI am seriously lost, and I'm sorry if this is to much.\n\nI appreciate any help that comes my way.\n", "score": 1, "comments": [{"body": "To get started, you need to get your IDE up and running, set up a \"project\" (whatever that means for your IDE), and import the Movable interface and the Animal class.", "id": "e5anv45", "replies": [{"body": "That's as far as i got in class. I dont understand what I'm supposed to do with the files. ", "id": "e5apq5l", "replies": [{"body": "You're supposed to get them into your IDE, then build two specific Animal classes, create a Vehicle abstract class (like Animal), and create two specific Vehicle classes.  The example you've been given of an Animal is Dog, and an example Vehicle is a 747.", "id": "e5aqen2", "replies": []}]}]}, {"body": "Please read the posting guidelines and format your post so it's legible.  It's almost impossible to read.", "id": "e5ao5e4", "replies": [{"body": "is this better?", "id": "e5apk36", "replies": [{"body": "Yes, much.", "id": "e5aq9yz", "replies": []}]}]}, {"body": "Wait, so is this homework or are you doing this for fun/practice?  Because if it's the latter, I would *probably* remove your name to avoid any possibilities of being caught for plagiarism.\n\nThat aside:\n\n* How much of Java OOP do you know?  Are you familiar with interfaces?  Abstract Classes?  Overriding?\n\n* The assignment is basically saying, given these two files, they want you to create a set of child classes that inherit from the given abstract Animal class, which implements the Movable interface.\n\n* As a quick review, the child classes should override a method from the Animal class.  In this case, it's likely something like speak() - as what sound would a generic animal even make?\n\n* You have to create a Vehicle class that is like the given Animal class, in that it should be your parent class to a set of subclasses, and it should also be abstract.\n\n* Your child classes for Animal and Vehicle should be, well, animals and vehicles, like the given example.\n\n* The Driver class seems to just be whatever creates these objects and gets their outputs. \n\nHope this helps.  Feel free to reply if you need more help, I'll be glad to.", "id": "e5apt32", "replies": []}, {"body": "While we certainly want to help, realize that to us (readers) it seems like you're asking for someone to do your homework, and that is not what we are about here. That given, I'll try to push you in the right direction by simplifying the instructions so you can figure parts of it out for yourself.\n\n&#x200B;\n\nFirst, you're going to have to download the two classes from whatever VISION is, and import them into a project using your IDE.\n\nBoth of these classes are pretty easy to understand, so just give them a glance over. The comments fully explain what's happening.\n\n&#x200B;\n\nAll you're doing for this is making 6 classes. 2 of which subclass Animal (already given to you), 1 Vehicle class  (which is your job to write-- basically the same setup as Animal), 2 of which subclass Vehicle, and 1 class that shows/proves your other classes work (the 'driver' class). \n\n&#x200B;\n\nWe can split that up into a step by step guide on what to do, without going into the specifics of the code:\n\n1. make a Vehicle class, which should have a similar structure to Animal (already given, so that should be easy)\n2. make 2 classes that extend Animal. Override the speak and move methods to give each animal unique functionality.\n3. make 2 classes that extend Vehicle-- again, override move and set the number of passengers allowed.\n4. create a driver class which creates an instance of the 2 Animals and 2 Vehicles. Driver should be able to output information about said class (which is what the sample outputs show you). This is very simple. All you have to do is something like... \n\nprint (Animal  +  dog1.getName +  is a dog that says  + dog1.getSound + and it  + dog1.getMovement);\n\n&#x200B;\n\nfor each instance (unless I'm misunderstanding something). \n\n&#x200B;\n\nThis is pretty basic OOP, so if you don't understand some of the terminology here (hard to tell from your post), I would seek out a Java OOP guide. I'm intentionally not giving any code because it's hard to judge whether or not you just can't understand the question, or don't know OOP. If it's the later, reply back and I can give you a few more tips.\n\n&#x200B;\n\nGood luck!\n\n&#x200B;\n\n* note to those reading: if I made any mistakes, let me know so I can fix them. I'm tired.\n\n&#x200B;", "id": "e5aqc1o", "replies": [{"body": "Thank you for responding, you certainly made the question easier to understand. I am only familiar with basic OOP, I was expecting the teacher to give some lectures before we began this project. I would definitely appreciate it if you gave me some more tips.", "id": "e5aqx1r", "replies": [{"body": "To structure this out, it's easiest to think of it in a tree diagram. I made a super simple 5-second paint diagram so you have a visual to follow along with: [https://imgur.com/a/g6gesvF](https://imgur.com/a/g6gesvF)\n\n&#x200B;\n\nIn this setup, Animal and Vehicle both have generic methods that describe what they can do. An animal can speak, and a Vehicle can carry passengers-- both of these are unique and don't belong to the other class. However, both Animals and Vehicles move, so we implement moveable which gives us 1 move method to work with. In a larger project, this move method might log movement, or send a request to a server (and we know it's the same for everything that implements moveable). In this instance, it's not entirely practical and mostly serves as a way to show you how an interface works.\n\n&#x200B;\n\nAnimal is already fully created so we don't have to worry about that. Vehicle is mostly the same, the requirements for it are:\n\n1. implement moveable\n2. create a constructor that sets the vehicle's name (Animal already does this so it's an easy copy over)\n3. a getName() function that returns the object's name, which we assume was set in the constructor (but maybe not, which is why it can return null)\n4. a toString() function that gives a string representation of the object (eg. Vehicle plane)\n5. a function that returns/sets the number of passengers available, as well as a variable that represents it\n\nThis is pretty much the same as animal apart from 1-2 differences. It's pretty much just a copy and paste + 15 seconds of changing names and adding the requirements shown above.\n\n&#x200B;\n\nFor the children class, all we have to do is extend Animal and Vehicle (public class Dog extends Animal), etc. Each animal class should have a custom version of speak() by creating a speak() function and putting Override() before it, and then you can define your custom behavior there. Vehicle is the same, except you're setting custom limits for passengers. Both of these should override movement() and give some sort of custom functionality, such as the plane flies, or the dog runs. Move returns a string so it can be very basic.\n\n&#x200B;\n\nFinally, create a driver class (probably main as mentioned in a different comment), and create a new instance of each of the 4 child classes. Print out a string that shows their information (like I gave an example of in the first comment). \n\n&#x200B;\n\nIn total you should be creating 6 classes, 1 of which is Driver, or main (public static void main etc), 4 of which subclass (say Dog, Cat, Plane, and Car), and Vehicle which we went over above.\n\n&#x200B;\n\nStart out by creating your 6 classes and trying to implement the ideas I posted above. If you're stuck on a particular part you can definitely ask-- but at the least we need you to try it yourself for a bit before we start giving code out. That's part of the fun/challenge of programming :)\n\n&#x200B;\n\n&#x200B;", "id": "e5as0yr", "replies": [{"body": "I kinda understand what you are saying and what I'm supposed to be doing, but I don't know how to turn it into code.", "id": "e5bko8w", "replies": [{"body": "I understand you're lacking one of the prerequisites because the professor said it be OK, so I'm trying not to be harsh, and I hope it's not taken that way. This is basic programming, bare bone minimums. To be blunt: if there's an assignment dependent on these concepts and you can't assemble a basic class, you really need to contact the professor to explain your situation  (especially if OTHER students are also having the same struggles). Things are going to get far more difficult as the year progresses, and you'll find yourself more and more confused if the professor assumes you understand these concepts already. When you say you don't know how to turn those instructions into code, that suggests to me the class is not preparing you well enough (which again, may be a result of skipping the pre-req).\n\nI'm going to provide you with a few resources to look over (just took from the top of google):\n\n1. general OOP concepts explained by Oracle: [https://docs.oracle.com/javase/tutorial/java/concepts/](https://docs.oracle.com/javase/tutorial/java/concepts/)\n2. OOP tutorial by Google on udacity: [https://www.udacity.com/course/object-oriented-programming-in-java--ud283](https://www.udacity.com/course/object-oriented-programming-in-java--ud283)\n3. another OOP instruction set: [http://www.ntu.edu.sg/home/ehchua/programming/java/J3a\\_OOPBasics.html](http://www.ntu.edu.sg/home/ehchua/programming/java/J3a_OOPBasics.html)\n\nIf I give you the code straight out I'll basically be assisting you in cheating, which I am not going to be a part of. If you can assemble even an attempt at a class I will totally give advice on code, but I'm not going to spoon feed anything at the start. If you understand the concepts in the links above, this assignment will be very easy. I'm not sure how much time you have to prepare, but I would recommend looking through these regardless of how you finish the assignment.\n\n\u200b\n\nI'll be on all week, so make sure to respond back if you have questions.", "id": "e5cahya", "replies": [{"body": "I finished it, I was actually using some of the links you posted lol. thanks for your help! you certainly helped me", "id": "e5cjz0w", "replies": [{"body": "Good to hear! Hope I could be of assistance. ", "id": "e5cmskl", "replies": []}]}]}]}]}]}]}], "title": "I need help with a project for AP CS, I have no idea what he is asking us to do (its in java)"}