{"url": "https://www.reddit.com/r/learnprogramming/comments/9cjymd/weakly_vs_strongly_typed_programming_languages/", "text": "Weakly vs Strongly typed programming languages what's your opinion on it and is weakly not well suited for large application development ?", "score": 0, "comments": [{"body": "Define weakly and strongly typed. There aren't formal definitions and most people conflate these with dynamic and static types. ", "id": "e5bdvif", "replies": []}, {"body": "My opinion is simple - look at large applications and see what they are built in. Also - gotta make sure to what you regard as weakly typed vs stronly typed because depending on a definition it actually changes things a lot. Eg. Python has stronger typing than C. And I am not kidding - try adding a char to an integer and it yells at you. C is in fact notorious for implicit conversions that don't make little sense (NULL being literally a shorthand for 0 for instance). But hey, it runs Linux kernel and that's one of the largest codebases ever existing. \n\nAssuming you are talking about dynamic vs static typing however - there are high-profile and REALLY large applications written in both. Eg. Shopify - currently serving 80,000 requests per second and it's so big that it actually has two separate datacentres. Built in Ruby on Rails which is strongly typed but dynamic. Facebook runs in PHP which is weak and dynamic. Twitter runs on Scala (so static and strong typing). Then you have Reddit. Written in Python. \n\nSo here you go, typing does not seem to affect on whether or not a given language is suitable for a big application. It can help (I do like static typing myself since it gives me an extra layer of compiler-level defense rather than only finding bugs at runtime) but is by no means a necessity.  \n", "id": "e5b8mv8", "replies": [{"body": "> Facebook runs in PHP which is weak and dynamic.\n\nOf course, [Facebook literally created a new PHP-like gradually typed language](https://hacklang.org) because of the deficiencies of PHP at their scale.  ", "id": "e5br4ge", "replies": []}]}, {"body": "Weak vs strong may not the actual metric you want to debate.  There are at least three axes on which to judge a type system:\n\n- static vs dynamic\n- sound vs unsound\n- strong vs weak\n\nI suggest starting with [What To Know Before Debating Type Systems](http://blog.steveklabnik.com/posts/2010-07-17-what-to-know-before-debating-type-systems).\n\nAs for my personal opinion on the matter, once you get past ~10000 lines of code, dynamic languages really start to show their weaknesses.  Simple refactors become a huge headache because you lack a lot of the tools needed to discover what parts of the code base are affected.\n\nTo some extent good test coverage can help, but static types are like free unit tests that always keep themselves up to date, and provide a lot more help for tooling.\n\nDynamic languages are great, however, at iterating quickly on things.  Especially in simple code bases where the whole thing fits into your head.", "id": "e5b92ax", "replies": []}, {"body": "If the language does not offer static typing you need some other mechanism that compensates for that at some point.\n\nVery strict unit testing is one of those. You basically need 100% test coverage to ensure that you are not assigning a variable or calling a function in an obviously wrong way somewhere.\n\nOr you need other linting / analysis processes that just check all your code once in a while.\n\n&#x200B;\n\nErgo: Static typing is definitely worth it. Especially if you are coding in an IDE it makes coding so much simpler. E.g. Add a parameter to a function and it shows you all the usages that need to be updated too.", "id": "e5b99vk", "replies": []}, {"body": "IMHO there's literally no reason at all to use weakly typed languages. There's no reason not to let your compiler help you find bugs before they end up in production. In my experience with weakly typed languages the stuff the compiler doesn't do for you you have to compensate with additional unit tests. So there really is no time saved at all with a weakly typed language. \n\nAlso; strongly typed languages are moving towards type inference which makes the \"less time spent typing\" argument even more rediculous.", "id": "e5ba7ig", "replies": []}], "title": "Weakly vs Strongly typed programming languages what's your opinion on it and is weakly not well suited for large application development ?"}