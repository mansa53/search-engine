{"url": "https://www.reddit.com/r/learnprogramming/comments/9ab9rv/how_does_python_evaluate_functions_as_arguments/", "text": "Consider this snippet of code:\n\n&#x200B;\n\n`def f():`  \n `print(1)`  \n`def t():`  \n `print(2)`  \n`def test(first, second):`  \n  `first`  \n`test(f(), t())`\n\n&#x200B;\n\nwhen I run this, python prints out 1 and 2. Does python evaluate these functions as it assigns them to the local variables (as arguments) and if so how come \\`first\\` is never evaluated? I would guess it would be 1 2 1.\n\n&#x200B;\n\nThanks! ", "score": 0, "comments": [{"body": "In your example the first parameter is not a function. when the following is called\n\n    test(f(),t())\n\nf() is called which prints 1 and the return value is passed into the test function as first (in this case is None). Same with t, t() is invoked and the return value (also None) is passed in as the second it's the same as if you had entered\n\n    def f():\n        print(1)\n    def t():\n        print(2)\n    def test(first, second):\n        first\n    \n    f_value = f()\n    t_value = t()\n    \n    test(f_value, t_value)\n\n\nEdit: Look at this\n\n    def f():\n      print(1)\n\n    def t():\n      print(2)\n\n    def test(first, second):\n      first()\n\n    test(f, t)\n\nNotice here I'm not invoking f or t, I'm passing the function reference into the test function and then invoking first() inside test. This will invoke the f function.", "id": "e4u43ja", "replies": [{"body": "> f() is called which prints 1 and the return value is passed into the test function as first (in this case is None)\n\nRun this, if you don't believe this guy. It's really is None:\n\n    def f():\n        print(1)\n    def t():\n        print(2)\n    def test(first, second):\n        print(first)\n    test(f(), t())", "id": "e4u4lvc", "replies": []}]}, {"body": ">and if so how come `first` is never evaluated\n\n`f()` is evaluated and the result is stored in a temporary variable to be passed into `test`.  Same with `t()`.  That explains the output.\n\nThe actual arguments passed into `test` are `None` and `None` because neither `f` or `t` return anything.  So when the interpreter evaluates the body of `test` it's basically seeing this:\n\n    def test(foo, bar):\n      foo\n\n    test(None, None) #does nothing\n\nand doesn't do anything.  You may as well have written:\n\n    def f():\n      None\n\nIf you want to pass the function itself as an argument you can't just be calling it in the parameter.  You need to get the function pointer into the callee somehow:\n\n    def foo():\n      print(1)\n      return foo  #smuggle reference to foo into baz\n    def bar():\n      print(2)\n      return bar  # ditto\n\n    def baz(a, b):\n      a()  #notice the () denoting a function call\n      b()\n\n    baz( foo(), bar() )\n\nOutput:\n\n> 1 # from evaluation of foo() as parameter  \n> 2 # from evaluation of bar() as parameter  \n> 1 # from inside baz, call of a()  \n> 2 # from inside baz, call of b()\n\nI do **not** recommend doing this.", "id": "e4u5u8h", "replies": []}], "title": "How does python evaluate functions as arguments?"}