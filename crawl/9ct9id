{"url": "https://www.reddit.com/r/learnprogramming/comments/9ct9id/computer_stuff_doesnt_make_sense_to_me/", "text": "You know how people code using java and stuff like that. What about the person who creates java how is something created. What is the start. How do you program the things we use to program. I dont get how it all works.\n\nI think these are things I should know and understand before learning how to code.", "score": 9, "comments": [{"body": "Check out the course Nand2Tetris, but you can definitely code at a higher level of abstraction without understanding compilers, interpreters and assemblers ", "id": "e5d54p3", "replies": []}, {"body": "> I think these are things I should know and understand before learning how to code.\n\nFunnily enough it isn't necessary. But if you want to - I would suggest you google \"introduction to computer science\", there definitely will be some university lectures published regarding this. It won't explain it in detail but it will touch on how computers \"see\" the data and what's the history of programming. \n\nBut if you want a quick explanation - first, you need to tell the difference between the language and it's implementation. Java itself is a language, a purely theoretical concept. It exists solely on paper and explains the rules how it should behave. Eg. that typing `int i` is to create a variable i of a type that will let it store values from -2 147 483 648 to 2 147 483 647. But that's done on paper, it's basically a set of grammar. \n\nThere comes an IMPLEMENTATION. This is generally done in a different lower level programming language, C is a popular one. That's what you will use to create a parser that will look at what you have written in a text editor and can apply aforementioned syntax rules to it. In fact there are lots of implementations for Java as every operating system behaves differently and you want rules to stay consistent. Hence a window created in Java always looks the same and your code is identical even if what actually happens \"underneath\" is totally different. \n\nNow, if you wonder in what C is written - right now answer is \"also in C\". Although to be more specific, you do it in an older version. So for instance C 5.0 compiler/implementation is created using a C 4.0 compiler. This does not go forever however. You eventually would reach assembly (which is a very low level language, eg. this is how [Hello World looks in it](https://www.devdungeon.com/content/hello-world-nasm-assembler)) and after that a long line of 0s and 1s, the only \"language\" your processor understands. First programming languages were in fact made by directly writing said 0s and 1s (and what specific combinations of 0s and 1s do are defined inside a CPU silicon itself) to create a tool that would eventually understand specific text and transform that into CPU instructions. That way over time by building layers of languages on top of each other we could move to something as simple as `System.out.println('Hello!');`. ", "id": "e5d58ln", "replies": [{"body": " [MIT Open courseware](https://ocw.mit.edu/index.htm) is free and awesome.  They have an undergraduate computer science and java programming course and they took videos of their lectures. It includes problem sets as well.  \n\nAny type of math problems you can just search for them on Khan academy so you don't have to relearn high school/college.  ", "id": "e5d6ml4", "replies": []}]}, {"body": "\\> I think these are things I should know and understand before learning how to code.\n\nNot really. You can learn how to cook without understanding the chemical properties of an apple or knowing how an oven works. But since you're curious, there's no harm in learning! Just remember that this is not actually relevant for day-to-day computer stuff.\n\n\\>  What about the person who creates java how is something created. What is the start. How do you program the things we use to program. I dont get how it all works.\n\nRight, so, in the beginning, there were hairless apes running around the planet. They figured out how to use rocks to open coconuts. Then they figured out how to bang rocks with other rocks better, stabbier rocks, so they could kill animals easily and cut logs. They figured out how to make fire, and they used that to melt metal to make even better stabby rocks. In short, they use their tools to make better tools. Fast forward ten thousand years, and they figured out how to make rocks think.\n\nThe history of computing starts with these thinking rocks and follows a similar pattern. You start with a machine that can follow a set of instructions, then you realise that the set of instructions that you feed to the machine can be one that makes it easier for you to make a better set of instructions. Code builds on previous code. Java code runs on the Java Virtual Machine, which is written in C, and it runs on an operating system, it interacts with a window manager, a terminal emulator...", "id": "e5d7kd2", "replies": []}, {"body": "10011010111111001011010101101011001111", "id": "e5d696u", "replies": [{"body": "> 10011010111111001011010101101011001111\n\nReally upset about this.  ", "id": "e5d9go0", "replies": []}]}, {"body": "[Code](https://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319) is a great book that helped me understand programming on an abstract level", "id": "e5d6k8z", "replies": [{"body": "I second this recommendation. It can definitely feel like turtles all the way down, and this book does a great job of giving an overview all the way down to how to make basic circuits.\n\nDo you need to know this? Absolutely not. Will it help you write Java? I doubt it. But it will definitely satisfy your curiosity and expand your horizons.", "id": "e5d70a4", "replies": []}]}, {"body": "Curiosity is good but only as long as it helps you. Your goal should be to do something worthwhile, not to understand every piece that goes into it. You should only be concerned about the pieces which are actually going to be helpful. If you want to go bottom up, make sure that you choose the bottom carefully. Otherwise, you might as well start from rocks and end up learning about geology or physics. So, if you're serious about contributing, know that you don't need to understand every bit of every piece. Eventually, you'll have to take some pieces for granted. Then build up on those. ", "id": "e5d73jm", "replies": []}, {"body": "I asked myself the same thing many times, I wonder how people build programming language.", "id": "e5d80yd", "replies": []}, {"body": "Do you need to know how each single ingredient was bred to make a delicious meal?\n\nDo you need to know how paint and brushes were manufactured to make a beautiful drawing?\n\nDo you need to know how computer programs work to do literally anything else on a cumputer?\n\nSame it is with programming. You don't need to know how it works on the lowest level if you want to do the regular stuff.\n\nSure, once you get really deep into some stuff, it could be useful to understand how the programs works on the basic level, but it definitely is not the first thing that you should learn when learning to code.", "id": "e5d9x38", "replies": []}, {"body": "You don\u2019t need to know how an engine works to drive a car, but you do if you want to build a car. It all depends on what you want to do. You\u2019re not expected to know everything about everything. ", "id": "e5da204", "replies": []}, {"body": "These languages are programmed in a programming language which might be different from the language in question. Many people have written C compilers in C and the latest golang is written in golang.\n\nIf you want to learn anything about how these work you should learn how to program first as they are just programs themselves.\n", "id": "e5da37j", "replies": []}], "title": "Computer stuff doesnt make sense to me"}