{"url": "https://www.reddit.com/r/learnprogramming/comments/9a98ml/how_to_handle_dual_sign_on_page/", "text": "I am working on a project and I can't decide how to handle the login page. I will have two types of users, companies and employees. The most common login will be employees with the odd login for companies. My current two ideas are 1. Have a slider above the login form that selects weather the user is an employee or a company. 2. Have it so that the login route first checks the employees user database and if not found then the companies then if not fond return no user found.\n\n&#x200B;\n\nOption 1 is the simpler method of implementing and option 2 I feel is the more seamless method of logging in users. I'm not sure how long the second method would take but I know that I could do option 1 in less than a few hours. ", "score": 1, "comments": [{"body": "> My requirement is two types of users logging into my site.\n\nThat's a fallacy. There is only one type of users: humans in front of a computer. What _role_ (or identity) the user assumes is another problem. Don't mix those two up. An account can have multiple identities.\n\nGitHub has a nice solution: You always login as yourself. When you actually do an action for which it makes sense to assume the role of an organization you belong to (the equivalent of your concept of a company) you can choose to do that action as the organization. For example publishing a comment in an issue for a project that is published by that organization.\n\nIn your application the point in the workflow and/or condition under which the user can finally choose his role/identity can be different but the principle is the same.\n\n_Authentication_ should only ever happen by validating input against a single source of truth (a single database, a single dataset).", "id": "e4ty47m", "replies": [{"body": "this guy knows whatsup", "id": "e4u63ax", "replies": []}]}, {"body": "Why not have two login buttons, one for users, one for companies.  The button they click directs to the appropriate login page for the button selected.", "id": "e4tt6pn", "replies": [{"body": "That is an even worse method compared to the option of having a selector for account type. Unless I want to have it so that there is multiple login links on every page (in the header) then I am stuck with a redirecting page where they select the account/ login type they need. \n\nOverall that method is just plain a waste and will only hurt my site by annoying users. I have narrowed it down to the two best options and am not interested in adding in a third option that is worse than what I already have.\n ", "id": "e4tts0o", "replies": [{"body": ">  I have narrowed it down to the two best options and am not interested in adding in a third option that is worse than what I already have.\n\nOkay then.", "id": "e4twask", "replies": []}]}]}, {"body": "Your requirement is a different login page for different types of users?\n\nIf not, why do you need the user to pick what type of user they are? Because the user databases share users?\n\nThe more seamless, even with single sign-on, the better... maybe try using Facebook and other integrations.", "id": "e4tsa2f", "replies": [{"body": "You are mis-understanding what I am saying I think. My requirement is two types of users logging into my site. As for Facebook, that is not an option since this is a B2B site and only companies will sign up with employees created by the company account. So Facebook, Google, Twitter ect won't work at all. \n\nThe more seamless the better yes, which is why I said option two of having one login page with no account type selector. That is the best possible option I just an not sure if it is worth the extra development time to create that compared to having a selector with the account type (company vs employee) in it that would change the login route.\n\n> If not, why do you need the user to pick what type of user they are? Because the user databases share users?\n\nThe idea of them picking what type of user they are was that I would change the form route to say `/user/company/login` or `/user/employee/login` for the POST route only and still have just `/login` as my login page. \n\nThe users will be in two different databases and most of their interactions with the site will be by different micro-services so why this auth service will deal with both types of user account the actual user data is in different databases.", "id": "e4tuo0h", "replies": [{"body": "Check out what other sites do... you pick say Google+ or Facebook and you get a different login page\n\nDon't try to combine the login pages or worse the endpoints unless there is an overall strategy for SSO... don't make your life more complicated separate everything into smaller pieces. If you separate into smaller pieces, you can deliver one type of login first, then another type of login.\n\nDeliver one feature first then the other... anything else will lead to disaster (which you correctly predicted and have a feel for, why you are asking the question because you feel something is \"wrong\")", "id": "e4tvzod", "replies": [{"body": "Google + and Facebook are not options because of what the site is.... \n\nSo you are saying go with option one where I have a selector to determine account type? Don't make it one POST login route then?", "id": "e4twmje", "replies": [{"body": "If you are asking these questions you likely don't have the skill to properly architect a common endpoint, or any sort of common components or any kind of common page or common anything so do not even try it will be a failure.\n\nDeliver in pieces, make sure people know you have delivered... if the code quality is fragmented, well that's life just make sure you follow industry standards and code to such a way that anyone can pickup the code and follow it and especially debug it. Make the endpoints sensical. Make the code as tight as possible, and move on with life.\n\nDon't make your life harder than it is. Nobody will care if it is one endpoint or two.", "id": "e4twwjh", "replies": []}]}]}]}]}], "title": "How to handle dual sign on page"}