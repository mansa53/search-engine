{"url": "https://www.reddit.com/r/learnprogramming/comments/9buntc/trying_to_learn_the_why_behind_the_way_that_c/", "text": "It started with a simple question: \"why is the default for decimal numbers a double instead of a float in C#?\" and lead to other questions such as \"Why can't I set a variable when I declare it?\" I would like to learn more about the \"why\" behind C# but haven't found a single source that I can read through which covers the designs and reasons why c# does things, only answers to specific questions when they crop up. Are there any book or blog recommendations that covers this topic?", "score": 0, "comments": [{"body": "You should take a look at C.\n\nWhat do you mean by not being able to set a variable when you declare it?", "id": "e55vhkq", "replies": [{"body": "I'm assuming inside a class when you define a variable. You then set that var in the constructor... I think?", "id": "e564opo", "replies": [{"body": "You can do either, in the constructor or when you define the varaible", "id": "e565k8i", "replies": [{"body": "Oh ok, I assumed that's what op ment... Not sure why they can't then. ", "id": "e56626d", "replies": []}]}]}]}, {"body": "StackOverflow usually has explanations of the 'why' on questions like these. It might take a while to find the right questions/answers, but they do probably have more answers than any other source you can find.\n\nP.S. Don't get too focused on the 'why'. It's usually not important, but it can distract you from actually improving your programming skills.", "id": "e560z3h", "replies": []}, {"body": "The only book I can think of that goes into real detail on questions like these is for C++, The Design and Evolution of C++. It's pretty old now, but if you ever wondered why the language designer did things this way rather than that way it's a good reference. The answer were typically\n\nWe did it this way because \n\n* well defended reason X (usually \"backwards compatibility with C code\")\n* we wanted to avoid creating a new keyword\n* we didn't realize that 10 years later this would turn out to be a problem and it looked like a fine solution at the time\n* templates are hard", "id": "e565kw2", "replies": []}, {"body": "Not sure if it covers your specific question, but the best book about C# hands down is \"C# in Depth\" by Jon Skeet.", "id": "e56zdoh", "replies": [{"body": "> C# in Depth\n\nthanks a heap. I'll try to grab a copy of that.\n", "id": "e56zkcw", "replies": [{"body": "https://www.manning.com/books/c-sharp-in-depth-fourth-edition\n\n50% off with `wm090118lt`, today only.", "id": "e57fmjn", "replies": [{"body": "thanks a heap! :)", "id": "e583uof", "replies": []}]}]}]}, {"body": "The vast majority of the reasons are probably just \"they thought it was a good idea at the time\", or for C# specifically, they copied it from Java.\n\nAlso, what do you mean by:\n\n> Why can't I set a variable when I declare it?\n\n`int i = 100;` is perfectly valid.\n\nDefault decimal type is double probably because that's how it is in C, and I think that's because anything else would lose precision by default, which doesn't seem reasonable when you can just let it auto-cast downwards.\n\nIf you're really interested in why thing are the way they are, just start learning lower level languages.", "id": "e55tsa4", "replies": [{"body": "for example here's a snippet from a game I made:\n\n    public class Game_Master : MonoBehaviour {\n    \n        bool[] validMoves;//This will be a table of all the valid movements a selected piece can move to. It will be crossrefferenced with the Board\n    \n    \tvoid Start () {\n            validMoves = new bool[64];\n            emptyBoard();//\"zero\" out our valid moves.\n            gameSetup();\n    \t}\n    }\n\n\n\nI can't set my validMoves array to be size 64 when it's declared, or else it's just an array of size 0. I have to set it in the start() function (within unity at least). No idea why this is, as I can do this in unity with JS, but in C# it doesn't like me doing it.", "id": "e55wyo1", "replies": [{"body": "> bool[] validMoves;\n\nI think you'd go `bool[64] validMoves;` or maybe `bool validMoves[64]`;\n\nYou're declaring the a dynamic size array and later assigning it to an array of size 64.", "id": "e55yqhi", "replies": [{"body": ">I think you'd go bool\\[64\\] validMoves; or maybe bool validMoves\\[64\\] ;\n\nNeither, actually.\n\n    bool[] validMoves = new bool[64];\n\n\u200bEdit:\n\n>You're declaring the a dynamic size array and later assigning it to an array of size 64.\n\nThink of C# array variables as pointers to arrays. They don't have a size themselves, they can be assigned an array of any size as long as it has the same type.", "id": "e565hyp", "replies": []}, {"body": "right. Its only starting at 64, but may need to be much, much larger (creating infinite chess, as described in [here](https://www.youtube.com/watch?v=PN-I6u-AxMg). I have to create a new validMoves array object within the start function and set its size there.", "id": "e55z65m", "replies": []}]}]}]}], "title": "trying to learn the \"why\" behind the way that C# does things. Book/blog recommendations?"}