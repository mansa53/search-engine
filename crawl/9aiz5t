{"url": "https://www.reddit.com/r/learnprogramming/comments/9aiz5t/reading_through_a_data_structuresalgorithms_book/", "text": "So far it's going okay but it just gets pretty boring just reading and taking notes. I know people usually code and test things out but there are exercises in the book I'm not up to yet and I feel like it's too time consuming to just test out printing \"hello world\" or more complicated things.\n\nI also don't really like looking at too many resources because I feel like when people recommend so many resources it ends up being relearning the same thing again. (wasted time) Anyway I was just wondering, is this how people who learn from the textbooks just do it? (just persevere and take notes) Any advice on study habits/schedules?", "score": 3, "comments": [{"body": ">there are exercises in the book I'm not up to yet\n\nThen you're not learning the right way. If your book is decently written then you should be able to do the exercises as you go through the book linearly. If you get to a chapter and it has exercises and you can't do them then you haven't mastered the previous chapters. So go back to the previous chapters and make sure you understand them. You'll never learn anything by skipping the hard stuff.", "id": "e4vszfb", "replies": [{"body": "He's not doing it right. If you can't complete the excerise you don't move on.", "id": "e4vz042", "replies": [{"body": "Exercises are at the end of the chapter. I\u2019ve just been taking notes through the first chapter. I\u2019m still on chapter 1.", "id": "e4vzh94", "replies": [{"body": "1. Skim through the material until the exercises, get an idea for the heading, sub-headings, images, captions of images, and code snippets. How does the material build on prior concepts, don't need to make note of this, just let it sift in your mind.\n\n2. Look at what the exercises want you to do.\n\n3. Read through the chapter making note of what may be useful to know for the exercise\n\n4. Attempt the exercise. \n\nIf it was easy, everyone would do it.", "id": "e4w9shp", "replies": []}]}]}]}, {"body": "RIR;\n\nRead;Implement;Repeat;  \nTrying to implement something that you have read will show you exactly what the pitfalls of your understanding of it are.  ", "id": "e4vt4ir", "replies": [{"body": "Yeah I\u2019ll probably improve my understanding more once class starts. Nice acronym though. I\u2019ll keep it in mind.", "id": "e4vzju8", "replies": []}]}, {"body": "Your time is very valuable. \nI asked myself,\nWith so many resources, what\u2019s the most efficient way to learn?\nTo date I say it\u2019s picking the right resources, at the right time. \nSometimes, it\u2019s finding that primer. \nTo me, a primer is a bigger picture outlook into something. \nRead until it clicks; a firm understanding of the concept(s) is a good foundation before applying it. \nAnd then, the extensive/deeper resources can follow suit. \n\nI highly recommend this book at your current stage:\n\nA Common-Sense Guide to Data Structures and Algorithms - Jay Wengrow. \n\nIt\u2019s short, fast, and to the point. \n", "id": "e4vv327", "replies": [{"body": "Not sure I\u2019ll change my book but I\u2019ll look into it.", "id": "e4vzpgw", "replies": []}]}, {"body": "> I know people usually code and test things out but there are exercises in the book I'm not up to yet \n\nand that's your problem \n\nthere's a reason why people code and test things out -- because it works in learning to program \n\njust like learning a spoken language -- you have to use it \n", "id": "e4vzd71", "replies": [{"body": "Yeah I\u2019m going to be taking a class in school for it later so I\u2019m just focusing on concepts for now. I was looking for other study ideas besides just trying it out because it can be time consuming.", "id": "e4vzm1s", "replies": []}]}, {"body": "One way to gamify your learning for this topic is entering to competitive programming, sites such as codeforces and topcoder would be helpful.", "id": "e4w0q0p", "replies": []}, {"body": "How much do you know? Depending on your knowledge, learning about specific data structures and algorithms might not be the right idea. You haven't provided your level of knowledge so it's hard to tell. Do you have rock solid understanding of the basics like variables, flow control, methods, etc? Do you know all about objects, classes, interfaces, and polymorphism? Have you looked into recursion at all? The reason I ask is because if you aren't up to certain exercises it could likely because of a lack of knowledge in one of those areas. If you do know all that, then the best thing to do (for me at least) is read about something, think about how you can use it in a small program, and actually implement it yourself. So if it's for a sorting algorithm for example, read about how it works, then sit down and program it. Test to make sure it works. Make sure you understand it\n\nEdit: if you list specific exercises you aren't feeling up to facing it would be easier to give advice", "id": "e4wbl5o", "replies": []}, {"body": "Digging through hundreds of pages is surely boring but you have to do it in order to become competent. Focus on toy projects that you want to build instead because it tends to be less boring. Its also would open your way faster rather than learning for the sake of \"getting ready\" only to find yourself forgetting most of them as you spend more time coding. Been there, done that.", "id": "e4woy7t", "replies": []}], "title": "Reading through a data structures/algorithms book for java. Is there a better way to learn than to just drudge through it?"}