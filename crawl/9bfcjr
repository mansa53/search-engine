{"url": "https://www.reddit.com/r/learnprogramming/comments/9bfcjr/my_learning_style/", "text": "Is it normal for people to start a program and figure out how to make the program as they go? I do this a lot instead of formal tutorials and stuff and I've been wondering; do other people learn like this, or is it just me? ", "score": 2, "comments": [{"body": "> Is it normal for people to start a program and figure out how to make the program as they go?\n\nYes, completely normal. But it will take a while to get good at it.\n\n>  I do this a lot instead of formal tutorials and stuff and I've been wondering; do other people learn like this, or is it just me?\n\nHm, yeah, if there are no tutorials for the thing you are making (which is often the case in the \"real world\"), you have to figure it out as you go. Unless you plan everything up front, but that has it's own problems.", "id": "e52q0fo", "replies": []}, {"body": "For smaller programs, yes. For larger programs building as you go will often not work out well. You\u2019ll discover halfway through that your initial decisions are preventing you from moving forward and so you end up having to rewrite code you had written or writing code which is increasingly difficult to understand.", "id": "e52od7h", "replies": [{"body": "> For larger programs building as you go will often not work out well. You\u2019ll discover halfway through that your initial decisions are preventing you from moving forward and so you end up having to rewrite code you had written or writing code which is increasingly difficult to understand.\n\nYeah but what's the alternative? Planning everything in great detail, and then implementing everything, and *then* finding out that your initial decisions are preventing you from moving forward? Planning everything is no easier than programming.\n\nOf course, by programming I don't mean just writing code without thinking. I mean writing code and thinking as much as I have to.", "id": "e52q6hw", "replies": [{"body": "Planning is significantly easier and faster than writing code because you don\u2019t need to go into as much detail. When planning you can approach the problem from multiple perspectives, from high level components that help you segregate your code to low level detail when deciding the interfaces between those components. You are very likely to have to change a design but doing so is much easier.", "id": "e52ykwo", "replies": [{"body": "Yeah but there is a danger in not going into as much detail, because by not going into as much detail you might miss something important.", "id": "e53cxbo", "replies": [{"body": "Sure. Just as with building a program it takes time and practice to learn how to plan to the correct scope and to know when detail is needed.", "id": "e53glra", "replies": []}]}]}, {"body": "> Yeah but what's the alternative? Planning everything in great detail, and then implementing everything, and then finding out that your initial decisions are preventing you from moving forward? \n\nThere is a huge middle ground between planning nothing and planning everything.", "id": "e52zik2", "replies": []}]}, {"body": "Yeah that makes sense, I haven't done many large scale programs yet though. But isn't the discovering what doesn't work together and rewriting an extremely valuable part of the process of learning?", "id": "e52qkqx", "replies": [{"body": "Failure is the best teacher but you don\u2019t want to repeat mistakes. Make a high level plan - you\u2019ll still make the wrong plan or realize that it didn\u2019t account for things when you actually build it and that will be your opportunity to continue learning.", "id": "e52yppr", "replies": []}]}]}, {"body": "For learning it's a good method. Stumble around a bit so you'll have a lot of questions on your mind. Then when reading tutorials / books you'll know what you're looking for. ", "id": "e52tqen", "replies": []}], "title": "My learning style"}