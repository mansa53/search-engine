{"url": "https://www.reddit.com/r/learnprogramming/comments/9c3otb/c_question_on_the_usage_of_typename/", "text": "I'm reading \"Effective C++\". Item 42 covers the usage of `typename`. \nIt makes sense to me that we need to use `typename` when the type comes from a template argument, like:\n\n    template <typename U>\n    void foo() {\n        typename U::value_type bar;\n    }\n\nThat compiles without a problem. It needs `typename` because otherwise if, say, `B::value_type` was a `static` class member of `U` the statement would be meaningless.\n\nThe item also covers an exception: when you derive from a class that is within a template argument.\n\n    template <typename B>\n    class A : public B::value_type {};\n\nNo need for `typename` there. If I understand it correctly, the absense of `typename` is justified since nothing other than a type name could be there in that context.\n\nWhat surprised me was the following doesn't compile without `typename`:\n\n    typedef typename B::value_type value_type;\n\nWhy would that be? Could something other than a type name come after a `typedef`?\n\nThanks in advance\n   ", "score": 1, "comments": [{"body": "You are correct that `typename` inside of a `typedef` or `using` declaration is not really necessary. [This will be addressed in C++20](http://wg21.link/p0634r3).", "id": "e57zw4k", "replies": [{"body": "Ah! Wasn't expecting that. Thanks! ", "id": "e58nu7d", "replies": []}]}], "title": "[C++] Question on the usage of typename"}