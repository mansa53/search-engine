{"url": "https://www.reddit.com/r/learnprogramming/comments/9bxn3t/java_dividing_arraylist_into_smaller_arraylists/", "text": "I am not a programmer. I work at warehouse and I would like to make my work easier. One of my responsibilities is to divide excel file with over 2000 rows into smaller ones and send them out. I do it manually and I would like to create a program that does it for me. \n\nI have managed to read the data from excel. Each row is put into an Item data structure. And all of them are put into ArrayList.\n\n    public class Item{\n        String ean;\n        int amount;\n    }\n\nHere is my problem.\n\nI have one ArrayList with over 2000 elements. Each element has String Name and int amount.\n\n\n\nI must divide it into smaller ArrayLists but the condition is that the total amount of item.getAmount() can\u00b4t be more than 800;\n\n\n    int totalAmount = 0;\n\tint counter = 1;\n\tList<Item> temp = new ArrayList<>();\n\t\n\tfor (Itema item: items) {  \n\t    totalAmount += item.getAmount();\n\t    if (totalAmount <= 800) {\n\t        temp.add(item);\n\t    }\n\t    if (counter == items.size()) {\n\t        createFile(temp);\n\t        temp.clear();\n\t    }\n\t    if (totalAmount > 800) {\n\t      createFile(temp);\n              temp.clear();\n              temp.add(item);\n              totalAmount = 0;\n\t   }\n\t   counter++;\n\t}\n\n\nWhen I run this with ArrayList that contains thirty items each with amount 100.\n\nIt creates 4 files. First with 8 rows, second with 9, third with 9 and fourth with 4. I need it to be has to be 8, 8, 8, 6.\n\n\n\nI can't figure it out. Any suggestions??", "score": 1, "comments": [{"body": "Quick check, but are you sure you want ifs or do you want else-ifs?", "id": "e56ip8t", "replies": [{"body": "I dont mind either way. But changing it does not make any difference. ", "id": "e56jqck", "replies": [{"body": "I wrote some code that might work, you'll have to translate it to do what you want though.  Note this is REALLY UGLY CODE.  I'm very rusty in Java and rushed this:\n\n    import java.util.ArrayList;\n    import java.util.List;\n    \n    class Obj {\n        public String name;\n        public int amnt;\n    \n        public Obj (String name, int amnt) {\n            this.name = name;\n            this.amnt = amnt;\n        }\n    }\n    \n    public class Main {\n    \n        public static void main(String[] args) {\n            List<Obj> data = new ArrayList<>();\n            // for testing\n            for (int i = 0; i < 30; ++i) {\n                data.add(new Obj(\"item_\" + Integer.toString(i), 100));\n            }\n    \n            List<List<Obj>> final_lists= new ArrayList<>();\n            for (int i = 0; i < 10; ++i) {\n                final_lists.add(new ArrayList<Obj>(100));\n            }\n    \n            int total_amnt = 0;\n            int index = 0;\n            for (Obj o : data) {\n                total_amnt += o.amnt;\n                if (total_amnt > 800) {\n                    ++index;\n                    final_lists.get(index).add(o);\n                    total_amnt = 0;\n                }\n                else {\n                    final_lists.get(index).add(o);\n                }\n            }\n    \n            index = 0;\n            for (List<Obj> l : final_lists) {\n                System.out.println(\"INDEX \" + index++);\n                for (Obj o : l) {\n                    System.out.println(\"OBJECT: \" + o.name + \", AMOUNT: \" + o.amnt);\n                }\n            }\n        }\n    }\n\nOutput:\n\n    INDEX 0\n    OBJECT: item_0, AMOUNT: 100\n    OBJECT: item_1, AMOUNT: 100\n    OBJECT: item_2, AMOUNT: 100\n    OBJECT: item_3, AMOUNT: 100\n    OBJECT: item_4, AMOUNT: 100\n    OBJECT: item_5, AMOUNT: 100\n    OBJECT: item_6, AMOUNT: 100\n    OBJECT: item_7, AMOUNT: 100\n    INDEX 1\n    OBJECT: item_8, AMOUNT: 100\n    OBJECT: item_9, AMOUNT: 100\n    OBJECT: item_10, AMOUNT: 100\n    OBJECT: item_11, AMOUNT: 100\n    OBJECT: item_12, AMOUNT: 100\n    OBJECT: item_13, AMOUNT: 100\n    OBJECT: item_14, AMOUNT: 100\n    OBJECT: item_15, AMOUNT: 100\n    OBJECT: item_16, AMOUNT: 100\n    INDEX 2\n    OBJECT: item_17, AMOUNT: 100\n    OBJECT: item_18, AMOUNT: 100\n    OBJECT: item_19, AMOUNT: 100\n    OBJECT: item_20, AMOUNT: 100\n    OBJECT: item_21, AMOUNT: 100\n    OBJECT: item_22, AMOUNT: 100\n    OBJECT: item_23, AMOUNT: 100\n    OBJECT: item_24, AMOUNT: 100\n    OBJECT: item_25, AMOUNT: 100\n    INDEX 3\n    OBJECT: item_26, AMOUNT: 100\n    OBJECT: item_27, AMOUNT: 100\n    OBJECT: item_28, AMOUNT: 100\n    OBJECT: item_29, AMOUNT: 100\n    INDEX 4\n    INDEX 5\n    INDEX 6\n    INDEX 7\n    INDEX 8\n    INDEX 9\n\n\nI didn't understand the point of counter==item.size(), so if that was important, feel free to tell me.  Otherwise, I hope this helps!", "id": "e56op7h", "replies": []}]}]}, {"body": "     if (counter == fiftyAndMore.size()) {         \n        createFile(temp);         \n        temp.clear();     \n    } \n\nWhat's 'fiftyAndMore.size()'? Should you set totalAmount to 0 here too?\n\nWhat condition is not being met exactly? (Do any of the output files have a total over 800 or too many rows?)", "id": "e56k79q", "replies": [{"body": "it meant to be items.size();  If it reaches the end of list, take what is left in temp a create file.", "id": "e56llrf", "replies": [{"body": "You could put that at the end (outside the loop)\nAlso I suggest using 'else if', it won't change anything but adds clarity.\n\nI'm on my phone atm but can help once im home.\n\nDo you know what the program is failing at? I mean what the problem is? Do you need to set a max of 8 rows? (You mentioned you wanted 8 8 8 6)", "id": "e56qzut", "replies": []}]}]}], "title": "[Java] Dividing ArrayList into smaller ArrayLists with specific amount of element"}