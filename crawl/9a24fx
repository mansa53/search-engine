{"url": "https://www.reddit.com/r/learnprogramming/comments/9a24fx/sql_python_preferable_database_setup/", "text": "Hi there, I just learnt some Python in order to create bots that use the Reddit API to track submissions' popularity in r/memeEconomy. I would like to store information about each submission in a database, however I am quite inexperienced when it comes to Python-compatible databases (I use PHP mostly).\n\n1. What are some reliable and popular Python database modules that can be run on the localhost?\n\nAs to the setup of this database: The bot will record some initial variables upon submission, and then will add new variables over the next 15 minutes and then 4 hours later. The purpose of all this tracking is to try and visualize common characteristics of significantly successful/unsuccessful submissions. When designing the way the data would be stored, I was not sure whether I should take the approach of storing it all in separate tables, inserting new data into the relevant time category. Or of creating one large table with columns that start off empty, and then get 'updated' when the data becomes available.\n\nSketch of the two database models I could use: imgur.com/gallery/52nYTDb\n\nI would imagine that the first method requires a massive number of 'Joins' whenever I want to analyse the data, which complicated my python script a lot. However, based on my limited knowledge of database quality, the 'Normal Forms' say that if not all data is required at once, the rest should be stored in other tables, which is where the second kind of storage wouldn't do very well at.\n\n\u200b\n\nThis isn't a massive issue or anything, but I'd rather learn the correct way instead of being corrected later on.\n\nAll advice is appreciated!", "score": 1, "comments": [{"body": "Not to derail you, but your data may fair better in redis. There would be a lot of additional processing needed to pull aggregate data out, but it's something different.\n\nSql is pretty much the same across application languages, if you are wanting an ORM, however, that's where opinions interfere and they differ.", "id": "e4s5n5w", "replies": [{"body": "Huh, thanks for the read into NoSQL vs SQL. I think I'll stick with SQL for now (given that I may not have all the processing power required on my 500$ computer), but I'll keep an eye out for potential applications for NoSQL. Thanks!", "id": "e4s64y4", "replies": []}]}, {"body": "It seems you may have included a screenshot of code in your \npost \"[[SQL, Python] preferable database setup?](https://www.reddit.com/r/learnprogramming/comments/9a24fx/sql_python_preferable_database_setup/)\".\n\nIf so, note that posting screenshots of code is against \n/r/learnprogramming's rules: please **edit** your post to use one of the \n[approved ways of formatting code](https://www.reddit.com/r/learnprogramming/wiki/index#wiki_formatting_code). \n(Do NOT repost your question! Just edit it.)\n\nIf your image is not actually a screenshot of code, feel free to ignore \nthis message. Automoderator cannot distinguish between code screenshots \nand other images.\n\nPlease, *do not contact the moderators* about this message. Your post is still visible to everyone.\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/learnprogramming) if you have any questions or concerns.*", "id": "e4s5g1d", "replies": []}], "title": "[SQL, Python] preferable database setup?"}