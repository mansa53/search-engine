{"url": "https://www.reddit.com/r/learnprogramming/comments/9chkhb/why_is_raii_called_raii/", "text": "From what I understand, RAII (Resource acquisition is initialization) is when you wrap a heap allocated pointer in a stack object so that if an exception is thrown or something causes your function to end before you get to delete, the memory does not leak. However, what does this have to do with \"resource acquisition is initialization\"? I think this would be a good example of \"RAII\": \n\nint *p;\n\n*p = 3;\n\nint *q = new int{3}; // acquire resource in same step as initializing the value\n\nbut that is obviously not what RAII means.", "score": 1, "comments": [{"body": "It's a really shitty name, I'll give you that.  Can't even pronounce it well.  RAY?  RAI?  RA double I?  I don't know.  At least something like pImpl only sounds weird.  I think you'll be hard pressed to find anyone who thinks RAII is a good name.\n\nIt kinda makes sense though.  Resource acquisition is initialization, at least to me, tells me to acquire said resource in a constructor.  [This post](https://stackoverflow.com/questions/712639/understanding-the-meaning-of-the-term-and-the-concept-raii-resource-acquisiti) on SO covers it pretty well.\n\nAnd if you really want, from the post, here's Stroustrup's reasoning:\n> \n> It is not easy to find descriptive names for techniques. People who think\n> that they have found \"short and intuitive names\" for non-trivial techniques\n> are usually fooling themselves by never having tested that \"intuition\"\n> outside their own local culture.\n> \n> \"resource acquisition is initialization\" isn't snappy, but when I coined\n> it, the technique was new so that no single-word name would have served.\n> By now, \"resource acquisition is initializations\" appears in hundreds of\n> thousands of copies of books and articles. That alone is a reason not to\n> confuse the issue by introducing 3 or 4 alternatives.\n> ", "id": "e5asbpl", "replies": []}, {"body": "RAII refers to more than just deleting resources during exception handling. It means that object initialization is performed at the same time that resources (memory) are acquired, which ensures that you cannot have uninitialized objects. It also means that cleanup is performed when resources are deallocated, ensuring that nothing leaks or fails to finalize.", "id": "e5axqk7", "replies": []}, {"body": "Perhaps a better name would be \u201cresource release is destruction\u201d since that\u2019s really the important part.\n\nIn your example, the `new int{3}` is the resource acquisition part and the `int *q =` is the initialization part. The `{3}` is initializing the newly allocated memory, not `q`.  It\u2019s kind of splitting hairs, but they are not the same thing.  RAII means that the resource acquisition IS the initialization.\n\nAlso note that RAII can apply to any resource, not just heap memory. Common examples are network sockets, file handles, etc.", "id": "e5awv6b", "replies": [{"body": "I mean, RRID doesn't really roll off the tongue.  At least RAII is... uh... pronounceable... kinda.\n\nThough I guess we can go with double-R I D.  But that also sounds like \"rid\".\n\nAcronyms are hard. \n\n", "id": "e5awyyh", "replies": []}, {"body": "> Perhaps a better name would be \u201cresource release is destruction\u201d since that\u2019s really the important part.\n\nBoth parts are important. RAII means you can't have uninitialized objects. So unlike a primitive type where `int x;` will contain arbitrary garbage, `Foo x;` will call a constructor (if not default constructor is defined then the code will not compile) and therefore ensures that `x` is in a valid state (assuming the constructor is written correctly).", "id": "e5axecd", "replies": []}]}], "title": "Why is RAII called RAII?"}