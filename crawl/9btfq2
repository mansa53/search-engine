{"url": "https://www.reddit.com/r/learnprogramming/comments/9btfq2/best_way_to_store_class_objects_in_a_database/", "text": "TLDR: Need a general explanation of how large complex class objects are stored in DBs.\n\nSo, I want to store all the data I imported and then manipulated in a database. The class objects are players on a sports teams. There are sub classes for positions, and a team class as well.\n\nFor the sake of simplification, all I want to know is the best way to store a player object with all their associated stats in a database.\n\nFrom trying myself i know databases dont just store an entire object like that, although pickling seems to have something to help with that.\n\nBut I'd rather have a normalized database, so I was thinking of having a player and all his stats in a table, or maybe have each seasons stats in a separate table. Or many tables as I create more stats from analyzing the data, like efficacy vs certain teams, or pitchers if it's baseball.\n\nSo what I'm saying is I'm going to have a lot of data tied to one class object. What is the best way to store this data in a database? All I can think of is have getter methods just store each stat (which will be a lot of lines of code) and loop through all the players. But there has to be a better way. I thought json might be an option too.\n\nI an using python, and when I attempted this two years ago, sql alchemy and a sqlite db. But I don't need specific code. Just a general explanation of how large complex class objects are stored in DBs.", "score": 0, "comments": [{"body": "You say they are \"large\" and \"complex\", but what exactly do you mean by that? Are you talking about historical records? If so you'd want to keep your database normalized and use a one-to-many relation for specific stats.\n\nThe point of a database is to make data easily and quickly accessible, if you just want to store data as a sort of storage it might be better to create an alternative form of storage and reference the data from a database. In some database-systems you can even store json data directly.\n\nAs for the implementation itself, if I were you I'd create a method on each player or set of data to convert it into a more general form like JSON, and then insert that into the database.\n\nIn general, when it comes to databases, you want the structure to be\n\n1. Easy to work with\n\n2. Logical and intuitive\n\n3. Normalized, so only store each data point once\n\n4. As modular as possible, you want as few attributes in each table that requires complex cascading updates to related tables.\n\nTry drawing the structure out, and dividing it up into sensible chunks.", "id": "e55kfkb", "replies": [{"body": "Thanks. I understand what you are saying. I studied normalization and databases. I was just wondering how people take a class with dozens of attributes and store them in different tables in a database.\n\nOr do they keep the class object simple, and just have a method that queries the DB to get a stat, not actually include that stat as an argument in the instantiation of the object?\n\nI'm familiar with JSON. Do databases have an import for it that automatically stores the data in the relevant table and field?", "id": "e55nue6", "replies": [{"body": "That's a lot of queries. You want as few queries as possible, to keep it optimized. Ideally you'd have a system that persists the entire object to the database, and another that reads it. The persisting can be done however you want, but if you want the system to be normalized then the reading should be doable with only a single query.\n\nI don't quite understand your last question. JSON is really just text where native support makes the database understand that \n\n`{\"text\": \"test\"}`\n\nand \n\n`{\"text\":\"test\"}`\n\nare equal.\n\nGenerally speaking when working with a database you either write the sql yourself or use some sort of system to convert a datatype like json to an instance and then persist that instance to the database, there is generally no automatic feature in the database itself to do this. Databases tend to be lightweight.", "id": "e55pk1s", "replies": [{"body": "Awesome. This helped a ton. Thank you!", "id": "e55tp1z", "replies": []}]}]}]}, {"body": "Complex objects are quite often saved as JSON which is Javascripts Object notation. Databases like PostgreSQL or MongoDB can store JSON straight away and work very well with it but others usually have some other ways recommended which work better or worse.\n\nGoogle for your Database solution and JSON or maybe think for different database solutions.", "id": "e55k6x7", "replies": [{"body": "Great thank you", "id": "e55kba4", "replies": []}]}, {"body": "Forgetting the class nonsense, how is the actual data related to one another?", "id": "e55khuw", "replies": [{"body": "It's all stats related to players and teams. Sometimes the stat will refer to two objects, such as batting average vs. a pitcher. Or pitchers era vs a team.\n\nWhy is the class stuff nonsense? Isn't that the preferred way to deal with this type of data?\n\nGoing from the classes I took it seems an ideal situation to use classes.", "id": "e55nb6e", "replies": [{"body": "Dealing with data by directly serializing classes in to JSON as above is a relatively new thought paradigm that is wholly incorrect and bordering on mental retardation which always has the exact same inevitable conclusion: you handcuff the system to what you started with. You can iterate on what you\u2019ve done, but you cannot fundamentally change or reuse it without crazy levels of nonsense in between. \n\nIt creates a system from the very start that is only technically capable of minor iteration. A need for a new system, or even a second system that works beside the first will result in hanky spaghetti jank code vomit without a full on rewrite. \n\nThe proper way to deal with data is to deal with the data as the data wants to be dealt with. Forget how you want to program the classes. Get the data right and what you need to program will fall in to place anyway.\n\nSo get the examples of what the data is and then plan out your database. Chances are, you\u2019ll find relationships and get a great design for the data which will later enable you to build a service to expose it to a front end easily.\n\nDon\u2019t handcuff yourself by making bad decisions from the start. ", "id": "e57z4nq", "replies": []}]}]}], "title": "Best way to store class objects in a database?"}