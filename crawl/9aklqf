{"url": "https://www.reddit.com/r/learnprogramming/comments/9aklqf/can_you_actually_learn_programming_with_terrible/", "text": "I will be straight-up here.  I have always sucked horribly at math and was expelled from high school in like 10th grade.  I barely remember basic algebra and the only other experience I have with anything like programming is C++ I don't remember from high school and using Reaktor or Max/MSP for audio stuff.\n\nHowever I have always been interested in and now would like to learn basic coding, both for fun (want to make my own little shitty games) and because I feel like it could be a worthwhile skill.  But it's been a few weeks where I've now tried at least a dozen different C++ tutorials, and while I tend to breeze right through the early portions of each of them and have even written a couple of little console programs from scratch, eventually they start throwing in a ton of math that I just do not understand at the same time that they go totally off the deep end with new coding concepts.  At that point I just feel hopelessly lost because it's like I'm trying to learn college level math at the same time that I try to learn programming, and I can barely keep up with either.  They start asking for homework that involves calculations I can't even really read, and I don't know how to even search for answers because every explanation I can find online assumes a level of knowledge that I just do not have.\n\nSo my question is simple and I'd like an honest answer - am I just wasting my time?  Am I just going to bash my head endlessly against this wall and never make a dent because I don't have these high level math skills?  I didn't think I would need complex math just to make some goofy 2D games or whatever, but I can't even follow tutorials that other people say are really basic and simple like the ones at learncpp, let alone attempting a single problem beyond the admission question on codewars.  Honestly I feel like a total idiot, and don't know where to ask questions either because it seems like any community I post them in either just ignores me or treats me like a worthless moron.\n\nI'm used to learning hard things by simply coming back to them again and again, trying different angles until something finally clicks.  That is how I learned to draw, paint, write and produce music, animate, make my own VSTs and even build/fix basic electronics, but none of those things ever felt so impenetrable as programming does for me right now (probably because none of them required actual math skills).  I don't like to give up but my worry is that the deeper I get with programming, the further behind I will actually be due to my shitty math, and I will never reach a place where I truly understand what is happening because it's all completely over my head.\n\nI'm trying as hard as I can to keep a positive attitude but, all in all, this experience has been pretty damaging for my self-confidence.  In some ways that just makes me want to learn it even more, but if there will never be a real pay-off for all the work, then what is the point?", "score": 0, "comments": [{"body": "> eventually they start throwing in a ton of math that I just do not understand\n\nWhat C++ tutorials do that?  What kind of math?", "id": "e4w4njj", "replies": [{"body": "for example, i was trying to follow learncpp.com after having it recommended by a lot of people and at the end of the second chapter this is one of the tasks given:\n\n> Write a short program to simulate a ball being dropped off of a tower. To start, the user should be asked for the height of the tower in meters. Assume normal gravity (9.8 m/s2), and that the ball has no initial velocity (the ball is not moving to start). Have the program output the height of the ball above the ground after 0, 1, 2, 3, 4, and 5 seconds. The ball should not go underneath the ground (height 0).\n\nNow they were nice enough to also give the formula to find how far the ball has fallen here:\n\n> distance fallen = gravity_constant * x_seconds2 / 2\n\nbut I can barely understand this.  Why the hell are seconds being squared?  Do I divide or multiply first?  I don't understand what order these things evaluate in and even trying to read the explanation of that order is confusing because they tell you that every compiler evaluates in a different order or something and... I just don't get it lol.  I can't mentally visualize what these numbers are doing or why and that obviously means I do not actually understand how the program works.\n\nThe C++ tutorial I was doing before this one (a video series) did a very similar thing, tossing out homework that I couldn't figure out for the life of me and then when I would see the solution it was some super-confusing math that the teacher just assumed I would somehow know and implement.  \n\nI'm sure that this is actually all really basic stuff and some of you are probably laughing at me and thinking I should just quit, but I never learned any of these things.  Like tutorials will tell me I \"only\" need to know basic calculus to do them, but I literally had to look up the definition for \"calculus\" just the other day because I realized I didn't know what it actually meant, and even after watching multiple videos about the subject I still honestly don't have a fucking clue lol.", "id": "e4w67ve", "replies": [{"body": "You certainly don't need to be a math expert for most programming, but you have to be able to at least do basic math.  If you can't do that learncpp.com task, then programming probably isn't for you.\n\nBy the way, that's a classic physics problem.  I don't understand how it's derived, but the formula is traditionally written as:\n\ns = 1/2 * a * t^2\n\nWhere S is the distance or \"space\", a is acceleration due to gravity, and t is the time.  I never understood the details of why you square the time like that, I just know that you do.\n\nLet's assume that you want to compute the distance the ball falls as described in the assignment.  To start, you need the formula translated into C++.\n\n    double s = (0.5 * 9.8 * t * t) / 2;\n\nAll you do now is put it in a loop based on t:\n\n    for (int t = 0; t <= 5; t++)\n", "id": "e4w6wol", "replies": [{"body": "Well wait now lol.  If you don't understand how the formula is derived or why you square the time either then maybe I'm not quite as bad off as I thought I was.  I was thinking that this was somehow really basic stuff and I should've been able to figure out why every step of the expression happens just by looking at it, but apparently it doesn't matter how it works?  Actually I'm maybe more confused now, and maybe I don't understand what is actually important here..  Also, we were not taught anything about for loops at this point, and the solution they show is series of if and else statements...\n\nAnd to be honest, I can't tell whether or not a tutorial I'm following is good or not.  Because is it just me or is the ball problem a MASSIVE leap in difficulty from the previous problem which was:\n\n> Write the following program: The user is asked to enter 2 floating point numbers (use doubles). The user is then asked to enter one of the following mathematical symbols: +, -, *, or /. The program computes the answer on the two numbers the user entered and prints the results. If the user enters an invalid symbol, the program should print nothing.\n\nThis one I did easily, but the ball one, even after looking at the solution multiple times, I can not replicate that program from scratch still.  The logic makes sense to me when I am looking at the solution itself in Visual Studio but I just can't make it happen on my own.  Maybe this is normal and I am just giving myself a hard time.  I really don't know lol..", "id": "e4wb68c", "replies": [{"body": "> I was thinking that this was somehow really basic stuff\n\nIt _is_ \"basic stuff\"...basic _physics_ stuff.\n\n> the solution they show is series of if and else statements...\n\nHuh?  That's ... weird.  As written, it looks like a prime candidate for a loop of some kind.\n\n> Because is it just me or is the ball problem a MASSIVE leap in difficulty from the previous problem\n\nIt's not more difficult.  The formula you were given for the ball problem was very simple and had easy and obvious ways to express it in C++.  Whether or not you understand an expression, you have to be able to translate it in to code.  If you're a programmer, you'll be given formulas of all kinds, whether it's for things like pricing, figuring out a refund amount, converting currency, totaling a shopping cart, and so on.  I don't want to be discouraging, but if it completely stopped you cold then you'll have a lot of difficulty moving forward.\n\nIs Q4 [here](https://www.learncpp.com/cpp-tutorial/210-comprehensive-quiz/) the problem and solution you're looking at?", "id": "e4wtily", "replies": [{"body": "That is the problem and solution.  And yeah, like I said, this is only chapter 2.  They did not explain anything other than if and else statements at this point basically, and they only had us actually write a single other exercise program before this, sooo... honestly I don't understand how ANYONE that didn't already have at least SOME amount of programming experience would be expected to come up with an answer to that question lol.  And judging by the comments, I'm far from the only person who was totally stumped by it.  I think that you may be assuming I was much further along in my understanding when I encountered this problem than any of these tutorials have actually taken me, unless I am literally just supposed to be pull magic code out of my ass on day 1 without ever having even seen anything like it in practice.\n\nAlso this makes zero sense at all to me:\n\n> Whether or not you understand an expression, you have to be able to translate it in to code. If you're a programmer, you'll be given formulas of all kinds, whether it's for things like pricing, figuring out a refund amount, converting currency, totaling a shopping cart, and so on\n\nHow in the hell am I supposed to translate an expression meaningfully if I **do not understand what it means**??  What are you even talking about lol?  If you're telling me that I'm just supposed to copy-paste formulas into my solutions without understanding what they do or why, then that seems completely stupid, to say the least.  I mean is this really what you do?  How do you debug something if you literally don't even know how it works?  Tbh talking to you about this has been the opposite of helpful so far as all your advice seems to be \"well you SHOULD just GET IT or else you're too stupid, but you don't need to actually get it because i don't even get it\".  Really helpful guidance lmao.", "id": "e4xkqo0", "replies": [{"body": "> How in the hell am I supposed to translate an expression meaningfully if I do not understand what it means?\n\nThat's just the way it is.  You might be asked to write code to implement financial models that you don't understand in the least.\n\n> If you're telling me that I'm just supposed to copy-paste formulas into my solutions without understanding what they do or why, then that seems completely stupid\n\nWhy?  You aren't taking a physics class here.  You're getting a spec from someone and turning it into code.  It's not necessary to understand the underlying calculus that created that formula.\n\n> I mean is this really what you do\n\nYes.\n\n> How do you debug something if you literally don't even know how it works?\n\nIt depends on the circumstances.  Sometimes you'll get test data that provides the input and expected output.  Sometimes you'll have to do your best to verify that the results are valid using just what you know.  In class, typically your code will be run against a test harness of some kind to validate the results.\n\n> Tbh talking to you about this has been the opposite of helpful\n\nI'm not going to give you some happy pat on the back and tell you it's all going to be OK.  I'm going to tell you what you need to hear.  Take it however you wish.\n\nWhen it comes down to it, math in C++ is very simple.  You have 5 arithmetic operators (+, -, *, /, %).  There are more sophisticated [mathematical functions in the library](http://www.cplusplus.com/reference/cmath/), for things like `pow`, `sqrt`, `sin`, etc.  Someone else has already done all this work for you, you can just call the ones you need.  Your job is to take mathematical requirements and break them down into these primitive operations.", "id": "e4xn6y1", "replies": [{"body": "> I'm not going to give you some happy pat on the back and tell you it's all going to be OK. I'm going to tell you what you need to hear. Take it however you wish.\n\nWhere am I asking for a pat on the back?  What I'm saying is that what you're saying is *confusing*.  You're telling me on one hand that I should've just implicitly understood the \"basic\" expression I was shown enough to come up with a program that used it, but at the same time, you're telling me that YOU DO NOT EVEN UNDERSTAND IT.  How do these two things which fundamentally negate one another co-exist in your brain simultaneously?  What am I missing here?\n\nLike, if someone told me they want a job doing audio engineering and then told me they don't actually understand how EQ or compression works and they just copy other people's settings until they think it sounds okay enough, I would tell them to fuck off because they don't know what they're doing and they're just going to make a mess in my studio.  Writing a program without understanding how the underlying logic actually works seems like it would be just as stupid and annoying.  Like if expressions are your tools and you don't know how they work, you're just painting by someone else's numbers and then claiming it as your own art.\n\nI'm not trying to come off as abrasive here or something but I'm really just lost on what you're telling me.  And it doesn't help that literally every other comment is directly negating you and telling me that if I want to program well I need to understand how these algorithms actually work.  You seem to be the only person who believes that I can write a good program even if I don't understand how it works, while simultaneously being the only person who is telling me I should quit because I don't understand it.  Do you not see how that is confusing to me?  How is that \"what I need to hear\"?  Do YOU even hear what you're saying?\n\nAnd please do not give me that \"math in C++ is very simple\" line when you literally just said that YOU DO NOT UNDERSTAND IT lmao.  The combination you've got here of condescending attitude and admitted ignorance would be infuriating if it wasn't so comically absurd.  ", "id": "e4xpntl", "replies": [{"body": "> You're telling me on one hand that I should've just implicitly understood the \"basic\" expression I was shown enough to come up with a program that used it, but at the same time, you're telling me that YOU DO NOT EVEN UNDERSTAND IT.\n\nYou're not listening.  The formula you were given just mentions:\n\ndistance fallen = gravity_constant * x_seconds^2 / 2 \n\nThere are 3 simple, basic mathematical operations in there, two of which are using the _exact same symbol_ you'd use in C++.  One you have to figure out yourself, but is a simple, standard mathematical operation (squaring a number).  You don't need to know _anything_ about the underlying calculus of that equation, just how to plug variables into mathematical operators _that were all given to you_.\n\nYou were given a simple math expression.  No one asked you to explain how it's derived.\n\n> if someone told me they want a job doing audio engineering\n\nA more appropriate analogy would be if someone said your job is to take a settings sheet and apply the settings to an amplifier and equalizer after an audio engineer did an analysis of a room.  Maybe the engineer doesn't know the particular equipment, or how those settings would be mapped onto the equipment exactly.  So there's the job of audio technician, who actually puts their hands on the device and makes it do what it needs to do.\n\n> I'm not trying to come off as abrasive here \n\nYou do a poor job of showing it.\n\n> And please do not give me that \"math in C++ is very simple\" line when you literally just said that YOU DO NOT UNDERSTAND IT lmao.\n\nMath is simple...it comes down to simple operations that you can connect together in simple ways, and still generate amazing results.  But there's a huge difference between being able to take a formula and translate it into C++, and deriving the formula in the first place.", "id": "e4xvg16", "replies": [{"body": "Sorry if I am being an asshole.  Tbh I had a really bad experience asking questions in another forum at the same time I asked the question here and I think I am projecting some of that shittiness I experienced onto you guys undeservedly.  My interaction with the programming community so far has been kind of negative unfortunately.  This is the only craft I've ever tried to learn where I felt afraid to actually ask questions.  With everything else I've ever tried to learn, the community has been so much more helpful and understanding of beginners.\n\nI also think I get what you're saying now.  I was not mentally making a distinction between understanding the \"how\" and \"why\" of the formula.  You are saying the how is what's important, because the why could be anything and it would make no difference at all.  Is that correct?\n\nBecause if so then my problem is just that I need to learn the order that you evaluate the operations in, which is not hard at all.  I even have a chapter bookmarked that I'd read before on it so I will go through it again tonight.  I guess am going to just keep re-reading and coming back to the problem until I can work it all out.  ", "id": "e4yd6k0", "replies": []}]}]}]}]}]}]}, {"body": "> I never understood the details of why you square the time like that, I just know that you do.\n\nThe explanation for the squared time is that the *acceleration* `a` is in m/second^2 (metres per second squared), so, when you want to get to metres as final unit, you need the time squared (s^2 ) that the units equalize out. Additionally, it indicates that the distance follows a parabolic curve and doesn't increase in a linear fashion.\n\nIf you insert the units into your equation:\n\ns = 1/2 * a * t^2\n\nyou get (square brackets indicate the units):\n\ns[m] = 1/2 * a[m/s^2 ] * t[s]^2\n\nfurther evaluation leads to:\n\ns[m] = 1/2 * a[m/s^2 ] * t^2 [s^2 ]\n\nThen the s^2 of the acceleration and the s^2 of the squared times can be shortened and only the distance in metres [m] is left.", "id": "e4zh56n", "replies": [{"body": "I love math but it hates me.  I can sort of dimly make out what you're saying, but it's a struggle.\n\nI had to take Calc I three times to pass it, Calc II twice.  I gave up on physics because the content of my innocuously named \"Mechanics\" textbook was solid math well beyond my abilities.", "id": "e4zjd37", "replies": []}]}]}]}]}, {"body": "In general you don't need almost any math for programming , however  games specifically do require some math.  While most of it is abstracted by game engines you are still required to learn about matrices and vector algebra as well as trigonometry at a high level.  I'm not saying you need to know how to invert a matrix or find the sine of an angle since those are things that game engines and CPUs already do for you, but you need to know the meaning of such operations.", "id": "e4w74xh", "replies": [{"body": "So in your honest opinion, is teaching myself these things at all possible when I can't even remember how to do the FOIL method?  Like I'm not kidding when I'm saying that I probably have less math skills than an 8th grader currently.  I don't think I can even do long division on paper lol...", "id": "e4wbyum", "replies": []}]}, {"body": "I'm writing a game right now and it's got a physics engine that does all that stuff for you \ud83d\ude1bBasic 2d physics is a solved problem, you don't have to write it yourself in order to make games.\n\n\u200b", "id": "e4w7j3s", "replies": [{"body": "honestly since i am only interested in building a basic rhythm game, physics is not the problem at all since there really are none.  if i could make a guess the main issues i'm going to encounter will be related to audio sync, DSP and input lag but who knows lol...", "id": "e4wbana", "replies": [{"body": "Those very well might be solved problems too. I'd probably go with a well-supported engine like Unity and just get started.", "id": "e4wtzty", "replies": [{"body": "I actually have been playing with Unity for a while now and that has been going along very nicely (built a couple silly little rhythm mini-games already), although I can already tell that it is not going to be able to handle what I want to do in terms of both DSP and the 5-10ms input lag that would be basically required for the game to play smoothly.  Even the \"fancy\" rhythm games I've tried which are coded in Unity tend to be really sluggish, and since a big part of my game would involve recording player inputs accurately for playback, even a very small input delay is going to make it feel off.  This is not such a problem with other rhythm games where you are only playing the pre-determined notes and can easily compensate for timing problems using visual cues.  ", "id": "e4xldm9", "replies": [{"body": "Ah, ok. That is going to be quite the hurdle >_>", "id": "e4xtz17", "replies": []}]}]}]}]}, {"body": "It depends what you mean when you say you \"suck horribly at math\". What comes to mind when I hear the word 'math' is a different skillset than the one required to be a competent programmer. A lot of the logic of programming can be described as a 'math', but in everyday usage when people say 'math' they're referring mostly to algebra, geometry, and calculus. I don't consider myself skilled in any of these, but I consider myself a skilled senior software developer. \n\nSome programming applications clearly require a mastery of 'math'. If you're writing an equation solver, then you need to know how to solve equations. if you're writing a game with complex physics, then you need to know the math behind those physics (or have the ability to look it up). This is no different than saying that a painter need biology domain knowledge to paint an anatomically correct cell. I'm going to ignore these applications.\n\nNow, if you're writing code that isn't meant to solve math problems, then you won't need specific domain knowledge about math. That said, you still will find yourself using certain math techniques in the course of your programming. In my experience, the 'math' required for writing programs is still far, far below what most people consider advance math. \n\nI realize this is all a bit abstract, so let me talk about my own experiences in the industry. I'm somebody who has always considered himself to be \"terrible at math\". I never did particularly well in my college math courses, nor did I have any interest in any topics in math. I now work as a javascript developer creating web apps, and I pretty much never use algebra, calculus, or geometry. I would say that 95% of the math I do involves addition, subtraction, and modulus. \n", "id": "e4w90ig", "replies": [{"body": "I mean I've been able to build fairly complex \"programs\" in both Max/MSP and Reaktor for probably close to a decade, both of which require a lot of abstract logical thinking.  And I have no problem at all making or following basic game logic when scripting in Unity, for example.  It just falls apart whenever I try to take on anything that goes past the basics you're talking about.\n\nAnd maybe for what I am doing, it will not be so necessary.  But since my dream project is a rhythm game, I have a feeling that I will need to learn some DSP things, and that is where I'm afraid I will just fall off completely since I know the math there is anything but simple.", "id": "e4wbpaj", "replies": [{"body": "That's what libraries are for. Plenty of people come up with cool applications for something like DSP, but don't want to spend the time to code all the math from the ground up when some group of DSP experts already wrote the code. If I were writing a rhythm game I certainly wouldn't want to implement DSP myself. I'd want to think of things at the rhythm level with the signal processing abstracted away. Now as far as math all we have to worry about is simple integer arithmetic. ", "id": "e4wlfhs", "replies": []}]}]}, {"body": "It depends. If you just want to specifically learn programming and nothing else, then no, unless you're building some program that requires you to use math. The thing here is if you want to familiarize yourself with 'algorithms' and understand why certain algorithms are better than others in depth, then yeah.", "id": "e4w4w7y", "replies": [{"body": "This kind of confirms my worries then, that even if I learn how to program I will never be able to learn how to actually be a good or efficient programmer because I don't have the fundamental math skills required.  Or at least if I want to get better after a certain point, there is far more work that I will need to do to get over that hurdle than someone who already has the math side down.  ", "id": "e4w6nit", "replies": [{"body": "Programming will teach you math. You don't have to learn before you start.\n\nThe only math that is essential before you get started is basic high-school algebra, e.g. solving for _x_, and the order of operations. If you find your algebra is not up to scratch then [khan academy](https://www.khanacademy.org/math/algebra) is an excellent resource.", "id": "e4wbqqk", "replies": [{"body": "Yeah looking through that course I can only barely remember some of the concepts, and definitely do not remember how to put it all together.  I'm sure it is more than worth me taking a pass through so thanks for the link.\n\nIt is encouraging to hear that you can learn through practice as well.  That is generally how I learn best so I'm all for it.  ", "id": "e4wdkcg", "replies": []}]}]}]}, {"body": "If your intelligence is high enough, you can do it. And intelligence is a real and relevant phenomenon, for those that don't believe it. Imagine the dumbest person you know on the one hand, and Albert Einstein on the other. A good way to find out your rough intelligence is to compare yourself to your elementary school class mates. Did you consider yourself to be on the upper half? If yes, you can probably learn to program just fine.\n\nYou don't necessarily have to learn any math to learn how to program. But it really helps, as it is a similar skill. And especially college-educated programmers assume that all good programmers know what they consider to be basic math, which is not at all basic for most people.\n\nFor game-programming especially, some math is required. Vectors, geometry, trigonometry, etc. are all very commonly used in game programming.\n\nIf you really want to learn programming, perhaps you should go through high-school math first? It should be possible to find a book that teaches programming without math though.", "id": "e4wgsgf", "replies": [{"body": "> If your intelligence is high enough, you can do it. And intelligence is a real and relevant phenomenon, for those that don't believe it. Imagine the dumbest person you know on the one hand, and Albert Einstein on the other. A good way to find out your rough intelligence is to compare yourself to your elementary school class mates. Did you consider yourself to be on the upper half? If yes, you can probably learn to program just fine.\n\nYikes lol.  I know many programmers are self-absorbed twerps that think they are brilliant gods but this was extra cringy.  Compare myself to my elementary school classmates?  Okay let me just go back to elementary school mentally and picture my entire class and then evaluate my \"intelligence\" against theirs, since our potential was all so readily evident at that age..\n\nI mean do you actually do moronic jerk-off mental exercises like that?  If anything, I think the fact that you've figured it out is proof enough that programming *does not* require high intelligence.  Because no intelligent person would ever spew literal mental diarrhea like that out and expect anything other than to be laughed at for it.\n\nAnd keep telling yourself that your little club is only for \"high IQ\" people or whatever.  Meanwhile, as someone who has actually learned and taught multiple difficult skills in their life, I'm going to go with the rational understanding that most anything is achievable by the vast majority of the population given the correct amount of dedication and learning.  Sorry to be the one to break it but unless you are literally pushing the human limits of a given field, there's nothing special about you or anyone else. You're just another person sitting on their ass in front of a computer.  ", "id": "e4xnr5l", "replies": [{"body": "> Yikes lol. I know many programmers are self-absorbed twerps that think they are brilliant gods but this was extra cringy. Compare myself to my elementary school classmates? Okay let me just go back to elementary school mentally and picture my entire class and then evaluate my \"intelligence\" against theirs, since our potential was all so readily evident at that age..\n\nI'm not a self-absorbed twerp. Nor did I say anything about my own intelligence. If you choose to read anything extra into what I said, that's fine, go ahead. I'm just trying to express what I genuinely believe; that there is a certain level of intelligence needed in order to be a good programmer. I know that it's taboo to speak of intelligence at all, but I thought you wanted to know what it takes to be a programmer. You even said you wanted an honest answer.\n\nDifferences in intelligence is well-studied and well-established, and to quote Jordan Peterson, a psychologist, \"If you don't buy it, you might as well throw away the rest of psychology.\" Also, you might be interested in the book [The Bell Curve](https://en.wikipedia.org/wiki/The_Bell_Curve). And by the way this research shows that intelligence in fact does show early in life, in children, and is very hard to do anything about. And the reason I said elementary school classmates is because that is a pretty good sample of the whole population, since almost everyone goes to elementary school.\n\nSorry for trying my best to give my sincere opinion. And by the way, since you asked, I thought you had your own doubts about your ability. How come \"You math skills is not good enough.\" would be a, presumably, acceptable answer but \"Your intelligence is not high enough.\" is not? And how come you are doubting your own ability, and at the same time totally disagree with my opinion that some can't become good programmers because of their intelligence? Or maybe \"Your math skills is not good enough.\" would in fact not be an acceptable answer, and you would react in the same way to that response too. Maybe you just wanted someone to pat you on your back, and not actually an honest answer.\n\nPeople who say things like \"Anyone can do anything.\" are, I think, lying to themselves. Not everyone can become a theoretical physicist, for example. \n\n> I mean do you actually do moronic jerk-off mental exercises like that? If anything, I think the fact that you've figured it out is proof enough that programming does not require high intelligence. *Because no intelligent person would ever spew literal mental diarrhea like that out and expect anything other than to be laughed at for it.*\n\nFirst of all, you don't know that. There is no way for you to know that. If you think that you know, you are lying to yourself. Second, maybe I did expect to get laughed at but didn't care. Maybe this was my sincere opinion anyway. Or maybe you would have preferred that I lied to you and told you everything is going to be fine if you just really, really want it, and let you, possibly, waste years on something you will never enjoy or be good at. And, perhaps superfluously, I'd like to point out that what I said does not in any way constitute a proof of anything.\n\n> And keep telling yourself that your little club is only for \"high IQ\" people or whatever. Meanwhile, as someone who has actually learned and taught multiple difficult skills in their life...\n\nOk, so if you have learned many difficult skills, why do you doubt yourself? And maybe you are intelligent then, I didn't ever say you weren't. Although your response has given me more to go on.\n\n> I'm going to go with the rational understanding that most anything is achievable by the vast majority of the population given the correct amount of dedication and learning.\n\nWhat makes it rational? Do you actually have good reasons, like research (that by the way exists for my claim), or is your own personal opinion rational just because it is *your* opinion?\n\n> Sorry to be the one to break it but unless you are literally pushing the human limits of a given field, there's nothing special about you or anyone else. You're just another person sitting on their ass in front of a computer.\n\nI never said I was special.", "id": "e4xtnkd", "replies": [{"body": "The second you threw Jordan Peterson and \"The Bell Curve\" out I was done reading anything else you could ever have to say to me.  That's a level of retarded bullshit that I want nothing to do with in this life or any other.  If nothing else, I will learn to program just so I can come back and dump on people like you later.  Bye forever lmao", "id": "e4yc3h3", "replies": [{"body": "Oh, you are one of those. Have fun in your bubble.", "id": "e4ycfgb", "replies": [{"body": "Have fun in retard world.", "id": "e4yda6l", "replies": []}]}]}]}]}]}], "title": "can you actually learn programming with terrible math skills?"}