{"url": "https://www.reddit.com/r/learnprogramming/comments/9abwfh/compression_for_hand_copying/", "text": "My boss was telling me about back in the day when people had computers with no ROM at all, so they would type in game source code out of magazines and play all day, then do the same the next day.\n\nMy idea was to compress it so it would be easier to type, since that would be easier than inventing something that could connect to the computer to send 1s and 0s. It made me wonder if there are any compression algorithms that would be easier to type or read than normal ones.", "score": 1, "comments": [{"body": "I created a JSON serializer that will create variables and reuse them which compresses the end result. I suppose that is an example", "id": "e4u9i7s", "replies": [{"body": "That would take you a long way, just minifying the variable names!", "id": "e4ubccg", "replies": [{"body": "Actually, it creates variables based on the data it's serializing. E.g if the point (0, 0) is used more than once it creates a variable for that point and puts the variable name in it's place", "id": "e4zk69l", "replies": []}]}]}, {"body": "The problem is without an existing program to interpret your compressed input you can't use this to bootstrap the system.  The good ol' days of punch cards had to encode the actual instructions because they were directly loaded into memory and executed as-is.  Not to mention that computer code is relatively high-entropy meaning it doesn't compress well at all so using a sophisticated compression scheme to eek out a few percent decrease in size probably isn't worth it.\n\n\u200b\n\nThe invention of cheap digital cameras means most (if not all) modern paper-based digital storage schemes are basically QR/barcodes on steroids.\n\n&#x200B;\n\ne:  The real interesting question is how do you encode binary information into a format that a human can read without error.  Someone has to have written a thesis on this before.", "id": "e4ughwe", "replies": [{"body": "You can do this. One approach maps sequences of characters (edit: binary digits) to four or five character English words (don't remember how many bits per word). If you type \"frok\" instead of \"fork\" you'll probably spot it. Alas, I don't remember any more details.\n\nEdit: Well, some of the details are obvious. If you have a dictionary of 1000 four and five character English words then you can convert 10 bits at a time to a word. Make one word in ten (say) a checksum of some kind for error detection and you are good to go.", "id": "e4uigyt", "replies": []}]}], "title": "Compression for hand copying?"}