{"url": "https://www.reddit.com/r/learnprogramming/comments/9anzeu/why_is_htmls_tag_a_risky/", "text": ">By default, anchor elements leak the URL of the page to the target when clicked. This is a security and privacy risk.\n\nWhat does it mean by leaking the URL of the page to the target when clicked?\n\n\u200b\n\nFor example\n\n    <a href =\"https://www.google.com\">google site</a>\n\nHow is this unsafe? When the user clicks on the \"google site\" text, it directs the user to www/google/com", "score": 53, "comments": [{"body": "Clicking on the tag redirects you to the target page. A header will be set which tells the target page from where you come (the page you clicked the tag on).\n\nThe target website can read the redirect header, or see that there is none in case you go to it directly, and know where most of its users come from. Not everyone likes to share stuff like this, thus it's a privacy violation to them.", "id": "e4wsgnh", "replies": [{"body": "Thanks. This is easy to understand", "id": "e4wsut8", "replies": []}, {"body": "What would you use in lue of the <a> tag? ", "id": "e4x0qie", "replies": [{"body": "`<a href=\"https://example.com\" rel=\"noreferrer\">Example.com</a>`\n\nYou could use HTTP headers too", "id": "e4xavsg", "replies": [{"body": "Ah, perfect! Thanks. ", "id": "e4xgz5k", "replies": []}, {"body": "There's probably a browser plugin that replaces all the links with rel=\"noreferrer\" client side. If I understand what this is doing...", "id": "e4xqken", "replies": []}]}, {"body": "[in lieu*](https://www.vocabulary.com/dictionary/lieu)", "id": "e4xlke5", "replies": []}]}, {"body": "Are there any alternatives or best practices to avoid this issue?", "id": "e4x0gek", "replies": [{"body": "As mentioned one way is to use a noreferrer tag. The other is to add an interstitial page when leaving your domain. That's why on twitter/facebook you'll notice any external link first goes to a middleman page that simply redirect away.", "id": "e4xfp7k", "replies": [{"body": "I'm really new to web development, so I'll have to research these concepts a little more, but thank you for the information.", "id": "e4xi9uq", "replies": []}]}]}, {"body": "But you can configure your webserver to inform Mozilla Firefox, Chrome et cetera ([Can I Use?](https://caniuse.com/#search=Referrer%20Policy)) to govern the [Referer](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) header by setting a [Referrer-Policy](https://caniuse.com/#search=Referrer%20Policy).", "id": "e4wvskq", "replies": []}, {"body": "so is it correct to think that <a> is alright if u are redirecting to your own website, but not third parties?", "id": "e4wv7pl", "replies": [{"body": "\"All right\" is a relative thing. For most users and most use cases, links are fine. In the case that you (or your user) doesn't want a site to have the ability to know who the referrer was, then it's not acceptable.", "id": "e4x03dx", "replies": [{"body": "Can't the user just decide to not click the link, or right click > open in incognito window?", "id": "e4xc5v7", "replies": [{"body": ">Can't the user just decide to not click the link\n\nOf course they can, but there are techniques available so that you can still have the functionality of a link that doesn't send a Referrer header.\n\n>or right click > open in incognito window\n\nI'm 99% sure that Incognito/Privacy modes don't fully remove Referrer headers from your requests. I think Firefox strips paths so it's just the domain that sent you, for example. Incognito is *client-side* privacy, not server.\n", "id": "e4xgcgq", "replies": []}]}, {"body": "This isn't something you should concern yourself with. It's something I feel the user should be responsible for, not you. It's an option in all known browsers.", "id": "e4y5y1s", "replies": []}]}]}]}, {"body": "TIL a is for anchor", "id": "e4wv264", "replies": [{"body": "Oh thank god I thought I was the only one who didn't know", "id": "e4xabf7", "replies": [{"body": "Everyone learns something new every day.  Imagine what you'll learn tomorrow!", "id": "e4xvfll", "replies": []}]}]}, {"body": "This advice is awful. Disregard it completely.\n\nOthers have talked about passing a `referal` HTTP header to the target website. While true in most situations, this is entirely reasonable and I've never met a serious privacy advocate that would legitimately complain about this. Anyone seriously concerned about this has _much_ bigger fish to fry in terms of privacy violations on the Internet.\n\nThe security angle has absolutely no teeth whatsoever. At best, whomever gave you this advice is arguing [security through obscurity](https://en.wikipedia.org/wiki/Security_through_obscurity) - that an attacker will see the URL in the `href` attribute and manually change the query string to something that executes an attack. As an example, if you had a URL that deleted users from the site called: `deleteUsers.php?user=badUser`, the attacker could change the variable to say: `deleteUsers.php?user=TechNoob1997` and use that URL to delete your account. However, if your application security relies on people not being able to view the URLs, you've failed entirely. Because URLs are visible inside the Chrome network tab regardless of how they're loaded. \n\n", "id": "e4y4ma1", "replies": []}, {"body": "In addition to xss as mentioned, one thing that can be a problem is information leakage if there is sensitive informatino in the url.\n\nWhat I mean is some sites do this:\n\n    www.somerandomsite.com/profile?userid=12345\n\nIf that site had a link to another external site. The site that is linked to would get a referrer header with the above information. If the target site was malicious (or compromised) then the bad actors would know that your userid = 12345.\n\nThat's why some sites have an interstitial (middle man) page when linking to another domain.", "id": "e4xg0b9", "replies": []}, {"body": "H'okay,\n\nHere's the entry for an href exploit on OWASP:\n\nMalformed A tags\nSkip the HREF attribute and get to the meat of the XXS... Submitted by David Cross ~ Verified on Chrome\n\n<a onmouseover=\"alert(document.cookie)\">xxs link</a>\n\nor Chrome loves to replace missing quotes for you... if you ever get stuck just leave them off and Chrome will put them in the right place and fix your missing quotes on a URL or script.\n\n<a onmouseover=alert(document.cookie)>xxs link</a>\n\nIf you think that's interesting, or want to know about other cross site scripting vulnerabilities (and how to protect your site from them), go here:https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n\n", "id": "e4wsjlr", "replies": [{"body": "This is total nonsense. As a native English speaker I can't parse what that person is trying to say.\n\nI don't understand what this has to do with `<a>`. Of course, if you output user provided input without escaping it you _will_ have a problem - but this applies to _anywhere_ this happens in your code.", "id": "e4y3xd3", "replies": []}]}, {"body": "What's so funny is that <a href> is what was listed in our HTML books FOR ALL LINKED CONTENT in Comp Sci 102...oops.  TIL that a little bit more of what I was taught in that class was wrong...", "id": "e4xuyt1", "replies": []}, {"body": "Another problem is the potential for [reverse tabnabbing](https://www.owasp.org/index.php/Reverse_Tabnabbing)", "id": "e4y46ug", "replies": []}, {"body": "This box in MDN describes risk of dynamic links and websites using for example the database.\n\nFor example: it's risky to not control accessing the link with generated key to changing password (if forgot) of user. What if that link will display to the other users?", "id": "e4wse0u", "replies": []}], "title": "why is html's tag, <a>, risky?"}