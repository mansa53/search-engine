{"url": "https://www.reddit.com/r/learnprogramming/comments/9b1xnx/trying_to_understand_static_vs_dynamic_websites/", "text": "I've seen a bunch of definitions of static websites and dynamic websites that **should** answer my question but for some reason I get confused.\n\nMy website makes use of a flask backend with an sqlite database. The website makes simple GET requests and POST requests in the javascript, and the flask backend handles all of the database logic. Does that make my website dynamic?\n\nAnd what does that mean for web hosts who only do static websites? Does that mean they don't allow http requests? Or just that they don't want to also have to host a backend api with a database and that we can still use their services but just need to host the backend somewhere else?  \n\n\nEdit: This is similar to what I am trying to do. Kind of answers my third paragraph questions. [https://www.reddit.com/r/flask/comments/71g288/deploying\\_a\\_flask\\_backend\\_react\\_frontend\\_app/](https://www.reddit.com/r/flask/comments/71g288/deploying_a_flask_backend_react_frontend_app/)", "score": 1, "comments": [{"body": "A static website is one who's content is *static* and not generated dynamically. Meaning that a static site is made of **pre-made** assets. So, each page on the site would be represented by a `.html` file on the server. In this case, the \"back-end\" is literally just the web server. It's just responding to GETs by returning files with a media type of `text/html`. \n\nOnce you introduce a database into the mix, you've got a dynamic site. Because instead of having static HTML files, you have some kind of templates that you fill with data from your database, then *generate* the HTML that gets sent to the client. Your back-end loads the data, \"hydrates\" the template, and streams the results back to the client, all on the fly. That's a *dynamic* site.\n\nSide note: when I'm talking about a database there, I really mean some data source, not necessarily an actual DB. It could be a remote web service that you're calling. It could be a text file. It could be literally anything that you load and use to produce content.\n\nSo, based on those definitions, which kind of site do you think you have?", "id": "e4zqmlh", "replies": [{"body": "I think I have a dynamic website, thanks.  \n\n\nThe site is made with react, makes multiple GET requests and POST requests to a flask backend. The flask backend connects to the sqlite database and retrieves urls. The site is given those urls and uses javascript to place them in the 'src' attribute of image tags and iframe tags.", "id": "e4zr35p", "replies": [{"body": "Correct, that is a dynamic site. Static sites are actually a relative rarity today, as most sites need to *do* something.\n\nStatic sites make good landing pages, or profile pages, or project information pages. Stuff like that. Stuff that doesn't change, and doesn't need to be created dynamically.\n\nThere's also a popular thing these days called a \"static site generator\". It uses tooling to produce a set of static HTML files from a set of markdown files or some other data source. It allows you to create what appears like a dynamic site with the performance of a static site. I'd call it \"compile-time dynamic, run-time static\" site.", "id": "e4zssmq", "replies": []}, {"body": "Anything more than HTML + CSS + JavaScript is a dynamic website.\n\nThe three mentioned above are for front end development and produce static content (although you could generate stuff with JavaScript, if it's not using AJAX to make requests to some kind of back end, it's not dynamic).\n\nIf you have a website that uses PHP, Python, Ruby, Java, C#, etc + a database technology (MySQL, NoSQL, PostgreSQL, etc) - it's a dynamic website.", "id": "e501vnp", "replies": []}]}]}, {"body": "The definitions given so far are correct but not complete, as they are only referring to server-side dynamic websites. These are ones where the server serves different resources (e.g. HTML) to the client dynamically. \n\nHowever, a client-side dynamic site actually has a lot more in common with static ones. In both, the resources (HTML, CSS, JavaScript, etc) served to the client are only served once. The JavaScript may fetch data from elsewhere and manipulate the DOM but it doesn\u2019t require resources to be generated and served dynamically.\n\nProviders that allow you to host static sites (e.g. Netlify, GitHub Pages, Amazon S3) will also be able to host client-side dynamic sites for this reason. They only need to serve the resources once and anything dynamic is being handled by your browser. ", "id": "e501yu6", "replies": []}, {"body": "A \"static\" web site is unchanging, with all the content pre-made and served up exactly the same, regardless of who asks or when.  A \"dynamic\" web site is generated (at least partially) on the fly, so it can vary over time or provide different content to different people.", "id": "e4zqjni", "replies": []}], "title": "Trying to understand Static vs Dynamic Websites"}