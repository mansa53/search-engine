{"url": "https://www.reddit.com/r/learnprogramming/comments/9bfghw/people_who_are_active_on_codesignal_i_need_your/", "text": "People who are active on Codesignal, I need your help with the [PoolTableBounce](https://app.codesignal.com/challenge/thbu5Wpoaz8CNhKj7) challenge. \n\nSo far, this is my code, and it passes all the tests except the very last test (Test 32). Could anyone explain to me why this code fails for Test 32? Thanks.\n\n\n\n    function poolTableBounce(width, height){\n        var p1 = new Map();\n        var p2 = new Map();\n        var p3 = new Map();\n        //pattern 1 set\n        p1.set(1, 2);\n        p1.set(2, 3);\n        p1.set(3, 2);\n        p1.set(4, 1);\n        \n        //pattern 2 set\n        p2.set(1, 5);\n        p2.set(2, 2);\n        p2.set(3, 5);\n        p2.set(4, 3);\n        p2.set(5, 5);\n        p2.set(6, 2);\n        p2.set(7, 5);\n        p2.set(8, 1);\n        \n        //pattern 3 set\n        p3.set(1, 5);\n        p3.set(2, 5);\n        p3.set(3, 5);\n        p3.set(4, 2);\n        p3.set(5, 5);\n        p3.set(6, 5);\n        p3.set(7, 5);\n        p3.set(8, 3);\n        p3.set(9, 5);\n        p3.set(10, 5);\n        p3.set(11, 5);\n        p3.set(12, 2);\n        p3.set(13, 5);\n        p3.set(14, 5);\n        p3.set(15, 5);\n        p3.set(16, 1);\n        \n        //if width is part of the sequence 8, 16, 24,...\n        if(width%8 === 0){\n            //if width is part of the sequence 16, 32, 48...\n            if(width%16 === 0){\n                if(height === width/2){\n                    return 2;\n                }else if(height === width){\n                    return 3;\n                }else {\n                    return 5;\n                }\n            //if width is part of the sequence 8, 24, 40...\n            }else if(width%16 === 8){\n                if(height > 16){\n                    if(height%16 === 0){\n                        return 1;\n                    }else {\n                        return p3.get(height%16);\n                    }\n                }else {\n                    return p3.get(height);\n                }\n            }\n        //if width is part of the sequence 4, 12, 20, 28,...\n        }else if((width-4)%8 === 0){\n            if(height > 8){\n                if(height%8 === 0){\n                    return p2.get(8);\n                }else {\n                    return p2.get(height%8);\n                }\n            }else {\n                return p2.get(height);\n            }\n        //if width is part of the sequence 2, 6, 10, 14...\n        }else if((width-2)%4 === 0){\n            if(height > 4){\n                if(height%4 === 0){\n                    return p1.get(4);\n                }else {\n                    return p1.get(height%4);\n                }\n            }else {\n                return p1.get(height);\n            }\n        } \n    }\n\n", "score": 1, "comments": [{"body": "I can't see test 32, but I would like to offer some advice for how to approach this problem.\n\nAt any given time you can track the `x` and `y` coordinate of the ball.  The problem is set up so you will only ever travel at 45 degree diagonals.  So you can also track the \"velocity\" in the `x` and `y` directions as either 1 or -1.  Let's call this velocity `dx` and `dy`.\n\nYou also can pretty easily express the location of each pocket.  For example, pocket 0 is at `0, 0`, while pocket 2 is at `width/2, height`.\n\nSo now just run a loop and adjust `x`, `y`, `dx`, `dy` on every iteration.  An outline would look something like:\n\n    do {\n      // Update ball position\n      x += dx;\n      y += dy;\n    \n      // Reverse directions when necessary.\n      if (/* hit left or right side */) dx = -dx;\n      if (/* hit top or bottom */) dy = -dy;\n    \n    } while (/* not in a pocket */);", "id": "e533atm", "replies": [{"body": "that's actually pretty much what I did, but I think OP is onto something.  It seems like he found a pattern - according to his code, depending on a few conditions of width values, the pocket that it will land in can be found in O(1).  I tried this code myself on the site, and it really does pass 31/32 tests, so there's definitely something here.  Idk what the last test would be, though the pattern seems right.", "id": "e5anr56", "replies": []}]}], "title": "People who are active on Codesignal, I need your help with the PoolTableBounce challenge."}