{"url": "https://www.reddit.com/r/learnprogramming/comments/9cphbu/a_little_bit_of_methodology/", "text": "Hello!\n\nI want to get into the programming world in a professional way, and I want to be sure I'm not doing a mistake so I'm planning to try and learn on some projects at home for a year or more before trying to get a degree if I feel it good (I have a work, its not a full time trial).\n\nMore than a language, I want to learn how to solve problems so my concerns aren't about \"What language\" but rather \"Am I doing it right?\".\n\n- I think I will Schematize how my softs will work, then trying to translate it into an algorithm before making actual code. Is this a common approach in the programming jobs? If no, how programmers plan their code?\n\nMy 1st project will be a weekly menu generator, based on a list of dishes I know. It will have special conditions on how they are spread, tweaking options depending the season, and many optional features after the core functionality is done.\nThen i got two(3?) ways to do it:\n\n>1. I want to write it in Python (I got a windows machine and a raspberry with raspbian and a laptop on Linux too, it might be a good idea to make it cross plate-from).\n\n>2. Doing it on a web server host on the raspy, but that's not my preferred solution since I'm not very good when it comes to design webpages :P\n\n>3. Or a mix of both solutions, making a soft in python to install on my local machine and using my raspberry to store the recipe database on the raspberry.\n\n- I think I have to start simple, is my 1st approach good?\n\n- What are the good programming habits I have to learn/You learnt the hard way?\n\nA little bit of context: The only programming notions I got are Ruby (15 years ago, making little scripts in RPGmakerXP) and a little bit of VBA 10 years ago, in my school path.\n\n\nThanks!", "score": 2, "comments": [{"body": "I love your approach!  Many beginners (including myself) find themselves caught up in things like \"best language\" or just learning programming syntax without any sort of intuition on what they want to build.  Its a super valuable skill to be able to step back plan out the solution and then begin coding rather than just jumping into it.  One bit of advice that I wish I knew at the time: don't worry about things being right when it comes to best practices / design patterns / architecture (unless you are learning these things specifically of course) just get your program to work and worry about maintainability and what not later.  The reason I say this is so many of my projects never went anywhere since I was so concerned with coding it the right way instead of just getting things to work.", "id": "e5ce480", "replies": [{"body": "Thank you for your advice!  I could have fall in the that trap, being a bit too much perfectionist can be counterproductive when it comes to learn new things.", "id": "e5dak8o", "replies": []}]}], "title": "A little bit of methodology."}