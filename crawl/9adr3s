{"url": "https://www.reddit.com/r/learnprogramming/comments/9adr3s/what_you_guys_hate_about_javascript_compared_to_c/", "text": " What you guys hate about Javascript compared to C#, Java, C++ etc ?", "score": 0, "comments": [{"body": "Are you again in your usual \"hate/love\" questions?\n\nIf you don't stop that once and for all, you will be made leave here.\n\n**Edit:** it's not targeted harassment at you. You have been made aware of the nonsensical and controversial nature of your questions on basically every single of your posts. There is a time when you've reached the acceptable limits and this time is now.", "id": "e4utrrh", "replies": []}, {"body": "About the language itself? Just the (lack of a) type system.\n\nAbout JS software/the community? [Lack of interoperability](https://what-problem-does-it-solve.com/webpack/interoperability.html). All that exists is a huge pile of mess and just wants to become the next Cobol/Fortran that no one wants to maintain because everything about it is more complicated than it needs to be. Most JS programmers are young, without experience. Most JS programmers repeat the same mistakes people made in the 80s or 90s. This is the fate of all software development anyway as the number of software developers doubles about every 5 years so at any point in time you have 50% of all programmers in the world with less experience than 5 years. It's not the fault of the young developers. It's just that they tend towards JS which makes JS software something I don't want to deal with.", "id": "e4upqv9", "replies": []}, {"body": "I think the hate against JS is exaggerated by the fact that people tend to write a lot of their code in old, pre ES6 JS, which has some really dumb standards, (the global `var` for one). Modern JS really isn't all that bad, and there are nice transpilers that can transform modern JS into browser compatible old JS.\n\nAll the languages you mentioned are strictly statically typed languages with a rigid system of classes and types. Comparing them to JS won't lead to anything productive. It'd be better to compare JS to something like Python, about that I'll only say that Python might be a smarter language than JS in some ways, but the biggest issues people have with JS are caused by (some of) the developers rather than the language itself, in Python it's a lot trickier to write shitty code.", "id": "e4uq0g4", "replies": [{"body": "Modern browsers support nearly every single feature of the es6 specification now. Even modules, though the implementation is a bit different (.miss files to specify modules)", "id": "e4urr0c", "replies": []}]}, {"body": "So I'm a noob with JS but I know a little about some other languages.\n\nJS seems... messy. I don't have the technical grasp of it that many will - and I might be missing a reason for these things, but it just seems to have these little things that just defy convention (and, I'd say logic). \n\nLike `var`, with `let`this is less of a problem, but who thought hoisting was a good idea? Automatic global declaration if you assign to a non existent variable?! - Again with `strict` that doesn't happen, but it's bonkers to me. Or the way equality can work, it's obviously not non-deterministic but it does feel a little contrived.\n\nAnd I don't really like what little I've seen of the ecosystem either, pulling in thousands of dependencies from god knows who for even the smallest of things, that just seems like a ticking bomb.", "id": "e4usu4m", "replies": []}, {"body": "It seems very hard to make assumptions about JS code. You can't trust encapsulation the same way, it can't trust that someone hasn't done something inadvisable in another part of the codebase that isn't going to fuck your shit up. \n\nI write in almost any other language and I don't need to worry nearly as much about language details or thinking \"how do I do this while both keeping consistent with the current code but also not creating technical debt\". \n\nMaybe it's just that I'm not as used to JS as a proper front end developer, but it's a strike against a language nonetheless.\n\nI go write some Java and I know a lot more about stuff without having to look at the rest of the codebase. You can take this a step further; in Kotlin you can be more certain about null safety without having to check whether a function can return null. You might say that a good programmer can ensure their code is of good quality, but we're humans and humans screw up, and this gets magnified when you're working in a team and have to rely on others' code. ", "id": "e4v4929", "replies": []}], "title": "What you guys hate about Javascript compared to C#, Java, C++ etc ?"}