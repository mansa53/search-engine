{"url": "https://www.reddit.com/r/learnprogramming/comments/9ak34d/c_attempting_to_reference_a_deleted_function/", "text": "I've been attempting to wrap my head around using smart pointers in situations where a pointer is necessary or makes sense to use. In this case, it's the fact that some SDL2 resources won't work unless they are declared as a pointer. For example, SDL\\_Texture \\*texture\n\nSo I've been working out how to call things like SDL\\_DestroyTexture on a texture when it goes out of scope, using smart pointer logic, rather than relying on a manual call at the end of the program (what I was doing prior).\n\nFor the most part, I thought I'd gotten to where it was making sense, but now I keep running into an error with a particular pointer for some reason that is clearly beyond my current understanding:\n\n>error C2280: attempting to reference a deleted function\n\nHere is a pastebin with the code that is giving me problems:\n\n[https://pastebin.com/sAeUbXBc](https://pastebin.com/sAeUbXBc)\n\nOh and because I forgot it in the pastebin, here's the sdlCleanupTexture struct that gets called as the destructor for the unique\\_ptr:\n\n    struct sdlCleanupTexture\n    {\n    \tvoid operator()(SDL_Texture* tex) const\n    \t{\n    \t\tSDL_DestroyTexture(tex);\n    \t\tSDL_Log(\"Texture destroyed\"); // For debugging\n    \t}\n    };\n\nThough I have no reason to believe this part would be causing issues because it's worked for other, near identical code.\n\nThat's what is causing me to pull my hair out about this one. I have near identical code in the same program that is giving no such error and now I'm wondering if the other code only appeared to be fine and it has issues too, that just aren't being caught by the compiler for some reason.\n\nIt occurs to me now that it might make more sense to just bake an SDL\\_DestroyTexture call into the struct's destructor for  textDisplayFilename, rather than using a unique\\_ptr, but nonetheless, I would like to figure out why this approach is suddenly giving me issues and isn't claiming the same issue for other structs that have an almost identical setup and usage.\n\nHere is a more detailed version of the error message:\n\n>note: 'textDisplayFilename::textDisplayFilename(const textDisplayFilename &)': function was implicitly deleted because a data member invokes a deleted or inaccessible function 'std::unique\\_ptr<SDL\\_Texture,sdlCleanupTexture>::unique\\_ptr(const std::unique\\_ptr<SDL\\_Texture,sdlCleanupTexture> &)'  \n>  \n>1>c:\\\\program files (x86)\\\\microsoft visual studio\\\\2017\\\\community\\\\vc\\\\tools\\\\msvc\\\\14.14.26428\\\\include\\\\memory(2308): note: 'std::unique\\_ptr<SDL\\_Texture,sdlCleanupTexture>::unique\\_ptr(const std::unique\\_ptr<SDL\\_Texture,sdlCleanupTexture> &)': function was explicitly deleted\n\nBased on some of the things I've been reading in trying to work this out, I get the sense that part of my problem is I just haven't fully grasped how smart pointers work and how they should be used in general, but I'm not sure how to apply that to this particular issue.", "score": 1, "comments": [{"body": "Your compiler should give you a line number where the error happens. In this case I'm pretty sure it's this line:\n\n    txtFilenames.push_back(filenameTxtRender);\n\n`vector::push_back` makes a copy of the new element, but `filenameTxtRender` contains a `unique_ptr` which cannot be copied. Because you don't use `filenameTxtRender` after that line you can move it to the vector:\n\n        txtFilenames.push_back(std::move(filenameTxtRender));", "id": "e4w0gqu", "replies": [{"body": "That makes sense, thanks. I'll give that a look. Fits with the theory that more than just the one struct setup had issues.", "id": "e4w0q11", "replies": []}, {"body": "Just tried it, that fixed it, thanks! I will keep that one in mind in the future. ", "id": "e4w0vo1", "replies": []}]}], "title": "C++ attempting to reference a deleted function, unique_ptr, and SDL2, error C2280"}