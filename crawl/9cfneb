{"url": "https://www.reddit.com/r/learnprogramming/comments/9cfneb/favorite_online_tutorial_format_for_complex_ideas/", "text": "I'm working on producing a long form \"tutorial\" that will cover my process of designing a service from start to finish, including many side aspects and considerations. I've found the most common formats of tutorials a bit difficult to use for more complex topics and I wanted to get the communities opinions on your favorite **structured** tutorial. Completely independent of the topic being taught, if you know of a tutorial/lesson that you were impressed by the method it presented interlaced topics or just difficult topics I'd love to hear it!\n\n&#x200B;\n\n\\----\n\n&#x200B;\n\nA quick comment on why I think this is valid question for r/learnprogramming. I've found writing a good programming tutorial to be a difficult process, primarily because of the range of topics that need to be presented, but also that the writer always have to *assume* some level of previous experience. For example in a tutorial covering continuous integration you're going to have to make the assumption that the reader already has a mastery of at least one programming language, that they're familiar with at least the basics of hosting a service, and probably that they're at least exposed to unit testing/integration tests. I find that tutorials that do a poor job of establishing the expected base level of knowledge often feel \"all over the place\" in terms of what they choose to describe deeply. Maybe they'll spend a good chunk of the tutorial covering the basics of setting up a development environment, then a basic for loop, but then assume the reader knows shell scripting and has a basic understanding of what Docker is. \n\nSo if you've found a tutorial or lesson plan that you found particularly good, either in it's ability to convey a complex topic, or how it was organized I'd love to hear it. ", "score": 0, "comments": [{"body": "Thanks for doing this. I have always been intrigued with the new thing called `service` as I keep hearing about it all the time. \n\nI don't typically work through tutorials.. but here are some that I remember (and hence probably worked well for me):\n\n1. https://stanford.edu/~chrisyeh/2017/08/08/definitive-guide-python-imports.html\n2. https://www.youtube.com/watch?v=dZLyfbSQPXI\n3. https://automatetheboringstuff.com/chapter18/\n\nWould be awesome if you could post a link to your tutorial now or in the future..", "id": "e5acgzb", "replies": [{"body": "Awesome, thanks for those links I'll check them out. The term \"service\" is pretty broad and can range from a smaller micro-service like a 'registration' service that handles registering new users on your site and sending an introductory email, to a much larger services that make up major features of web applications like GMail.\n\nOne service inside GMail might be the searching service. Given a query it returns a list of emails, and hides all of the complexity that involves. Other developers can use the search service without knowing or caring how it stores data in the backend, or how it works at all. It watches for incoming mail, processes it to build an index of searchable terms, stores it in such a manner that it is fast to search and is also redundant to prevent loss of data, and uses the results to predict possible searches and generates hints for autocomplete when you start typing in the search box. \n\nI'm not ready to share my tutorial yet. But I'll save this comment and reply when I'm a bit further along. Cheers!", "id": "e5ai2pd", "replies": []}]}], "title": "Favorite online tutorial format for complex ideas"}