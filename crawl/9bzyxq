{"url": "https://www.reddit.com/r/learnprogramming/comments/9bzyxq/im_really_confused_about_what_sort_of_projects_i/", "text": "I\u2019m probably intermediate level and I\u2019ve been doing a few projects on my own but none of them feel like they\u2019re making me better at software engineering, mostly they just feel like data science implications of programming. (They\u2019re mostly in python)\n\nWhat are projects that I should be focusing on to make myself better at software engineering not just programming general, should I just contribute to open source?", "score": 2, "comments": [{"body": "Get the free tier of AWS, deploy and connect to an instance of a database hosted on AWS. Deploy a REST API on an EC2 instance that does CRUD operations to your DB instance. Implement an auth system and research all the best security practices around that. Learn a framework like react, create a front end and have it call your REST API.\n\nPut it all up for a code review and let people pick it apart and you'll learn tons, not just in doing all that but from what people say you could have done differently or better. Iunno, for me I learned a ton doing that and that was after programming for years.", "id": "e572frd", "replies": []}, {"body": "Maybe freelance?", "id": "e570wqj", "replies": [{"body": "I\u2019ve tried this and it\u2019s hard because I don\u2019t entirely understand the freelance market (I\u2019m 17, and yes I\u2019m planning on going to college) so I try to stay out of that domain", "id": "e5713uc", "replies": []}]}, {"body": "High level engineering philosophy here. \n\nYou can boil down engineering into three specific skills. Analysis, synthesis, and verification. You rephrase that as understanding a problem, building a solution, and quantifying how well that solution fits the problem domain. \n\nAnalysis is largely taught in undergrad, you'll cover background theory, common problem domains, and apply that knowledge to specific problems. Synthesis is also taught, but oftentimes academic study is years or more behind industry, and most practical application is learned in your first job or two (also, why internships are key). \n\nVerification is the least taught and imo, hardest to learn. It is however one of the quickest to *start* learning, and an easy way to separate yourself and become better. \n\nSo here's an idea, take a project you've already done and redo it as a case study. Start with the problem domain, state what you're trying to do and identify the biggest problems and current solutions. Then go to your solution, and quantify how it performs compared to other strategies, and list ways it could be improved. \n\nAlternatively, solve the same problem in a different way. \n\nI'll give you an example, classic problem with multiple solutions - topological sorting of processes. This is a well known problem with multiple solutions, but identifying the optimal solution for a particular case of the problem is the valuable skill. ", "id": "e578mqx", "replies": []}], "title": "I\u2019m really confused about what sort of projects I should be working on to make myself a better SOFTWARE ENGINEER"}