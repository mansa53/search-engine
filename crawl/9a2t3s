{"url": "https://www.reddit.com/r/learnprogramming/comments/9a2t3s/how_could_i_add_a_new_dbcontext_to_a_net_core/", "text": "I'm working on a project involving storing genres of music in a database and I want users to have to login in order to do that although I don't know how to add my own models as opposed to the models which are already in Asp.net core Identity. Is this doable, and should it be? is there a better practice way to do this instead of  my idea here?", "score": 1, "comments": [{"body": "You don't add \"your own models\" you use what is there \n\nOr you design a new table with EF and regenerate all the models \n\nhttps://www.google.ca/amp/s/chsakell.com/2018/04/28/asp-net-core-identity-series-getting-started/amp/\n\nIdentity doesn't have anything to do with dbcontext... Likely your application is architected incorrectly. You are not supposed to access the database from your MVC code but through webservices.", "id": "e4sdgek", "replies": [{"body": "I thought identity made it's own dbcontext so it  create a database to store data on the users that register for the site. I don't think I made a wrong architecture as I just added single user login as the authorization type when making my website in visual studio.", "id": "e4sq9xx", "replies": [{"body": "Okay; all you need to do is extend the IUserRepository interface and implement from there\n\nhttps://www.google.ca/amp/s/damienbod.com/2017/04/14/asp-net-core-identityserver4-resource-owner-password-flow-with-custom-userrepository/amp/\n\nI still think the architecture is wrong and if that's the case I would NOT use Identity and use cookie middleware\n\nhttps://aspnetcore.readthedocs.io/en/stable/security/authentication/cookie.html\n\nBut hey I am fucking old fashioned and don't think that the website should be mixed with the data access layer. Lol.", "id": "e4su1me", "replies": []}]}]}], "title": "How could I add a new DbContext to a .Net core website that has Identity using the code first approach?"}