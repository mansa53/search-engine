{"url": "https://www.reddit.com/r/learnprogramming/comments/9a3enm/const_reference_initialization_only_works_withing/", "text": "    #include \"stdafx.h\"\n    #include <string>\n    #include <iostream>\n    \n    class PrintString \n    {\n    \tconst std::string& m_string;\n    \n    public:\n    \n    \tPrintString(const std::string& string) :m_string(string) {\n    \n    \t\tstd::cout << m_string << '\\n';\n    \t}\n    \n    \tvoid printAgain() {\n    \t\t\n    \t\tstd::cout << m_string << '\\n';\n    \t}\n    \n    };\n    \n    int main()\n    {\n    \n    \tPrintString printAttempt(\"string\");\n    \n    \tprintAttempt.printAgain();\n    \n        return 0;\n    }\n\n\u200b\n\nthis prints:\n\n>string\n\nit compiles fine, but just print nothing from printAgain(). am i misunderstanding how const references work or is the problem something else?\n\n\u200b\n\n\u200b", "score": 2, "comments": [{"body": "m_string is a reference, initialised from a temporary.\n\nWhen printAgain is called, the string that m_string was a reference to has been destroyed\n\nMake m_string a string, not a reference to one\n", "id": "e4sggf2", "replies": [{"body": "i guess that works for this example\n\nbut what should i do if i want this class to also be able to take in a large string variable without the performance hit of m\\_string not being a reference?\n\ni actually used this as an example of a problem i'm having with a template class", "id": "e4she2v", "replies": [{"body": "You should move the parameter to the class member\n\nhttps://www.bfilipek.com/2018/08/init-string-member.html?m=1", "id": "e4shyl5", "replies": []}, {"body": "You need to think in terms of ownership semantics. Does printAttempt own the string? Then you need to move or copy it. Does printAttempt borrow the string? Then you need to make sure that printAttempt has a shorter life than the owner (which means the owner cannot be a temporary).\n\nTaking a reference or pointer as a parameter means you are borrowing. Taking a copy, std::unique_ptr, or rvalue reference as a parameter means you are taking ownership.", "id": "e4ss30y", "replies": [{"body": "alright thanks this is really helpful", "id": "e4zgbdl", "replies": []}]}]}]}], "title": "const reference initialization only works withing constructor"}