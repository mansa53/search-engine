{"url": "https://www.reddit.com/r/learnprogramming/comments/9bcczd/c_question_const_variables/", "text": "Hello,\n\n&#x200B;\n\nI have someone trying to request a const value from the user. is that a thing?\n\n&#x200B;\n\ncan we declare variable const and request a value from the user?\n\n&#x200B;\n\nas far as Im concerned const are hard coded values that never change so the user may NOT set a value. ", "score": 1, "comments": [{"body": "`const` doesn't mean what you think it means.\n\nFor example, this is completely valid code:\n\n    void foo() {\n        const int i = getValueFromUser();\n    }\n\n`i` is `const`, which means it can't be changed *after it's been initialized.*  Initializing it with user input is totally fine, but since it's `const` I can't later do `i++`, for example.  The value isn't hard coded at compile time, unless that's how it's been initialized.\n\nYou should also be careful with `const` references -- you can't modify the value via that reference, but the value can be changed in other ways:\n\n    void bar() {\n        int i = 42;\n        const int& r = i;\n        r = 24; // ERROR: can't modify this way\n        i = 24; // VALID: this is ok, since i isn't const\n    }", "id": "e51yfq0", "replies": [{"body": ">an't modify the value via that reference, but the value can be changed in other ways:\n\nSo, can I do something like,\n\n&#x200B;\n\n>const int i;  \n>  \n>cout << \"Enter value for i\"<< endl;  \n>  \n>cin>>i;\n\n&#x200B;\n\n? ", "id": "e52bc8m", "replies": [{"body": "No, because `i` is `const` and can't be modified after initialization.", "id": "e52dd57", "replies": []}]}]}, {"body": "Actually you can assign a runtime value to a constant variable. Check this SO question: https://stackoverflow.com/questions/14131855/c-assign-a-const-value-at-run-time", "id": "e51yh19", "replies": []}, {"body": "> as far as Im concerned const are hard coded values that never change so the user may NOT set a value.\n\nThe user can set a value. You just can not change it further. `const` objects can only be initialized, any subsequent `=` will not work.\n\nWhat you mentioned is `constexpr`.", "id": "e535i5c", "replies": []}, {"body": "if you declare something const you can't change it past it's initial value, so you're correct.", "id": "e51y0ou", "replies": [{"body": "Thank you, I thought I was crazy. ", "id": "e51yalq", "replies": []}]}], "title": "[C++] Question @ const variables"}