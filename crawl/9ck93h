{"url": "https://www.reddit.com/r/learnprogramming/comments/9ck93h/questions_regarding_the_mvc_pattern/", "text": "Hey,\n\n\u200b\n\nlet's assume I build an REST API, which supports a GET and POST route. What would be your recommendation on how to structure the controller?\n\n\u200b\n\nMy current structure:\n\n1. controllers\n   1. services\n      1. getServiceController.js\n      2. postServiceController.js\n\nI thought about the following alternative, which bundles both files (although this could lead to big files):\n\n1. controllers\n   1. services\n      1. serviceController.js\n\n\u200b\n\nAlternatively (the serviceController would simply be used to import/include the corresponding files (single source of truth) and would be accessible by others):\n\n1. controllers\n   1. services\n      1. serviceController.js\n      2. getService.js\n      3. postService.js\n\n\u200b\n\nWhich approach would you recommend and why?", "score": 0, "comments": [{"body": "I would say the second option. That doesn't necessarily lead to big files. The controller should not have all your business logic in it. It should just make the right calls and delegate.\n\nAlso if you really need to split it up, I don't see why \"get\" and \"post\" would be the right categories to split into. Business logic \"subservices\" would make more sense.\n\n&#x200B;", "id": "e5baskf", "replies": []}, {"body": "I would go with option #2 - as far as I am concerned GET and POST actions are still part of the same \"module\". Eg. you can create a new user (POST) or you can get their list/specific user (GET). Plus there's nothing really stopping you from defining an action that takes more than one verb (eg. PUT and PATCH are similar enough to not warrant extra logic in many cases). I am not sure if there's a point in splitting that into multiple files, especially since controllers are not supposed to be huge anyway (if you require lots of custom logic for each action in a controller you are doing something very wrong).", "id": "e5bay7c", "replies": []}, {"body": "Why are you splitting up your controllers based on a request method?\n\nEach controllers should be able to handle both post/get requests. \n\nAnd it should concern itself with a resource or other services. \n\nuserController - wrapper for get / post method calls in services. Can use many services. \n\nuserService - actual requests methods\n\n", "id": "e5cy5ga", "replies": []}], "title": "Questions regarding the MVC pattern"}