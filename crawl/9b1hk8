{"url": "https://www.reddit.com/r/learnprogramming/comments/9b1hk8/need_help_solving_this_problem/", "text": "A man is on standing on the x axis at 0, and receives a string on his phone to reach his destination.\n\n\\+ means moving 1 unit in the positive direction.\n\n\\- means moving 1 unit in the negative direction.\n\nThe string sent to him and the string he actually receives is distorted by external factors.\n\nThe string he actually receive contains a third character which is unreadable by him i.e. '?'. If he reads a ? he takes a random choice to move 1 unit to the right or to the left.\n\nI have to find the probability that the successfully man reaches his final destination with the text he received.\n\nFor example:\n\ns1 = +-+-\n\ns2 = +-??\n\ns1 evaluates to 0 (1-1+1-1).\n\ns2 can have values (2,0,-2,0)\n\nSo the probability that he reaches his destination is 2/4 = 0.5\n\n&#x200B;\n\nI'm having a hard time writing code for this. Any help would be appreciated. I first thought of finding all combinations of 1/-1 replacing the question marks. I kinda know what to do, but don't know how to do it programmatically.\n\n&#x200B;\n\nPlease help me out. ", "score": 0, "comments": [{"body": "What I'd probably do for this is add up all +s and -s before\n\nWe arrive at a number\n\nFind out the difference between this number and your destination\n\nThe question essentially becomes how many ways can you achieve a sum of x using y 1s and -1s\n\nPermute this value, divide by 2^y", "id": "e4zn4ef", "replies": []}, {"body": "\nThree approaches that I can think of are :\n\n1. Mathematical proof.\n\n2.  An exhaustive search as you did for the example you provided.\n\n3.  Simulation\n\nMaybe,  if you think about it,  it is possible to calculate the probability knowing the number of `?`\n\nIf it isn't calculatable,  then whether 2 or 3 is best depends on the size of the problem - which is the number of `?` symbols allowed.  Each doubles the number of final positions he can end up on :  your example had 2 `?` so there were 4 final positions.\n\nAt some point an exhaustive search will take too much time and/or storage to be useful and you could generate lots of possible corruptions of the string and estimate the error.", "id": "e4zn9x2", "replies": []}, {"body": "> I'm having a hard time writing code for this. Any help would be appreciated. I first thought of finding all combinations of 1/-1 replacing the question marks. I kinda know what to do, but don't know how to do it programmatically.\n\nIf you wished to do this, you'd have a recursive function that branched on reaching a ?\n\nYou'd have some builder list that started empty, and have some recursive (doesn't have to be recursive but I think it's easier) function that:\n\n      (s+\"+\")\n     /+\n    (s) (string of +, - so far, but reaches a '?')\n     \\-\n      (s+\"-\")\n\nand the list of options would be the appending of all end results of that branching.\n\nTotalGas's already offered solution basically cuts the non-? portion of the string out of the question, however, simply by calculating the difference.\n\nSo the total number of permutations is 2^(# of ?)\n\nThe probability is the number of those permutations that equal the difference divided by the total number of permutations above.", "id": "e4zr0h4", "replies": []}], "title": "Need help solving this problem."}