{"url": "https://www.reddit.com/r/learnprogramming/comments/9b20sz/net_core_webapi_contentful_reshaping_the_webapi/", "text": "Say I have some json like this, that I get from contentful via a http request:\n\n    {\n    \t\"system\": {\n    \t\t\"id\": \"2ga4d2w3\",\n    \t\t\"type\": \"human\"\n    \t},\n    \t\"forename\": \"John\",\n    \t\"surname\": \"Doe\",\n    \t\"age\": 28\n    }\n\nI'm told, in order to get my webapi to spit it back as json, I need to have a set-up of classes like this:\n\n    public partial class Human\n    {\n    \t[JsonProperty(\"system\")]\n    \tpublic SystemClass System { get; set; }\n    \n    \t[JsonProperty(\"forename\")]\n    \tpublic string Forename { get; set; }\n    \n    \t[JsonProperty(\"surname\")]\n    \tpublic string Surname { get; set; }\n    \n    \t[JsonProperty(\"age\")]\n    \tpublic long Age { get; set; }\n    }\n    \n    public partial class SystemClass\n    {\n    \t[JsonProperty(\"id\")]\n    \tpublic string Id { get; set; }\n    \n    \t[JsonProperty(\"type\")]\n    \tpublic string Type { get; set; }\n    }\n\nHowever I don't care for the System object, but only the id inside it, therefore I want to transform my object to look like this:\n\n    {\n    \t\"id\": \"2ga4d2w3\",\n    \t\"forename\": \"John\",\n    \t\"surname\": \"Doe\",\n    \t\"age\": 21\n    }\n\nNotice how the sys is gone and Sys.id is on the main object.\n\nHow could I achieve this result in .net core?\n\nI have an example of how I'd do it in JavaScript, and it goes like this:\n\n    const input = {\n    \t\"system\": {\n    \t\t\"id\": \"2ga4d2w3\",\n    \t\t\"type\": \"human\"\n    \t},\n    \t\"forename\": \"John\",\n    \t\"surname\": \"Doe\",\n    \t\"age\": 21\n    };\n    \n    const human = {\n    \t\"id\": input.system.id,\n    \t\"forename\": input.forename,\n    \t\"surname\": input.surname,\n    \t\"age\": input.age\n    };\n    \n    console.log(human);\n\nis there an equivalent to this in .net core?", "score": 1, "comments": [{"body": ">is there an equivalent to this in .net core?\n\nUsing two separate classes, one to deserialize into, and one to actually consume. In this example, I'll actually use four classes:\n\n    public class SystemInformation\n    {\n        public string Id { get; set; }\n        public string Type { get; set; }\n    }\n    \n    public abstract class HumanBase\n    {\n        public string Name { get; set; }\n        public int Age { get; set; }\n    }\n    \n    public class HumanSource : HumanBase\n    {\n        public SystemInformation System { get; set; }\n    }\n    \n    public class Human : HumanBase\n    {\n        public string Id { get; set; }\n        \n        public HumanModel () { }\n    \t\n        public HumanModel (HumanSource source)\n        {\n            Name = source.Name;\n            Age = source.Age;\n            Id = source.System.Id;\n        }\n    }\n\nYou'd use `HumanSource` to deserialize into, then you'd create a new Human by passing the source you just deserialized into it as a constructor property.\n\nSide note, you don't need to put `JsonProperty` on all your fields just for camel-casing. Search \"JSON.NET Camel Case\" and you'll find information on how to automatically convert your properties into camel case JSON.", "id": "e4ztggj", "replies": [{"body": "Thank you!\n\nI took what you kindly provided me, wrote it into my actual project, and it works like a charm.\n\nI'm really happy that this is possible as I was close to giving up on this and just writing the api in Node.js.\n\nOnce again, thank you ever so much! and have a great night! I know I will go to bed happy now :D", "id": "e4zuqoo", "replies": []}]}, {"body": "The full story is, I made a .net core webapi.\n\nI am using the contentful SDK to get some data and serialise it into the following model:\n\n    public class Project\n        {\n            public SystemProperties Sys { get; set; }\n    \t\tpublic string ID {\n                get {\n                    if(Sys is SystemProperties)\n                            return Sys.Id;\n    \n                    return null;\n                }\n                set { ID = value; }\n            }\n            public string Title {get; set;}\n            public string RepositoryLink {get; set;}\n            public string ShortDescription {get; set;}\n            public string Description {get; set;}\n            public Asset PreviewImage {get; set;}\n            public List<Asset> MediaGallery {get; set;}\n        }\n\n`SystemProperties` and `Asset` are from using `Contentful.Core.Models;`\n\nMy implementation above works fine, however, it also outputs the sys object on the webapi.\n\nI don't want the object there so I tried sys private, but that makes ID null,\n\nI have also tried adding `[IgnoreDataMember]` above Sys, which again results in ID being null.", "id": "e4zqxgf", "replies": [{"body": "Another thing I tried is to make the sys null on the controller side so that the model has it before it's removed, however that resuts in sys being in the output as null and id also being null.", "id": "e4zrg1h", "replies": []}]}], "title": "[.net core] [webapi] [contentful] Re-shaping the webapi json output?"}