{"url": "https://www.reddit.com/r/learnprogramming/comments/9aginx/writing_a_regex_engine_should_i_use_an_nfa_or_a/", "text": "Hello, I am writing a regex engine, I came up with a small specification and my intuition tells me that I should construct a GNFA (with more than 2 states) or an NFA; and use dfs to search for a final state. Should I go on in this direction or is there a better/ easier way?\n\nI have also thought that  I should be parsing the regex first, use 2 stacks; 1 to store the literals and parenthesis, and another for just the parenthesis; and construct a predicate when a parenthesis is closed or an appropriate control character is found. By the end I Should have a stack filled with predicates and literals that should then get concatenated.\n\nThis is my spec:\n\nControl Characters| Meaning  \n-|-  \n`^`|Start of line.  \n`$`|End of line.  \n`+`|The previous character 1 or more times.  \n`*`|The previous character 2 or more times.  \n`.`|Any character exactly 1 time.  \n`[]`|Any of the characters inside.   \n`\\` |Escape a control character.  \n`\\s`|Space/tab, singular.", "score": 3, "comments": [{"body": "Different regex engines work in different ways, each with their own benefits and limitations. Often the textbook way involves using the powerset construction to convert the NFA into a DFA which is extremely simple to match with.\n\nDoing it directly on NFA is probably doable too but that essentially involves doing the matching and powerset at the same time with DFS or something, might be trickier to get right. Some engines match directly from the regex AST as well but that's weird and differs from regular expressions' theoretical handling.", "id": "e4vekll", "replies": [{"body": "Neat, I found a post on Using NFAs and running the string in parallel; it\u2019s the method in grep and other similar nix tools use. \n\nI throught creating a power set for an nfa would be too much hassle.", "id": "e4z6h8d", "replies": []}]}], "title": "Writing a regex engine, should I use an NFA or a GNFA or is there another way?"}