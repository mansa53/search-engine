{"url": "https://www.reddit.com/r/learnprogramming/comments/9an533/i_have_been_consolidating_a_couple_c_sdl_and/", "text": "For the past two years I have been learning how to program video games through the use of several tutorials that are named and linked below. I know that one of the best ways to learn something is to teach it, and that is what I have been trying to do. \n\nSo what I'm asking is if anyone would like to either look at my work and critique it or join me on my very slow journey into this interesting field.\n\nMy tutorial video series: https://www.youtube.com/playlist?list=PLx25SxVo-qjn5eWRaBY96khBJSLy2wBty\n\nThe video series I gained much of my knowledge from: \nhttps://www.youtube.com/playlist?list=PLSPw4ASQYyymu3PfG9gxywSPghnSMiOAW\n\nA web based text tutorial series on OpenGL that I'm using as a referance: http://www.opengl-tutorial.org/\n\nThe book that I bought thinking it would help me but turned out kind of garbage: https://www.amazon.com/Game-Programming-Start-Finish-Development/dp/1584504323", "score": 8, "comments": [{"body": "> So what I'm asking is if anyone would like to either look at my work and critique it or join me on my very slow journey into this interesting field.\n\nI have only checked the website (can't watch videos right now) - few random articles from basic and intermediate tutorial.\n\nCheatsheets: The math cheatsheet looks good. I would change the matrix example - too many numbers are the same which makes it hard to map. Maybe also color numbers in pairs.\n\n> Free tutorials for modern Opengl (3.3 and later) **in C/C++**\n\nThis is a popular problem. The phrase is as nonsensical as \"Java/JavaScript\".\n\nFrom Bjarne Stroustrup FAQ:\n\n> There is no language called \"C/C++\". The phrase is usually used by people who don't have a clue about programming (e.g. HR personnel and poor managers). Alternatively, it's used by people who simple do not know C++ (and often not C either). When used by programmers, it typically indicates a \"C++ is C with a few useful and a lot of useless complicated features added\" attitude. Often, that is the point of view of people who like to write their own strings and hash tables with little knowledge of the standard library beyond printf and memcpy. There are people who stick to a restricted subset of C++ for perfectly good reasons, but they (as far as I have noticed) are not the people who say \"C/C++\".\n>\n> I use C/C++ only in phrases such as \"C/C++ compatibility\" and \"C/C++ community\".\n\n___\n\n**There is one but major problem which (perhaps) lives through your entire tutorial - you seem to write C code and claim it's C++**. Your \"C++\" code obviously compiles and I likely can't critize much the graphic stuff explanation itself, but the code quality is low. I added few examples below.\n\nYou definitely know how low-level stuff works. But you know C++ only at the level of \"C with classes\". I don't want to lever the graphic tutorial as for sure you have spend quite a lot of time doing it. It definitely helps to understand and learn computer graphics but at the same time it \"delearns\" C++ and it's core idioms.\n\n___\n\n> The `using namespace` is there to avoid typing `glm::vec3`, but `vec3` instead.\n\nThis is antipattern. Don't ever recommend this to anyone new. I hope you know why - if not - better ask and understand as it can result in really frustrating problems, especially for beginners.\n\n___\n\n    GLFWwindow* window = glfwCreateWindow( 1024, 768, \"Tutorial 01\", NULL, NULL);\n    if( window == NULL ){\n        fprintf( stderr, \"Failed to open GLFW window. If you have an Intel GPU, they are not 3.3 compatible. Try the 2.1 version of the tutorials.\\n\" );\n    // [...]\n\n#\n\n    glVertexAttribPointer(\n       0,                  // attribute 0. No particular reason for 0, but must match the layout in the shader.\n       3,                  // size\n       GL_FLOAT,           // type\n       GL_FALSE,           // normalized?\n       0,                  // stride\n       (void*)0 //<- THIS THING           // array buffer offset\n    );\n\n#\n\n    int main( void ) // very C-style, antipattern in C++\n\nI would not really care much about using C-style output (eg `printf()` instead of `std::cout`) as it is safe when used correctly. But other things bother me.\n\n`NULL`. Don't you use this (awful and unneeded) macro. In 2018, you should not be writing a tutorial for 1998/03 standards. Since 2011 you can use the keyword `nullptr` and it will be much safer than plain `0`. `nullptr` can not be accidentally mistaken as integer 0 - a mistake you are almost sure to commit when dealing with low-level graphics.\n\n`(void*)0` is just expanded C `NULL` macro - the same problem.\n\n`(void)` inside function signatures is unneeded. It is required in C, but because C++ has different rules for function signatures, this is held only for compatibility with C code.\n\n___\n\nAnd one major thing your code lacks: RAII. When there is no RAII, there is no true C++. Graphic stuff is very related to managing resources and it feels almost mandatory to at least mention that there are mechanisms to automatically and safely manage resources.", "id": "e4wud39", "replies": [{"body": "I appreciate your reply, but you appear to be reviewing the website that I linked. I did not make this website or write any of the tutorials on it. I simply used it as a source to help inform my own tutorials, which is the first link and the first link only. I will keep in mind your recommendations when using it as a source though.", "id": "e4wvj8a", "replies": [{"body": "Ahh, my mistake then, I understood that this website is the reference to your videos.\n\nAnyway, you got a short list of very common mistakes when teaching C++. I will check your videos when I'm back home.", "id": "e4ww0i1", "replies": []}]}]}], "title": "I have been consolidating a couple c++, SDL, and OpenGL into a tutorial series."}