{"url": "https://www.reddit.com/r/learnprogramming/comments/9cog3a/without_having_a_list_of_perfect_squares/", "text": "Hey guys\n\nIn case the title isn't too specific, I'll give an example to explain a little further.\n\nSay I am looking for sqrt(85). I know that the value will be in between 9 and 10 because 9^2 = 81 and 10^2 = 100. However, I only know this because I know that the closest perfect squares to 85 are 81 and 100. I was wondering if there was a way to determine that the closest squares are 81 and 100 without having to calculate any square roots beforehand (aka have a list of all the perfect squares that are known).\n\nThanks in advance :)\n\nEdit: I know the fast inverse square root algorithm does exists. I could definitely use that, then use ceil and floor to find the two perfect numbers below and above the original number's root. However, I am hoping for a less intensive way of doing this.\n\nEdit2: Maybe explaining the motivation for finding this may help.\nOnce you start calculating the square roots of relatively large numbers you can start using (X-X_L) / (X_U - X_L) to find a pretty good approximation of the root you're looking for. Where X is the number whose root you're looking for, X_L is the closest lower perfect square and X_U is the closest higher perfect square.\n\nsqrt(9000) = 94.8683298051\nApproximate = 94 + (9000-8836) / (9025-8836) = 94.8677248677", "score": 0, "comments": [{"body": "Maybe I'm being thick and misunderstanding the question but, wouldn't it be as easy as just:\n\nsqrt(x)=y\n\nround y down to nearest whole number y1 and up to nearest whole number y2 and then square those.\n\ni.e. sqrt(85) = 9.2195....\nround down to 9 ... 9^2 = 81\nround up to 10 ... 10^2 = 100\n\nis this not sufficient?", "id": "e5cflpd", "replies": [{"body": "Haha it\u2019s all good. That\u2019s actually not what i\u2019m looking for. I\u2019m tying to avoid the cost of using the square root function implemented.", "id": "e5cfzbd", "replies": []}]}], "title": "Without having a list of perfect squares beforehand, is it possible to calculate which two perfect squares a non-perfect number's square root will lie in between?"}