{"url": "https://www.reddit.com/r/learnprogramming/comments/9atync/c_finding_the_max_in_an_array/", "text": "There are two ways:\n\n    int max_element = arr[0];\n    for (int i : arr) {\n        // way 1: max_element = std::max(max_element, i);\n        // way 2: if (i > max) max = i;\n    }\n    \nI thought I read somewhere that way 1 was inefficient since I am always re-assigning max_element (sometimes to itself), even if it is greater than i. Is this true in C++? Or is there some sort of optimization for self-assignment? I know the differences in run time are negligible but I just want to know which is better coding style.", "score": 4, "comments": [{"body": "https://godbolt.org/z/CCs4Qn\n\nThey're identical,  with gcc at least.\n\n> was inefficient\n\nThe only way to ever be sure is to measure.", "id": "e4y9otc", "replies": []}, {"body": "There's also [std::max_element()](https://en.cppreference.com/w/cpp/algorithm/max_element) instead of writing your own loop...", "id": "e4yglot", "replies": [{"body": "Surprisingly [slower](http://quick-bench.com/34fnBNQsjYkxOq5P_TOs5epxonc) than naive implementations. In general for performance you need to measure. In this case \"way 1\" is probably preferred because it's harder to make a mistake there. The other option is to use `std::accumulate` for this type of problem, which can easily be turned into a `std::reduce` in C++17 and may leverage `std::execution::parallel_policy` for free parallelism.", "id": "e4yjp9b", "replies": [{"body": "Interesting. It looks like clang can vectorize the first three cases (and gcc only does it for the first one.) I bet the difference has to do with returning an iterator vs a direct value.", "id": "e4yliuz", "replies": []}]}, {"body": "This might be due to blocked inlining. Benchmark code might constrain it unnecessarily. Also, an array of 100 integers is way to small for any benchmark.", "id": "e4z4l2m", "replies": []}]}, {"body": "Generally the better coding style is the one that is most obviously correct and readable to whichever poor sucker has to look at this code three months down the road (which might be you). Worry about performance only when you have to. Try to avoid writing obviously stupid code, but you are highly unlikely to be in a situation where the difference between your first and second examples makes a difference (assuming there is one).", "id": "e4yirxy", "replies": []}, {"body": "> Is this true in C++? Or is there some sort of optimization for self-assignment?\n\nAs with performance, everything depends. Self-assignment might be even faster than jumping to negative if branch.", "id": "e4z4o2t", "replies": []}], "title": "C++: Finding the max in an array"}