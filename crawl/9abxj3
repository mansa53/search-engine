{"url": "https://www.reddit.com/r/learnprogramming/comments/9abxj3/how_much_of_an_investment_would_it_be_to_create/", "text": "I'm a mod at r/3AtATime and I'm conducting initial research so the mods can make an informed decision.\n\nWe want a bot similar to r/AskOuija's bot. The bot will be triggered after a user comments \"the end\" which gets 7 or more karma. The bot would take the thread and transcribe it into one continual paragraph, grammatical errors and all.\n\nHow difficult would it be to create this bot? I'm only gathering information at this point so we can make a reasonable offer later. Any feedback is helpful.", "score": 3, "comments": [{"body": "Shouldn't be too hard. Here's my algorithm:\n\n1. Get new comments from a [stream](https://praw.readthedocs.io/en/latest/code_overview/other/subredditstream.html#praw.models.reddit.subreddit.SubredditStream.comments).\n\n2. Check each comment's content for \"the end.\"\n\n3. If said post has 7 or more karma, create a post.\n\n4. You'll have to check \"the end\" posts periodically to see if they've accumulated enough karma. I'm not sure if there is a fast way to do this.\n\n---\n\nThe post function would do the following:\n\n1. [Pull all of the comments from the root thread as a list](https://stackoverflow.com/a/36377995).\n\n2. From this list, create a dictionary of IDs and content.\n\n3. Start with the \"end\" comment, found above, and traverse the dictionary by parent ID, building a list of strings that contain each comment.\n\n4. Reverse the list (you started with the end!) and join it into a single string.\n\n5. [Post the comment](https://praw.readthedocs.io/en/latest/code_overview/models/comment.html#praw.models.Comment.reply) in reply to the end comment.", "id": "e4uapkv", "replies": [{"body": "Thanks for your feedback. This is helpful. Overall, how many hours do you think this would take to write?", "id": "e4ubq0g", "replies": [{"body": "3-12, depending on three things:\n\n1. How well does the programmer know `praw` or the Reddit API? The documentation is, um, dense. Someone who has already played around with a bunch of this stuff shouldn't have a hard time, but the first time with a new library is always rough.\n\n2. How hard is it to check karma for a given comment? I couldn't get an answer here; a more experienced dev might have a better answer. EDIT: It shouldn't be too hard for a single comment, but I'm not sure about multiple comments. You might want to implement a timeout for comments that fail to attain a certain level of karma. If after, say, 6 hours or so, the comment fails to get enough karma, it gets a reply of \"Sorry, you didn't get sufficient karma to get an end. This comment is no longer being monitored.\"\n\n3. Am I missing something from the above idea? No plan survives contact with the enemy, and I haven't done much research.\n\nThe more research that's already been done, the easier it's going to be for the programmer. Actual writing-wise, this bot is probably less than 200 lines of code; someone who knows exactly what they're doing could crank it out and test it within an hour. Unfortunately, the vast majority of programming time is not spent typing; it's spent researching, and if research is slow going, it's going to take longer.", "id": "e4ucbh8", "replies": [{"body": "Thank you this is very helpful", "id": "e4udd60", "replies": []}]}, {"body": "I'm at actual work-work right now and get off shift in another 11 hours or so. I can shitpost suggestions, but doing anything that requires thought and coding will require my home computer. I'll do some more digging later.", "id": "e4ucqxp", "replies": []}]}]}, {"body": "Posting some research before I go to bed. Total time spent on this: 1.5 hours. Not nearly as bad as I thought.\n### What do I need to get started?\n\n* Install Python and `praw`.\n\n* Create an [OAuth2 ID and secret](https://github.com/reddit-archive/reddit/wiki/OAuth2).\n\n* Make a good User Agent string. Mine is `python/POG_Test_Bot:0.1 (by /u/POGtastic)`.\n\n* Create a `Reddit` instance with  \n\n  `r = praw.Reddit(user_agent=\"agent\", client_id=\"client_id\", client_secret=\"client_secret\")`\n\n### Getting Comments\n\n`praw` has an object called a `SubredditStream`. This allows you to create a loop that obtains all new comments as they are posted.\n\n    >>> for comment in r.subreddit('all').stream.comments():\n    ...    print(\"{}\\n{}\\n{}\".format(comment.author, comment.score, comment.body))\n\n    # oh god so many comments\n\nNote that on really busy places like /r/all, `praw` cannot keep up. But on small subreddits, this is not a problem at all.\n\n### Check if post is \"the end\"\n\nEasy peasy. I made a post in /r/test that says `the end`, and I can query it by ID. In the IDLE:\n\n    >>> my_c = r.comment(\"e4v47yr\")\n    >>> my_c.body\n    'the end'\n    >>> my_c.body == \"the end\"\n    True\n\n### Add comment to list of comments, check scores\n\n    >>> comment_list = []\n    >>> for comment in r.subreddit('test').stream.comments():\n    ...    if comment.body == 'the end':\n    ...         comment_list.append(comment)\n\nYou'll want `pause_after` as an option inside the `stream` so that you can periodically check the `comment_list`.\n\n    >>> for comment in comment_list:\n    ...    if comment.score > 7:\n    ...        post(comment)\n\n**DANGER:** Make sure you aren't going over the rate limit here.\n\n### Concatenating all parent posts into a single string\n\nCopying from [here](https://stackoverflow.com/questions/36366388/get-all-comments-from-a-specific-reddit-thread-in-python/36377995#36377995):\n\n    def getSubComments(comment, allComments, verbose=True):\n      allComments.append(comment)\n      if not hasattr(comment, \"replies\"):\n        replies = comment.comments()\n        if verbose: print(\"fetching (\" + str(len(allComments)) + \" comments fetched total)\")\n      else:\n        replies = comment.replies\n      for child in replies:\n        getSubComments(child, allComments, verbose=verbose)\n    \n    \n    def getAll(r, submissionId, verbose=True):\n      submission = r.submission(submissionId)\n      comments = submission.comments\n      commentsList = []\n      for comment in comments:\n        getSubComments(comment, commentsList, verbose=verbose)\n      return commentsList\n\n---\n\nExample, from this own thread:\n\n    >>> c_list = getAll(r, '9abxj3')\n    >>> my_dict = {c.id : c.body for c in c_list}\n    >>> my_dict.keys()\n    dict_keys(['e4uapkv', 'e4ubq0g', 'e4ucbh8', ...])\n\nOr, better yet:\n\n    >>> my_dict = {c.id : c for c in c_list}\n\nto associate IDs with just the `Comment` objects themselves.\n\nOur function:\n\n    def concatenate_all_parents(r, comment):\n        str_list = []\n        current_comment = comment\n        all_thread_comments = getAll(r, comment.submission.id)\n        comment_dict = {c.id : c for c in all_thread_comments}\n        while current_comment:\n            str_list.append(current_comment.body)\n            current_comment = comment_dict.get(current_comment.parent_id[3:], None)\n        return '\\n'.join(str_list[::-1])\n\nExample, concatenating all parents from [this post](https://www.reddit.com/r/learnprogramming/comments/9abxj3/how_much_of_an_investment_would_it_be_to_create/e4udd60/):\n\n    >>> print(concatenate_all_parents(r, r.comment('e4udd60')))\n    # shitload of text, separated by newlines.\n\n### TODO:\n\n* Still need to figure out how to post the string now that I've generated it.\n\n* Can I get all of the scores for my list of \"the end\" comments without nuking my request limit?\n\n* Do comments have timestamps? We can pare down our list of \"the end\" comments by removing them after a certain amount of time.\n\n* Place usernames into a dictionary as well so that a person can't just spam the subreddit with \"the end\" comments. One at a time, boiiiii.\n\n* Ensure that none of my loops are unnecessarily querying Reddit and bogging down my rate limit.", "id": "e4v5sjk", "replies": [{"body": "This is amazing. Thank you so much. The mods and I are going to go over this, and we may get back in touch with you real soon. Hang tight. ", "id": "e4y5d6k", "replies": [{"body": "No problem. I'm in no hurry, this is mostly a learning experience for me. I've never played with the Reddit API before.\n\nThe process for turning this into an app is also pretty simple.\n\n* Combine all of the above into a bunch of coherent functions.\n\n* Create a configuration file that contains options. \n\n  * what's the login information for the bot? \n  * How much karma before the bot answers? \n  * How much time until the bot removes submissions? \n  * How many comments can an individual user post \"the end\" for in a given time period before the bot temporarily cuts them off?\n\n* Put it on Github so that anyone can `git clone` it to their local computer, change the config options, and start running.", "id": "e4y5wyo", "replies": []}]}]}, {"body": "~~This sub has a rule against bot questions:\n\n> 8\\. No bot tutorials: Tutorials about creating reddit bots are not allowed on this subreddit. They historically create lots of unnecessary work for moderators of many different subreddits.~~\n\nEdit: Mods are apparently OK with this post.", "id": "e4uwivr", "replies": [{"body": "Generally, I agree with you about the bot tutorials/no bot questions.\n\nStill, since this is a very special, clearly defined, clearly bounded use case, I let it go through without any concerns or bad feelings.\n\nEven further, the /r/AskQuija bot is open source and linked on the subreddit, so there is no real problem about recreating/adapting it.", "id": "e4wu14i", "replies": []}, {"body": "I'd argue that this is slightly different because it's intended to be a bot for their own subreddit. I completely get the rule, but I was under the impression that it was intended for people making yet another \"Repeat a comment in bold and uppercase if someone on Reddit responds with 'What?' to a post\" bot.", "id": "e4v3k1x", "replies": [{"body": "Considering that a mod commented (in non-mod capacity), clearly they agree with you.", "id": "e4v3quy", "replies": []}]}]}, {"body": "The /r/AskQuija bot is open source - the source can be found [here](https://github.com/mattdiamond/ouijabot/blob/master/ouija.js) there are even configuration guides on /r/AskQuija's page.\n\nYou could use this one as source and work from there.", "id": "e4uwvf4", "replies": [{"body": "Thank you this is a good suggestion. ", "id": "e4y5f4a", "replies": []}]}, {"body": "And we're back.\n\n### How do I post the string now that I've generated it?\n\nYou can log in with a bot.\n\n    r = praw.Reddit(user_agent=\"agent\", \n                    client_id=\"client_id\", \n                    client_secret=\"client_secret\",\n                    username = \"user_name\",\n                    password = \"hunter2\")\n\nThis must be the app that the account is under. So, I'd make `POG_TEST_BOT` and get an OAuth2 authorization for a bot under that username. I can now do\n\n    >>> end_comment = r.comment('e4vxojm')\n    >>> reply_str = \"foobarbaz\"\n    >>> r.reply(reply_str)\n    Comment(id='e4w0dmq')\n\nand it will reply to the comment.\n\n### Do comments have timestamps?\n\nEach comment has a `created_utc` attribute.\n\n    >>> import datetime\n    >>> comment_time = datetime.datetime.fromtimestamp(r.comment('e4w0dmq').created_utc)\n    >>> comment_time.isoformat()\n    '2018-08-26T16:44:47'\n\nAnd we can measure the elapsed time since then with `timedelta`.\n\n    >>> \"{} seconds\".format((datetime.datetime.now() - comment_time).total_seconds())\n    '2426.556906 seconds'", "id": "e4w2m7x", "replies": []}], "title": "How much of an investment would it be to create this bot for our subreddit?"}