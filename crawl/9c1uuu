{"url": "https://www.reddit.com/r/learnprogramming/comments/9c1uuu/c_preprocessor_calculations_or_compile_time/", "text": "**Hello handsome!**\n\nI have an idea but I'm not sure if it is possible. \n\n\nCurrently I'm trying to build a memory-pool and like to have a small overhead so I'm in the pickle that I'd like to define a variable number of memory spaces within this memory-block. \n\n\nAnd I wonder if i can in some cleaver way calculate the array size needed to store all the memory blocks before initiating the memory-pool.\n\n\nA piece of code that might explain the problem better:\n```c\nstatic const struct pool_element poolelm[] = {\n    {\n        .size = sizeof(int32_t);\n        .nbr_blocks = 10;\n    },\n    {\n        .size = 255 * sizeof(char);\n        .nbr_blocks = 5;\n    }\n};\n\nstatic struct memory_element pool[*?];\n/* *? = sum of the poolelm's elements .nbr_blocks. */\n```\n\nI'd like to skip defining all the possible number of nbr_bolcks and calculate them as an addition of defines if possible. Is this possible to do at compile time with some cleaver macro?\n\n\nAny thoughts? \n", "score": 1, "comments": [{"body": "You could create a struct with some arrays in it which are large enough to store all of your data, then just allocate that struct once. Since you were defining a constant amount of memory for all of your elements, this shouldn't be a problem.", "id": "e57ha7s", "replies": []}], "title": "[C] Pre-processor calculations or compile time calculation?"}