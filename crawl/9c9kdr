{"url": "https://www.reddit.com/r/learnprogramming/comments/9c9kdr/tech_interview_crash_coursereviews/", "text": "So I'm planning to start applying to companies in a few weeks, and I am looking for some crash course or review resources to go through in preparation.\n\n&#x200B;\n\nI've read all of Algorithms by Robert Sedgewick, have worked on personal projects (so I'm up to speed with web frameworks and such),  I majored in CS and have completed Colt Steel's Web Deb Bootcamp online, so I think I have a pretty good understanding of most structures and algorithms and web programming fundamentals, but I keep forgetting ones that I don't use a lot, such as ones for graphs (Prim, Kruskal, etc), Red/Black trees, Tries, Union Set/Find.\n\n&#x200B;\n\nI just want to make sure that if asked during the interview, I don't pull up blank, which tends to happen to me sometimes in discussions with teachers or friends. I know the algorithms and structures, but sometimes I forget them by name. \n\n&#x200B;\n\nFor example, back in the day, if someone asked me \"write out the code for a quick sort algorithm\", I know quick sort algorithm via 3 partition, but I would forget what quick sort was, even if I knew how the algorithm worked.\n\n&#x200B;\n\nI'm basically looking for some sort of checklist to go through or some way to solidify the mapping between name of algorithm/structure and it's code. \n\n&#x200B;\n\nAll recommendations and tips are greatly appreciated.\n\n&#x200B;", "score": 0, "comments": [{"body": "[Interview Cake](https://www.interviewcake.com) \\- It is expensive but excellent material.\n\n&#x200B;", "id": "e5930b0", "replies": [{"body": ">Interview Cake\n\nWait this is actually so nice, thank you! I really like the glossary section up top in the nav. ", "id": "e5936py", "replies": []}]}], "title": "Tech Interview Crash Course/Reviews"}