{"url": "https://www.reddit.com/r/learnprogramming/comments/9aiaj0/are_coding_interviews_rigorous_when_it_comes_to/", "text": "I'm not really good with memory, I remember of things in a more conceptualized way than in a strict definition, somewhat like mind maps, and this has been trouble for me when I needed to do college exams (pointers syntax in C were trouble) which required me to write a program with pen and paper because even though I know how to do something, I eventually invert the parameters of a function or I simply do not remember the function name. Would I get too much trouble in coding interviews because of things like that? Is it normal for you to access documentation in a coding interview?\n\nThis is not a problem for me when I'm coding, cause most of the times all I need is a quick look into the function definition or 15 seconds of web search and I'm back at the IDE, but I was wondering if that would be a huge problem in a coding interview for a junior position.", "score": 4, "comments": [{"body": "The knowledge of syntax and library function names would be a fairly poor indicator on good candidates to hire, so hopefully not.\n\nSome more detail on how it can affect you:\n\nFirstly, you should not get distracted or bogged down by not knowing some syntax or some language feature. That can hurt. You should just say, \"Hm, I think there's a function that does something like this: can I assume there's this function with this signature that does this?\" Obviously, if you do this too much, it just hurts your overall efficacy, which is an important thing when doing an interview.\n\nSecondly, if you have a choice of languages to conduct the interview in, it can look very odd if you seem bad at coding in that language. And I think this goes beyond knowing function names, but really about knowing good idioms and good ways to structure code in that language. If you use `malloc` in an interview in C++, that's definitely going to raise a question out of me, because that seems unusual, even though it's not technically wrong.\n\nFinally, and almost converse the the question you're asking, you should not rely just on understanding language features to understanding core computer science ideas. It is often clear when someone just has a 'superficial' view of a hash table through a `dict` or a `std::unordered_map` or a `HashMap`. Knowing that some particular data structure implementation exists in the language is important, being able to design an API for using that data structure is important, and being able to analyze trade offs is important. Knowing the precise name is not important.", "id": "e4vnyzn", "replies": []}, {"body": "As an interviewer, I let interviewees pick their language but in return, I expect at least rudimentary knowledge of this language.\n\nFor instance, suppose the interviewee picks Java. I would expect that the interviewee should know / have memorized:\n\n* The main primitive types (e.g. `int`, `double`, `char`, `boolean`) [can ignore `byte`, `short`, `long`, `float`]\n* Syntax for creating functions (e.g. `private static void myFunction(int arg1, double arg2)` or whatever)\n* Recognizing that `/` does integer division\n* Knowing that you use `equals()` to compare strings\n* Knowing basic Java keywords (e.g. conditionals, loops, try-catch, etc)\n* Know how to declare and instantiate an array\n\nI wouldn't require interviewees to know:\n\n* Specific functions on APIs such as `ArrayList`, `HashMap`, `HashSet`, `LinkedList`, etc", "id": "e4vzk84", "replies": []}, {"body": "From my experience with interviewing for fortune 100 tech companies they want to know how you think not necessarily if you remember why X works with Y. \n\nAn example: What are pointers in C? What does malloc do in C? \n\nEven if you don't remember what exactly both are, giving a good answer such as - pointers: referencing in program (even though we both know its allocating memory in address for a specific variable right).", "id": "e4vp66t", "replies": []}, {"body": "Most coding tests use an IDE, the ones that go on the whiteboard don't expect the syntax to be perfect, just close enough to determine that you've used the language before.", "id": "e4vzzzl", "replies": []}, {"body": "I'm sure some people are sticklers, but you probably don't want to work for them anyway. Most people will let fiddly details slide (particularly if you say, \"Hey, I know there's a function that frobs a woozle, but I can't recall if it's woozleFrob or frobWoozle, so I'm just going to use the latter here\").\n\nHowever, I did have a guy who produced something like the following as C code:\n\n    integer x;\n    for x = 0, x < 100, x++\n      if x div 3 = 0\n        print(\"Fizz\")\n      else if x div 5 = 0\n        print(\"Buzz\")\n      etc...\n    end\n\nIt was some sort of mutant combination of C, Pascal (?), Fortran (??), and some as-yet-to-be-named programming language. It was impressively awful. Don't be that guy.", "id": "e4wggxv", "replies": []}], "title": "Are coding interviews rigorous when it comes to syntax or even remembering function names?"}