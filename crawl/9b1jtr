{"url": "https://www.reddit.com/r/learnprogramming/comments/9b1jtr/temporary_session_storage_using_nodejs/", "text": "I have a bot that I have coded in node.js and users interact with this bot. You can talk with it and use commands but everything is pretty come and go. There is no storage of persistent data (except for a MySQL database to keep track of certain things like how much gold a person has, which they obtain by interacting with the bot)\n\n\u200b\n\nI was working on creating some games with the bot that users can gamble the gold with. And the game I coded was a blackjack game. (Simple 21 against the bot)\n\n\u200b\n\nThe user is dealt two cards to start and can either hit or stay and the values are added up. The hard part of this though, is that only one person can seem to play at a time because of conflicting function calls. So I was wondering if there was a way using node.js to have temporary storage of persistent asynchronous data.\n\nSo I could code something like:\n\n    function playBlackjack(userid, betamount){\n        session_start();\n        var unique_id = session['id'];\n        { ... } //all the code for the various things like hitMe(), stay(), start(), endGame() etc...\n        giveReward(session['id']); //for if they win/lose it'll get removed/added to their mysql user\n        session_end(); //this cleanly ends the players session and if they were to run the blackjack command again it would start a fresh session, giving their userid a new session variable \n    }\n\nSo that way the user can walk away from the bot, come back tomorrow and since the session never ended they can pick up where they left off and continue playing as long as their session hasnt ended cleanly and other users data for their unique sessions are tracked individually.\n\nI generally dont want to use a JSON file to do this because I dont want to clog the server up with JSON files (sure I could have them set to auto delete after X amount of time, but if there is a more elegant solution I would love to explore that)\n\n\u200b\n\nNext, I want to try to code a DND mini game where the bot generates random scenarios (this parts already done) but I need persistent sessions so that when the bot prompts the user to roll a die and awaits their response, they enter `!roll d20` and the value thats retrieved from the roll, can then be used in the bot for the progression of the story telling. I wonder what is the cleanest way to handle this also. I dont think MySQL would work here, nor would a JSON file unless i create a JSON file that has username, date/time, story (other data like gold, stats etc) to keep the story telling persistent..\n\n\u200b\n\nAny ideas? If the JSON route is the best, I assume I would have to create files like:\n\nDND\\_userid.json\n\nBLACKJACK\\_userid.json\n\n\u200b\n\nwhich would have multiple arrays with session\\_ids\n\nI reckon it would look something like this\n\n    { \n    \t\"user_id\" : \"mrsodasexy\",\n    \t\"mode\": \"DND\",\n    \t\"sessions\": [\n    \t\t{\n    \t\t\t\"id\" : \"845skjjd93jf94f\", \n    \t\t\t\"data\": [\n    \t\t\t\t{\n    \t\t\t\t\t\"date_start\" : \"08/27/2018 15:11:11\",\n    \t\t\t\t\t\"date_end\" : \"08/27/2018 16:30:32\",\n    \t\t\t\t\t\"story\" : \" ... \", //as HTML string \n    \t\t\t\t\t\"last_sentence\" : \"you rested in the inn\",\n    \t\t\t\t\t\"stats\" : [ ... ],\n    \t\t\t\t\t\"inventory\" : [ ... ]\n    \t\t\t\t}\n    \t\t\t]\n    \t\t},\n    \t\t{\n    \t\t\t\"id\" : \"167sjd93j9woiwiw\",\n    \t\t\t\"data\": [\n    \t\t\t\t{\n    \t\t\t\t\t\"date_start\" : \"08/28/2018 16:14:16\",\n    \t\t\t\t\t\"date_end\" : \"\",\n    \t\t\t\t\t\"story\" : \" ... \", //as HTML string \n    \t\t\t\t\t\"last_sentence\" : \"and you found 20 pieces of gold\",\n    \t\t\t\t\t\"stats\" : [ ... ],\n    \t\t\t\t\t\"inventory\" : [ ... ]\n    \t\t\t\t}\n    \t\t\t]\t\t\t\n    \t\t}\n    \t]\n    }\n\nAnd I would just look for each session where date\\_end is empty and continue from that session?\n\nIs that the best way to do this?\n\n\u200b\n\nEDIT: The word I'm looking for is like a cache\n\na session cache for a game. I'll store the state, after the time runs out, in a database but i want a persist cache between session\\_start(); and session\\_end(); \n\nbecause all i want is the state of the card game to be saved DURING the card game. So if I've dealt 7 cards, I can store it in a cards\\[\\] array and for that person and while another person is playing they have their own cards\\[\\] array that gets populated with card values as they're playing ONLY within their session. Once the session ends, the card variables are destroyed. So in essence, I want to save the game state in local memory (RAM) or something like that using something similar to session\\_start in PHP \n\n&#x200B;", "score": 1, "comments": [{"body": "So your aim is to persist data between server restarts?\n\nA database sounds exactly like what you want. MySQL is fine, my go-to is Postgres. Both have npm packages to make it easy to interact with them.\n\nDatabases/SQL is a really useful thing to know, though it feels like a lot to learn initially.\n\nI wouldn't worry about deleting stuff yet, get it working first. You've got plenty of space.\n\nIt looks like you already know the shape of your data (schema). Look up an SQL tutorial, try starting with something like this and see where you get to:\n\n    CREATE TABLE User (\n    user_id varchar(255) NOT NULL,\n    mode varchar(255) NOT NULL,\n    PRIMARY KEY (user_id)\n    );\n\n    CREATE TABLE Session (\n    date_start datetime NOT NULL,\n    user_id varchar(255) NOT NULL,\n    story text NOT NULL,\n    FOREIGN KEY (user_id) REFERENCES User (user_id)\n    );\n\n    INSERT INTO User (user_id, mode) VALUES ('me', 'dnd');\n\n    INSERT INTO Session (date_start, user_id, story) VALUES ('2018-08-28 20:30:000', 'me', '<p>welcome</p>');\n", "id": "e4zukrp", "replies": [{"body": "Well, I dont want to use a whole MySQL database (if I can get away with it)\n\nBecause I do know that sessioning is a thing in PHP which is the language im most familiar with. So you can like log into a site, and navigate the site by using session and your session will expire when the apache session timeout is set (say 2 hours) so if theres inactivity for 2 hours your session is destroyed or can be cleanly destroyed using `session_destroy()`\n\nI was hoping node.js had something like that so I didnt have to create a whole database JUST to play a simple card game. because all i want is the state of the card game to be saved DURING the card game. So if I've dealt 7 cards, I can store it in a cards\\[\\] array and for that person and while another person is playing they have their own cards\\[\\] array that gets populated with card values as they're playing ONLY within their session. Once the session ends, the card variables are destroyed. So in essence, I want to save the game state in local memory (RAM) or something like that using something similar to session\\_start in PHP\n\n&#x200B;\n\nI say DURING the card game because once the card game is exited, then SURE i can save that entire state to a database to be picked up at a later time, but during the card game i want the session to persist so that I can do stuff like `loadState(state);`\n\n`state` being a variable from the database after a server restart or something\n\n&#x200B;\n\nEDITED: Added more details ", "id": "e4zvmk4", "replies": [{"body": "Ah right, sorry I got the wrong impression.\n\nYou might know this already, but sessions are usually done with cookies. You look at each request and set a cookie (using the Set-Cookie HTTP header) with a new random value if the user doesn't already have one. You then store this value and associate any session data with it. The browser will automatically send the cookie (again as an HTTP header) with every request to the same domain so you can use it to look up session data.\n\nIf you don't want to roll this out yourself then the simplest way would be to start using `express` (if you aren't already) and use `express-session`.  \nThis will manage all of this for you so you can just modify `request.session`. There are plenty of tutorials online with working examples :)\n\n`express-session` has several options for storing session data, it defaults to an in memory store, but you can switch it out for a database at any point.\n\nDoes that help answer your question?", "id": "e4zyoj0", "replies": [{"body": "I think it\u2019s definitely a step in a direction. I think I forgot to note that the bot is interacted with through Discord. So the games are just chat based. So I\u2019m not sure if HTTP things work like express. But I\u2019ll try it", "id": "e4zzaug", "replies": [{"body": "Oh right okay, it's probably different then.\n\nCan you use the username as a session key, I assume it comes with the request?\n\nI'd wrap it in a class, then you can switch to use a database/file later, something simple like\n\n    class SessionStore {\n        sessions = {};\n\n        get(userName) {\n            this.sessions[userName] = this.sessions[userName] || { date_created: Date.now() };\n            return this.sessions[userName];\n        }\n\n        set(userName, sessionData) {\n            this.sessions[userName] = sessionData;\n        }\n    }\n", "id": "e500kjx", "replies": [{"body": "That could work\n\nBut Im just worried that by not saving it temporarily to RAM or something that it will get lost or overwritten\n\nBecause in my case when two people are playing black jack with the bot, and one person says \"hit me\" which is the command to retrieve a card from the deck it removes the card  from the deck and plays it for ALL players\n\nAs you can see, the issue here is that the cache for the bot is just the script thats running the game. thats why I wanted to cache each users session\n\nI was thinking of using something like this maybe: [https://www.npmjs.com/package/node-session](https://www.npmjs.com/package/node-session) ", "id": "e500xps", "replies": [{"body": "RAM is temporary memory, but it won't get overwritten unless you overwrite it or shut down the server. All your js variables reside in RAM.\n\nIt sounds like your data is a 'game' with 'players', which should have a user id, then you can check when you get a message whether the user who sent it `message.author.id` is part of the current game.\n\nIf you want it to persist between restarts then a proper database is the 'right' way (use sqlite if you want).  \nYou can of course just store the whole game state to a file and read it in on each request. Or you could use mongodb which is slightly quicker to get started and doesn't get corrupted as much as files. \n\n\nNode session is another cookie based session package, I don't think it will work for discord.", "id": "e50v6kw", "replies": []}]}]}]}]}]}, {"body": "The word I'm looking for is like a cache\n\na session cache for a game. I'll store the state after the time runs out in a database but i want a persist cache between session\\_start(); and session\\_end();", "id": "e4zwmoe", "replies": []}]}], "title": "Temporary Session Storage using Node.js?"}