{"url": "https://www.reddit.com/r/learnprogramming/comments/9an4sb/im_not_understanding_arrays_and_enhanced_forloops/", "text": "public class testing {\n\n    public static void main(String[] args) {\n        int numbers[] = {12, 43, 54, 2, 7 ,33 ,65 ,4};\n\n        int smallest = numbers[6]; \n        int largest = numbers[6];\n\n        for(int element : numbers ) {\n\n            if(element < smallest) smallest = element;\n            //System.out.println(\"smallest: \" + smallest);\n            if(element > largest) largest = element;\n            //System.out.println(\"largest: \" + largest);\n\n\n\n        }\n\nSystem.out.println(\"smallest: \" + smallest);\nSystem.out.println(\"largest: \" + largest);\n\n\n\n    }\n    }\n\nI thought if I set int smallest = numbers[0] to int smallest = numbers[6], it would change the output since it would be starting from 65.  However it still gives me the smallest digit as 2? Shouldn't my smallest number be 4 if I started from the 6th element?", "score": 1, "comments": [{"body": "The forloop starts from index 0 and goes all the way through the array, checking every element. It doesn't matter what you set the smallest/largest elements, as  long as you set them as a number between max(numbers) and min(numbers).\n\n    for(int element : numbers ) \n\nThis is equivalent of:\n\n    for(int i = 0; i < numbers.length;i++){\n        element = numbers[i];\n    }", "id": "e4wn5vk", "replies": []}, {"body": "An array is just a single variable with boxes that can be accessed by indexes.\n\nAn enhanced for-loop is just a normal for-loop where you have read only access to the elements and no index. It always iterates over the whole array (collection).\n\nFor smallest/largest searching, the common advice is to set:\n\n    int smallest = Integer.MAX_VALUE; // A very large number\n    int largest = Integer.MIN_VALUE; // A very small number\n\nOr, also quite common: use the first element in the array (index [0])", "id": "e4wn8rw", "replies": []}, {"body": "I'm assuming 'enhanced for loop' is just Java's equivalent of a 'for-each' loop, which (if it is) is a much more descriptive name imo. If that's not true disregard the following:\n\nWhat that construct does in this case, is take `numbers` and simply iterate through every element of it, starting at the first element, assigning the currently selected element to `element`for use in the main body of the loop.\n\nAs an example:\n\n    int nums[] = { 1, 2, 3, 4 };\n    \n    for (int n : nums) {\n        System.out.println(n);\n    }\n\nShould give an output of:\n\n    1\n    2\n    3\n    4\n\nSo, the default values you set `smallest` and `largest` to have no bearing on where your loop starts looking for the min/max values.", "id": "e4wn640", "replies": [{"body": "in your example, how could i make it start counting from the 3rd element? so it would print out:\n\n3\n\n4", "id": "e4wnbyv", "replies": [{"body": "I don't know if you *can* do that with an enhanced for loop.\n\nIf you've seen the following sort of loop:  \n\n    int nums[] = { 1, 2, 3, 4 };\n    \n    for (int i = 0; i < nums.length; i++) {\n        System.out.println(nums[i]);\n    }\n\nYou could adjust the starting value of `i` to be anything, so changing it to 2 would start from the third element (if that sounds weird, remember arrays are zero indexed in Java (and many languages)).", "id": "e4wnmyz", "replies": []}, {"body": "For-each loops are for iterating across entire collections (in basically every language that has a for-each loop). If you need something more flexible than that, you need to use a different loop. In your example, a simple for loop starting at `3` would be fine.", "id": "e4xj61s", "replies": []}]}]}, {"body": "Your loop is still going through the array starting from index 0.", "id": "e4wn6ye", "replies": []}, {"body": "I understand now! Thank you everyone for your responses :D.  You're all awesome.", "id": "e4wnyv0", "replies": []}], "title": "I'm not understanding arrays and enhanced forloops. Could anyone clarify my code inside?"}