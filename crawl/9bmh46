{"url": "https://www.reddit.com/r/learnprogramming/comments/9bmh46/just_recently_has_this_conversation_on_another/", "text": "Yeah, so basically just had [this](https://imgur.com/a/e718ZDD) conversation and wanted to hear what everyone here thinks about it. Is what this guy is saying true? What do you all say about this. I'd like more perspectives on this subject.  ", "score": 1, "comments": [{"body": "It depends. He\u2019s right to some extent. Programming in general is a job with very low barriers to entry, especially in a developed country. Everyone is probably going to have some sort of computer at home, and just about anyone with average intelligence can pick up some coding. With that said, there\u2019s a fairly steep learning curve, and quite a big difference between a \u201chobbiest\u201d coder and a professional. Anyone can write code that works, not everyone can write complicated pieces of software that\u2019s robust, handles corner cases, does not leak memory, etc. There\u2019s a reason why people go through 4 years of uni and often graduate studies just to code, when it\u2019s possible to learn a language on a kitchen table in an afternoon. A third of the people on this sub have written a simple calculator app, but that doesn\u2019t mean they\u2019re going to be the ones hired to write the one that comes built in with the next windows. As with any profession, respect comes with expertise, not participation. ", "id": "e543bmn", "replies": [{"body": "I see what you are saying. Yeah, that was definitely what I was thinking. It\u2019s easy to code a crude concept but hard to make it great and efficient.", "id": "e54nkmw", "replies": []}]}, {"body": "I don't agree at all.\n\nProgramming is responsible for most of the great innovations of the last 20 years.\n\nSure, there are a *lot* of programmers employed making CRUD apps. The easiest cases are getting easier. If you just need to build an app for a small-to-medium-sized business that implements some business logic backed by a database with a few hundred or a few thousand users, that's relatively straightforward. It's obviously an exaggeration to say that a \"monkey\" could do it, but you definitely don't need a C.S. degree. 3 months of a boot camp and a couple of years of experience and you're qualified to do something like that on your own.\n\nHowever, just because there are a lot of programmers working on stuff like that doesn't mean that all programming is easy. Try taking that same CRUD app and scale it to work with millions of users. Or, try to make it 5-nines reliable so the annual downtime is measured in minutes, not days. Or, try to make it work when the users are distributed around the globe. It's significantly more complicated when you add those constraints.\n\nAnother challenge is just the size of the app. When your app only has a small number of features, maybe you only need a few developers to work on it, and coordination is easy. But when your app is really big, and you have 30 or 40 developers working on it, now programming is a lot more difficult. Hand something like that to a bunch of amateurs and you'll have everyone breaking each other's code, left and right. It takes much more sophisticated software engineering to organize a large app so that you have dozens, or even hundreds or thousands of developers all hacking on it simultaneously at high velocity without breaking stuff constantly.\n\nFinally, there are all of the millions of programmers doing things so much beyond CRUD. Machine learning. Computer vision. Augmented reality. Traffic prediction. Real-time drone flight. Video compression. Wireless transmission over noisy channels. Realistic 3-D graphics in games. Speech recognition. Those jobs still pay extremely well ($200k and up in Silicon Valley) because only the best programmers are even capable of doing them. I guarantee there's no boot camp that teaches any of those topics.\n\n&#x200B;", "id": "e548xp4", "replies": [{"body": "Thanks for your input! It\u2019s nice to hear there is definitely still a high skill ceiling. That\u2019s why I originally loved coding. Really I respect anything that had that easy to learn hard to master type of thing. ", "id": "e54nqeq", "replies": []}]}, {"body": "He's not wrong that a monkey could build a CRUD app using Rails; Rails was designed to be simple to get started. It's similar with other platforms. But doing something more than just the basic examples you can find on the web is more challenging.\n\nThe \"good programming is actually a liability\" is complete bullshit in my experience.", "id": "e5430ss", "replies": [{"body": "It\u2019s nice to hear that companies may actually work like that. It really stripped me of optimism for the future of programming haha.", "id": "e54nn85", "replies": []}]}, {"body": "It seems you may have included a screenshot of code in your \npost \"[Just recently has this conversation on another thread. Is this true? I have never taken this into consideration.](https://www.reddit.com/r/learnprogramming/comments/9bmh46/just_recently_has_this_conversation_on_another/)\".\n\nIf so, note that posting screenshots of code is against \n/r/learnprogramming's rules: please **edit** your post to use one of the \n[approved ways of formatting code](https://www.reddit.com/r/learnprogramming/wiki/index#wiki_formatting_code). \n(Do NOT repost your question! Just edit it.)\n\nIf your image is not actually a screenshot of code, feel free to ignore \nthis message. Automoderator cannot distinguish between code screenshots \nand other images.\n\nPlease, *do not contact the moderators* about this message. Your post is still visible to everyone.\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/learnprogramming) if you have any questions or concerns.*", "id": "e542n25", "replies": []}, {"body": "Some programming jobs are fairly easy and require only a baseline level of competence; other jobs are fairly challenging and require more expertise in particular subjects.\n\nGenerally, the more background and experience you have, the easier it is to get into more challenging (and likely more interesting) jobs. It's not a guarantee, of course.\n\nOne thing to note: while non-tech companies may use more \"drag-and-drop\" style of tools, nearly all tech companies (e.g. companies where tech is a core part of their product/reason-for-existence) will develop their stuff in-house (on top open source libraries and stuff, etc).\n\nAfter all, most tech companies are trying to create relatively new products/expand into a previously unfulfilled niche -- so having a higher degree of control over the final product is usually something you want.\n\nI suppose one confounding factor that there are some companies/startups/whatever that claim to be tech companies because it's trendy when in reality they're not. But it's usually easy to identify those sorts of companies if you take a look at what they're actually doing.\n\nIt's also worth nothing that there are many programming jobs that have nothing to do with frontend/webdev/mobile -- a more backend role might fit closer to your personal preferences.\n\nI agree that the \"good programming is actually a liability\" part is complete bullshit.\n\nI also agree that frameworks like rails are designed so that you can make basic CRUD apps with them very quickly. This is generally viewed as a good thing -- making CRUD apps is sort of boring, so it's good that there exist frameworks that try and remove as much of that drudgery as possible/let you focus on the novel or interesting parts of your app more quickly.", "id": "e549hby", "replies": [{"body": "I guess it is generally agreed that there are many aspects of programming that still serve a challenge and society still respects good and passionate programmers. Thanks for your input! ", "id": "e54nv9q", "replies": []}]}, {"body": "Remember that monkeys fling shit at every opportunity and that the real cost of monkey software isn't the development, it's getting actual professionals to fix it afterwards. We're never allowed to scrap it and start again which would usually be cheaper and quicker. Oh no, that would waste the development and make the managers look worse than they already do, instead you end up with frankenware.", "id": "e54ey0z", "replies": [{"body": "Can you elaborate more on that? I don\u2019t seem to understand.", "id": "e54nssp", "replies": [{"body": "Sure. It normally goes like this:\n\nA company, often quite a large one, needs some software developed so they put it out to tender. When they have the quotes back, the cheapest is normally picked because budgets are tight all over.\n\nSadly, this means that the software is developed by either inexperienced or just plain bad programmers because the outsourcing company, and they are almost invariably outsourced, has to make a profit on a low quote. What is delivered usually works on the \"happy path\" but is broken otherwise. It's slow, inefficient, buggy and nine times out of ten, insecure and late.\n\nIf you've ever been to a zoo and watched the monkeys for long enough, you'll see them throw shit at someone with [devastating accuracy](https://www.youtube.com/watch?v=0veiTgUQLKw). I use this as a, not always unkind, metaphor for the above programmers!\n\nThe company I work for gets a lot of work sorting out the systems delivered by these people and in almost every case it would be cheaper and quicker to throw away what has been delivered and start again from scratch. This rarely happens. The cynic in me knows that this is because the manager or managers involved in the original decision would be making their error much more visible by doing so, but the reality is that the systems are in use and updating them is less disruptive. Updating and patching these systems is expensive though so you only get to do just enough to make work at a decent speed with (barely) adequate security. Given that it can end up looking stitched together, I coin the phrase \"frankenware\" to describe it.\n\nThat's not to say that *all* outsourcing companies are bad, they're not. The good ones are more expensive than you'd think though.\n", "id": "e55dq2f", "replies": [{"body": "Thanks for the explanation. What a troublesome process going there. I\u2019d be surprised the company don\u2019t learn the mistake the first time. ", "id": "e55zbhc", "replies": []}]}]}]}], "title": "Just recently has this conversation on another thread. Is this true? I have never taken this into consideration."}