{"url": "https://www.reddit.com/r/learnprogramming/comments/9ccl22/bison_lalr_shiftreduce_conflicts/", "text": "Hi,\n\nI recently picked up bison again, but i'm still fighting with the way precedence works and how to solve basic shift/reduce conflicts. I'm quite comfortable with writing the grammar rules and how recursion works etc. but i still cant wrap my head around the precedence rules.\n\nI would be very much appreciating some comments on the the following examples and my problems and understandings of them.\n\n*test1.y*\n\n    %token              ID\n    %token              TYPE_NAME\n    %token              ASTERIX\n    \n    %nonassoc           F_T\n    %nonassoc           P_T\n    \n    %%\n    f_type:\n                        ID type             %prec F_T\n    ;\n    \n    type:\n                        TYPE_NAME\n    |                   type ASTERIX        %prec P_T\n    |                   f_type\n    ;\n    %%\n\n*test1.output*\n\n    State 5\n    \n         1 f_type: ID type .\n         3 type: type . ASTERIX\n    \n         ASTERIX  shift, and go to state 7\n    \n         ASTERIX   [reduce using rule 1 (f_type)]\n         $default  reduce using rule 1 (f_type)\n\nThis example produces a shift reduce conflict, because the state machine cant figure out if it should reduce `ID type* -> type* -> type` or `ID type* -> ID type -> type`. That latter is the desired result. I tried resolving this conflict by giving the rule  `type: type ASTERIX` a higher precedence than `f_type: ID type` but that doesn't seem to work. I also would rather not assign any precedence to the terminal `ASTERIX,` as i would like to use it in other contexts. \n\n&#x200B;\n\n*test2.y*\n\n    %token      ID\n    %token      DOUBLE_PLUS\n    \n    %left       POSTFIX_OP\n    %right      PREFIX_OP\n    \n    %%\n    exp:\n                ID\n    |           exp DOUBLE_PLUS     %prec POSTFIX_OP\n    |           DOUBLE_PLUS exp     %prec PREFIX_OP\n    ;\n    %%\n\n*test2.output*\n\n    State 4\n    \n        2 exp: exp . DOUBLE_PLUS\n        3    | DOUBLE_PLUS exp .\n    \n        DOUBLE_PLUS  shift, and go to state 6\n    \n        DOUBLE_PLUS  [reduce using rule 3 (exp)]\n        $default     reduce using rule 3 (exp)\n\nThis example produces a shift/reduce conflict, because there is ambiguity in the reduction of `DOUBLE_PLUS exp DOUBLE_PLUS`. So i tried to assign a higher precedence to `DOUBLE_PLUS exp` than `exp DOUBLE_PLUS`, but that doesn't work either. It is possible to resolve this conflict by assigning a left or right precedence to the terminal `DOUBLE_PLUS` and i'm guessing assigning a left precedence means that `exp DOUBLE_PLUS` gets reduced first and right means `DOUBLE_PLUS exp` gets reduced first, but i'm also hoping that there is some way of doing this just by using the `%prec` annotation.\n\n&#x200B;\n\nI'm also unsure if i understand the `.output` file correctly. The `.` in the rules indicates what's on the stack and what the lookahead token is, but why is the rule 2 in the latter example even mentioned then? I mean `exp: exp . DOUBLE_PLUS` shouldn't be of any conflicts?", "score": 1, "comments": [{"body": "To all following commenters: please, do not bring up the old circlejerk \njokes/memes about recursion (\"Understanding recursion...\", \"This is \nrecursion...\", etc.). We've all heard them n+2 too many times.\n\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/learnprogramming) if you have any questions or concerns.*", "id": "e59nnmp", "replies": []}, {"body": "Are you sure that \"ID type\\* -> type\\* -> type or ID type\\* -> ID type -> type\" is a shift/reduce conflict and not reduce/reduce? It looks to me like your'e throwing away too much context. You need to indicate when the grammar can reduce type to the one and when to the other.", "id": "e59vo8k", "replies": [{"body": "well bison tells me i got a shift/reduce conflict with that rule, but i'm only guessing that it has to do with the fact that the state machine cant decide whether to first reduce `f_type` or shift and then reduce `type`. have you got any suggestions on how to indicate what i'm trying to achieve to bison on my simplified generic example? I though you could use `%prec` in order to indicate which rule has higher precedence. ", "id": "e59wok6", "replies": []}]}], "title": "Bison LALR shift/reduce conflicts"}