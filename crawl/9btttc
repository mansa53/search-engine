{"url": "https://www.reddit.com/r/learnprogramming/comments/9btttc/i_had_my_cs_practical_exam_today_c_where_i_had_to/", "text": "I had like 2 hours to write and program and note it down on my sheet, Using do while required more programming and did give me quite some issues but I was able to sort it out just to find out that my output was not completely correct. I knew what I had to do but I didn't want to go through the hassle of using making those changes and adjusting do while again, so I used a while Loop that I  had made earlier for some stuff, copy pasted my root code and used a goto statement as a replacement for do while(Dont bother with the specifics, the code worked). I asked my teacher later on and he told me that Goto is considered and bad programming habit/shouldn't be used. He did give me full marks but I want to know why is Goto considered bad ?", "score": 1, "comments": [{"body": "Goto makes the program flow much harder to understand. If you have a loop in your code, it's easy to tell which lines of codes are executed and when. But if you see a label, you have to first find the goto that jumps to it and then figure out when exactly the goto is executed. Especially when you have multiple gotos and labels in a single function it's nearly impossible to tell what's going on.\n\nAnother problem that is specific to C++ is that goto isn't compatible with C++ style memory management. If you try to mix goto and common C++ features like the `string` class your code may not compile.", "id": "e55nh4w", "replies": []}, {"body": "It's not universally bad, but it tends to result in code that is difficult to read/understand a lot of the time. Also, lots of languages don't have Goto at all, so if you're too reliant on it you'll find it harder to switch that it otherwise would be. ", "id": "e55nk9f", "replies": []}, {"body": "Goto itself isn't a bad thing. The abuse of goto is what makes it bad by leading to spaghetti code that jumps all over the place and is hard to read, debug and maintain.\n\nTechnically, do, while, for, return and if, among others, all hide a goto in them.\n\n    while True:\n        do something\n\n    do\n        something\n    while True\n\n    label:\n    do something\n    goto label\n\nEdit: added do .. while", "id": "e55o4ct", "replies": []}, {"body": "Goto is completely unstructured. *If* you write goto in a disciplined way then it's fine, but goto in  a disciplined way usually means you are writing a for loop, while loop, etc. and if that's what you want then you should just write that, because explicitly writing a while loop tells the person reading your code something that simulating a while loop does not. Take a look at this pseudo-code:\n\n    if x == 0 goto foo:\n    something\n    something\n    something\n    goto bar:\n    foo:\n    somethingelse\n    somethingelse\n    somethingelse\n    bar:\n    \nThis is essentially the following:\n\n    if x == 0\n      somethingelse\n      somethingelse\n      somethingelse\n    else\n      something\n      something\n      something\n\nI think the second is easier to understand, because the body of the \"if\" and \"else\" is explicit, rather than implied by the program flow (as it is in the first case). Sure, if you see the first example often enough then it starts to acquire a meaning, but there's still some additional cognitive load.\n\nEdit: FWIW, I think there are some good use cases for goto and I've seen it used in a methodical way. I know a (good) programmer who wrote C code using `goto epilogue` extensively. He preferred having one return statement and having code jump to it. I disagree, but it's a stylistic issue.\n\nI also think that state machines are a natural fit for implementing with goto. You *can* do it with switch statements, but I think goto is cleaner. YMMV.", "id": "e5635oo", "replies": [{"body": "I used goto in a while loop to circumvent a do while loop, didn\u2019t have enough time to write one.", "id": "e563dd8", "replies": [{"body": "I get the feeling this is entirely due to lack of experience on your part. do/while loops are simple to write and probably require less mental energy (and time) than doing the same thing with a goto.", "id": "e564swq", "replies": [{"body": "I\u2019m in 12 grade, started programming an year ago. Also have other subjects so I never fully devoted myself to it.", "id": "e565mcb", "replies": []}]}]}]}, {"body": "As others have mentioned, it's the poor use and abuse of goto that makes it less desirable, especially when you probably didn't need to use it.\n\nThink of it like, idk, medication.  By itself, good, but abuse and poor practice makes it a problem.", "id": "e56fy1d", "replies": []}], "title": "I had my CS practical exam today (C++), where I had to navigate through a class using a menu driven program (do while), But I used goto as it seemed easier, Why is it considered bad ?"}