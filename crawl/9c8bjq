{"url": "https://www.reddit.com/r/learnprogramming/comments/9c8bjq/what_is_the_time_complexity_of_this_algorithm/", "text": "This is my (correct) solution to the leetcode problem: https://leetcode.com/problems/generate-parentheses/description/\n\n    class Solution {\n    public:\n    \n        // time: O(2^n)\n        void generateParenthesis(vector<string> &combos, string cur, int l, int r) {\n            if (r < l) return; // not balanced\n            if (r == 0 && l == 0) {\n                combos.push_back(cur); \n                return;\n            } \n            if (r == 0) return;\n            if (l != 0) {\n                string cur_left = cur + \"(\";\n                generateParenthesis(combos, cur_left, l - 1, r);\n            }\n            string cur_right = cur + \")\";\n            generateParenthesis(combos, cur_right, l, r - 1);\n        }\n    \n        vector<string> generateParenthesis(int n) {\n            vector<string> combos;\n            string cur;\n            generateParenthesis(combos, cur, n, n);\n            return combos;\n        }\n    };\n\nI'm stuck on calculating the space + time complexity of this. I *think* it is 2^n but it doesn't really sound right to me since there are many instances where I cut a string off and don't continue (that's what the first if statement checks for). It should be less than 2^n but I don't know what it would be. Similar question regarding space complexity (in terms of recursive stack space).\n\nAlso, if there are any ways I could improve my code in terms of style, please mention those as well! Thanks!", "score": 1, "comments": [{"body": "These are the Catalan numbers (which should be enough to let you google the answer).", "id": "e590vs8", "replies": []}], "title": "What is the time complexity of this algorithm?"}