{"url": "https://www.reddit.com/r/learnprogramming/comments/9axhl2/exercize_on_tcp_packet_exchange/", "text": "Hi! I'm a computer science student and I should graduate in October, but I'm missing just one last exame and I can't get over it. The teacher is not answering my emails and I don't know where to find the answers to my questions. Please bare with my grammar since I'm Italian and I'm going to translate the exercize and try my best to explain what my problem is.\n\n&#x200B;\n\nSo here is the text of the excersize:\n\n&#x200B;\n\nAn HTTP client wants to send a file of 42800 bytes to a server. The two hosts have the following IP addresses: 130.122.15.171/24, 130.122.1.4/24 respectively. The technology to access the net and to trasmit is Ethernet at 100Mbit/s from client, and 1Gbit/s from server. The net is not congested and latency  (delay between the begining of the transmission from the server and the begining of the receiving on the client side) is Te=1.2ms. Ethernet overhead is 36 bytes.\n\n1. The exchange of IP packets is done direrctly or indirectly? Why?\n2. Whta's the MSS (Maximum Seegment Size of TCP) without any options for TCP and with the basic header for IP?\n3. How many segments are going to be sent?\n4. What's the dimension of the last segment?\n5. Show the exchange of the segments to open a TCP connection after the FTP client sent a \"get\" comand, choosing correctly the ports both for client and server.\n6. Show the whole segments exchange, computing the time to transfer and the throughput obtained at HTTP level; the connection is closed by the server with an RST when it receives the last ACK. \n\nI think the ansewrs to the first 5 questions are straight forward:\n\n1. It's done indirectly because the two hosts are on different subnets and so they will need to route through at least one router. \n2. A ethernet payload is 1500B. TCP and IP headers without options are both 20B, so the MSS is going to be of 1460B.\n3. ceil(42800/1460)=30\n4. 42800-29\\*1460=460B\n5. FTP works on two TCP connection, one established from the client on port 21 which will be used for commands and codes. The second one is to trasfer data, it's established by the server and on port 20. The one asked in the exercize is therefor the second one. The graph is in the link which follows.\n\nSo my problems begins with the sixth question. Here you can see the exchange of a few packets: [https://ibb.co/cnivHp](https://ibb.co/cnivHp). P(n, ID) stands for the nth packet (0<n<30) and ID stands for the number of the packet. TCP is like a Go-back-N protocol just it saves packets out of order, but this isn't the case since we assume there is not loss. ACK n indicates that the receiver got all the packets correctly up to (n-1) and so it's waiting for the n-th. cwnd is the congestion window size, it begins from 1 and increse by 1 everytime it gets an ACK.\n\nWhen cwnd=2 it'll send two packets with a delay of t, both will have similar times to deliver, and the client will send two ACK back which will arrive with a delay of t more or less. When I get the firs ACK (or better the ACK for packet two) I increase cwnd again and I prepare to send the three packets all of them with delay t between them. When I send the first packet, another ACK arrives, so I should increase my cwnd to 4 and prepare to send 4 packets, but I still have to send two from before. What will happen? Am I confusing something or making some wrong assumption/mistake? Will TCP send just 4 packets or will it send 6?  \n\n\nI hope I could explain my problem. Thank you very much for any help!", "score": 1, "comments": [], "title": "Exercize on TCP packet exchange"}