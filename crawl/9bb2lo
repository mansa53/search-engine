{"url": "https://www.reddit.com/r/learnprogramming/comments/9bb2lo/questions_regarding_proscons_languageslibraries/", "text": "As a new project to work on myself, I am about to begin building a program Browser Task Automation.\n\nI am a HUGE dabbler and have tried a little bit of everything, but have a lot to learn in each department. Nonetheless I do realize everything has it's pros and cons. I would like opinions on the reasons why, or why not use certain languages or frameworks for the task.\n\nAt current I am leaning towards Python, obviously it's one of the easier languages regarding automation largely due to there being loads of existing libraries and tools. I could go with Headless Chrome, Selenium (which I have no experience in and I hear has a tough entry point) BeautifulSoup, CookieJar, Requests.\n\nI could use C# Node and Selenium. Again Selenium while being clearly great for the task, but difficult. Only advantage I in my limited knowledge could see to this approach would be I guess I could easily build a gui considering the c#? I don't really need that though? \n\nLastly, Go and ChromeDP. I'm really listing this because welll, I love Go. To my knowledge this would be potentially slower because ChromeDB is actually running a browser instance, rather then headlesschrome? Also this would require building more of my own framework? So more work, bit just again, I like Go. \n\nIn terms of suggested languages I have the most experience probably in order, Go, Python, C#, Node.\n\nIn regards to Selenium, for those who have experience.  If I did use it, I'm assuming Selenium WebDriver with Headless chrome/language of choice would be the way to go?\n\nFrankly I can't decide one way or the other. I feel that i'l probably just try to inevitabley try to implement one way or the other and go, 'oh no this doesn't work because of x'. I just want to ideally be a little confident in my choice. \n\nAny suggestions or criticisms are appreciated! Thank you!\n\nEDIT: As someone has stated, I have been vague about what I am trying to do. For the sake of simplicity yet vagueness. The Primary focus is to automate web tasks, on a few different sites. ", "score": 0, "comments": [{"body": "You can learn just as much by using an existing library contributing to that project. I love making things on my own as well, but that fun project is not often fun to maintain next year.. and next N years..", "id": "e52mq4k", "replies": []}, {"body": "You should probably explain more about what you're trying to accomplish, because it sounds like you're trying to build an automation framework from scratch, but it also sounds like you're not trying to do that so I don't really know what to say.", "id": "e51r20w", "replies": [{"body": "That's a fair point. To be as simple as possible, as I posted this right before heading into work and don't have too much time atm. \n\nThe primary focus is to build a software to automate web tasks for a few sites. \n\nCertainly not opposed to building a framework, may be lacking in expertise required but I am up to a challenge if it is the best option. ", "id": "e51rp9f", "replies": [{"body": "> The primary focus is to build a software to automate web tasks for a few sites. \n\nI certainly understand the desire to build your own thing (guilty) but if your primary focus is to just do automation, you should use an automation framework. Building your own is 100% the wrong choice, unless you have some special use case, and it doesn't sound like you do.\n\nIf your primary goal is to learn and have fun, by all means, build your own in go. \n", "id": "e51rzgb", "replies": [{"body": "I'm kinda leaning towards the Go option, because I know it will be a great experience in learning. I will have fun regardless however; and am nervous about making things inordinately difficult or non-functional lol. So you're probably right about using an existing framework, but now just to decide which one :)", "id": "e51sbi9", "replies": []}]}]}]}], "title": "Questions Regarding Pros&Cons Languages/Libraries in Browser Test Automation"}