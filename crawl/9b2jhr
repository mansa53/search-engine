{"url": "https://www.reddit.com/r/learnprogramming/comments/9b2jhr/c_operator_precedence_problem/", "text": "So I'm given the following precedence chart:\n\n[http://venus.cs.qc.edu/\\~waxman/211/cs211%20practice\\_files/image002.jpg](http://venus.cs.qc.edu/~waxman/211/cs211%20practice_files/image002.jpg)\n\nAnd I need to answer the following question:\n\n[http://venus.cs.qc.edu/\\~waxman/211/cs211%20practice\\_files/image004.gif](http://venus.cs.qc.edu/~waxman/211/cs211%20practice_files/image004.gif)\n\nThe answer is 1, but I keep getting a division by 0 from b % --c. I decrement c by 1, making it 0, since prefix increment, prefix decrement and ! all have the second highest precedence. The next operators in the precedence chart are \\*,/,%. This yields a division by 0 via b % --c = b % 0 = undefined. What am I doing wrong?", "score": 3, "comments": [{"body": "If the left part of the `||` evaluates to true, the right part is short circuited and not evaluated, thus the division by 0 never happens.", "id": "e4zvevc", "replies": [{"body": "According the precedence chart I was given, || has the lowest precedence. So isn't the || evaluated once everything else is evaluated?", "id": "e4zvsnr", "replies": [{"body": "The left side is evaluated first, then, if it is true (and only if it is true) the right side is evaluated. It works with operator precedence as the result of the or can only be true if the first operand is true, no matter what the right operand evaluates to. (Operator precedence dictates the order in which *operators* are evaluated, not *operands*)\n\n[Reference (search for short-circuit)](https://en.cppreference.com/w/cpp/language/operator_logical)", "id": "e4zw458", "replies": [{"body": "Thank you! I know what short-circuit evaluation is, but for some reason I didn't put 2 and 2 together. This clarified everything for me: \"Operator precedence dictates the order in which *operators* are evaluated, not *operands\".* ", "id": "e4zwvje", "replies": []}]}, {"body": "You're confusing precedence with order of evaluation. Those are two different concepts .", "id": "e4zxd18", "replies": []}]}]}], "title": "C++ operator precedence problem"}