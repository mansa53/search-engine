{"url": "https://www.reddit.com/r/learnprogramming/comments/9bja9b/developing_large_projects/", "text": "How do you keep yourself motivated while developing solo large scale projects that take more than a week to solve and involve technology you've never used before.\nAfter getting fed up with making small python scripts none of which are over 100 lines long I decided to make a virtual assistant(like siri,cortana etc.).But not only do I not know where to start,the amount of stuff I'll have to learn is also overwhelming.\nSo far I've only managed to learn things that would complement my virtual assistant like sending mails,twitter api etc. but I have absolutely no idea how the structure of this program is going to be.\nPlease help.", "score": 1, "comments": [{"body": "Sounds like you need to spend more time learning how to solve problems with programming, rather than adding new things to your bag of tricks!\n\nFunctional decomposition, visual mapping and working on small pieces at a time will help you immensely. \nPlan everything, don\u2019t just jump in or you\u2019ll burn yourself out, waste your time by making an incomplete project, etc", "id": "e53cn5u", "replies": [{"body": "Any advice on how to learn these things you mentioned? Everyone says just keep working on projects but I don't think I'm learning anything new this way", "id": "e53ehug", "replies": [{"body": "You\u2019re far better off learning the steps to solve problems effectively, *then* learning how to program through this knowledge! \nRather than the other way around. \n\n[Decomposition](https://en.m.wikipedia.org/wiki/Decomposition_(computer_science)) as an abstract concept is just mapping the smallest parts of a large problem. \nThink of modularity in practise but it\u2019s more than that - it\u2019s communication, documentation, and it represents your *understanding* of a problem.\n\nI think the best way to sum it up is that if you are able to explain the problem in steps to someone else succinctly, then you *understand* what you need to do. \nBrute forcing a problem by just throwing yourself at projects continuously gives you tools and tricks, yes, but the big picture is learning applied problem solving as a meta skill. ", "id": "e53g6h2", "replies": []}]}, {"body": "> Sounds like you need to spend more time learning how to solve problems with programming, rather than adding new things to your bag of tricks!\n\nTHIS! My current problem. Sometimes I come across a new problem (e.g. right now i'm trying to apply grid css to react components), when I search for help, I often find stuff that can help, but it has its own stuff to learn.  ", "id": "e53m1fb", "replies": []}]}], "title": "Developing large projects"}