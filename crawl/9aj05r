{"url": "https://www.reddit.com/r/learnprogramming/comments/9aj05r/c_is_it_possible_to_create_a_vector_of_certain/", "text": "In the case of arrays, I can create one of size n in O(1), even though the intiail values are garbage. However, for vectors, it seems like I do not have the option to create one of size n with garbage values, I have to either fill it with something (for example):\n\nstd::vector<int> v {10, 0}; -> fills 10 spots with 0, this is O(n) I think\n\nOr I have to just create an empty one:\n\nstd::vector<int> v;\n\nand push/emplace_back when I want to fill it. Is this correct?", "score": 2, "comments": [{"body": "If you don't care about the value why do you care about filling it? \n\nas another poster pointed out, vector::reserve will allocate memory for as many values as you need, but you still need to call push_back to write to those positions. ", "id": "e4vu8w0", "replies": []}, {"body": "I'm pretty sure that the `std::vector` constructor actually defers to `std::array`, and that you can declare a `std::vector v(20)` as a vector of size 20 with garbage values just like an array.\n\nI'm a bit curious why you care though, a non-initialized vector does not really have that many uses does it?", "id": "e4vsyrw", "replies": [{"body": ">I'm a bit curious why you care though, a non-initialized vector does not really have that many uses does it?\n\nI think it does, for example if I'm writing some algorithm which does not fill an array from left to right, I can immediately fill in the ith spot, instead of doing push_back i times. Can't think of any good examples now but I've come across it when doing leetcode sometimes. ", "id": "e4vvbq1", "replies": []}]}, {"body": "`std::vector<int> v {10, 0}; ` makes a vector with 2 elements, 10 and 0\n\n`std::vector<int> v(10,0)` makes a vector of 10 ints, initialised to 0   (size=10, capacity >= 10)\n\n`std::vector<int> v(10)` makes a vector of 10 uninitialised ints  (size=10, capacity >= 10)\n\nhttps://en.cppreference.com/w/cpp/container/vector/vector\n\n\n`std::vector<int> v;   v.resize(10)` is the same as the 3rd line above\n\n`std::vector<int> v;   v.reserve(10)` makes a vector with a size of 0, but you'll be able to push at least 10 things to it before it will reallocate", "id": "e4vyewq", "replies": []}, {"body": "You might be thinking about the reserve() function, which allocates a given capacity so that subsequent repeated calls to push_back do not trigger a reallocation.  Proper use of reserve is crucial for performance when dealing with vectors.", "id": "e4vtkhv", "replies": [{"body": "thanks!! \n\n>Proper use of reserve is crucial for performance when dealing with vectors.\n\nWhat do you mean by this proper use?", "id": "e4vve2n", "replies": [{"body": "Essentially, always use reserve if you know the number of elements to be added in advance.", "id": "e4vviyl", "replies": []}]}]}], "title": "C++ is it possible to create a vector of certain size in O(1)?"}