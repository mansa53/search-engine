{"url": "https://www.reddit.com/r/learnprogramming/comments/9bx1bo/a_possible_way_to_end_brute_force_attacks/", "text": "**Hello**\n\nI am a very noobish progammer, just getting into JS and hopefully goining into a IT major. anyways, I was brain storming last night when I came up with a idea, it may have been done before, to possible end brute force attacks once and for all. \n\n&#x200B;\n\nWhat I came up with is, if it is possible in real time to detect a attempted brute force attack, a website or service can start logging the attempted passwords, then, it would basically turn into a two-key system, there is a word for it but I do not know it. where the website would use one of the already attempted brute force passwords, use it as a backup for the server, and still require the user given password. So, if a brute force was attempted on a account, they would have no way of getting in seeing how the password they are looking for has already been changed to something they have already entered.\n\n&#x200B;\n\nSay if this was a bank, and someone had a botnet to try and brute force a vulnerable account, you can securely  reach out to the client, saying there password has automatically been altered, so you need to enter your old password + the one logged brute force attempted password.\n\n&#x200B;\n\nTell me if my idea is completely idiotic, been done, or makes no sense. Sorry for lack of technicality ", "score": 10, "comments": [{"body": "> Say if this was a bank\n\nYour bank will lock your account after half a dozen or less failed sequential logins. Also, most banks that you might want to trust your money with use a 2FA system, though albeit often a very weak one.", "id": "e56dbyn", "replies": [{"body": "oh ok, well maybe not a bank, but like a gmail or something", "id": "e56de7r", "replies": [{"body": "I believe gmail will lock you out too, though I haven't tried it. And also  Google supports 2FA via a hardware key.", "id": "e56dkw9", "replies": [{"body": "That makes sense, I am not at all familiar with services password encrypting etc", "id": "e56do0m", "replies": []}]}]}]}, {"body": "It doesn't really make sense. Almost all password systems will lock you out after a dozen or so attempts. Even if they didn't, just the time it takes to load a webpage would make brute forcing them infeasible.\n\nGenerally brute forcing is done on encrypted files taken from a website with some other hack.", "id": "e56df46", "replies": [{"body": "okay I see", "id": "e56diyd", "replies": []}]}, {"body": "You're doing a good job by trying to innovate on a system you know to have a problem. You need to have a better understanding of the problem for your innovative ideas to have the best impact.\n\nWatch some YouTube videos on web application authentication protocols.\n\n&#x200B;", "id": "e56sm52", "replies": []}, {"body": "This is not how brute force attacks work. Every time you hear about a hack where \u201conly encrypted data was taken\u201d that is the realm of brute force. You take all of these encrypted hashes of passwords on your local system and brute force them with something like hashcat.\n\nYour idea isn\u2019t completely idiotic but it already exists in most login systems. Locking accounts after k login attempts and requiring 2FA when an attempt to login is made from a non recognized source are the most common approaches in the wild.", "id": "e56ozxz", "replies": []}, {"body": "I think the better use of this would be to store all the attempted passwords and then in the future if other sites had access to that data they could potentially determine whether or not someone was trying to brute force their way into the system. This would potentially let them be able to figure it out faster than a certain number of failed attempts locking the system. Just a thought", "id": "e56hx31", "replies": [{"body": "Yeah that is interesting, I would have to talk to someone with a lot of experience", "id": "e56nezn", "replies": []}]}, {"body": "You would have better luck talking to someone on a hacking subreddit rather than a general programming reddit. Most hackers get into systems due to various vulnerabilities. Sometimes these are caused by misconfigured systems. Whilst it\u2019s true that brute forcing won\u2019t generally work against a login system there are certainly exceptions in the wild. Take a look at the following article I read on Medium today about one such exception.\n\nhttps://medium.freecodecamp.org/responsible-disclosure-how-i-could-have-hacked-all-facebook-accounts-f47c0252ae4d\n\nThese vulnerabilities are all around us. Anybody thinking that the web is secure is seriously deluded.", "id": "e56ru1h", "replies": []}, {"body": "Brute force attacks are probably the easiest to detect and prevent, you should think about more sophisticated attack algorithms. But it's great that you think of a way improving existing techniques ", "id": "e56xvq9", "replies": []}, {"body": "It\u2019s good to think and try to come up with solutions. \n\nThat said, bruteforce attacks are incredibly easy to prevent. You could ban the IP doing the Bruteforcing, lock the account or both.\n\nBruteforcing over the internet is rare and mostly pointless. It is mostly used locally, like if you stole a database file and it\u2019s on your computer now. There\u2019s nothing much to do about that. ", "id": "e57ksbq", "replies": []}, {"body": " old password + the one logged brute force attempted password. \n\nThis isn't possible. Passwords are encrypted.", "id": "e56doav", "replies": [{"body": "Passwords are most definitely **NOT** encrypted. This is a very dangerous false statement to spread.\n\nThey are hashed (and hopefully salted). Which is a one way function. Encryption is two way.", "id": "e56ortv", "replies": [{"body": "Thanks for the info, I thought one way encryption meant one way hashing but I see I was mistaken!", "id": "e56pxsd", "replies": []}]}, {"body": "alright, I  have learned that there is actually a more efficient system out there, thanks for the feedback though", "id": "e56dt7j", "replies": [{"body": "Technically it could be possible to have a list of common/compromised passwords and disallow those passwords.\n\nBut with Salting and advanced encryption, it might take a long time to test each users password, plus it could cause  *Password fatigue* ", "id": "e56e5od", "replies": [{"body": "what is Password fatigue?", "id": "e56ef7w", "replies": [{"body": "[https://en.wikipedia.org/wiki/Password\\_fatigue](https://en.wikipedia.org/wiki/Password_fatigue)\n\nBasically, the user getting annoyed with password requirements.\n\nFor example, if you're just trying to checkout a website/app for the first time, and you try typing 5 different passwords, each with a different error (not long enough, not complicated enough.. etc), you might be tempted/frustrated enough to type something like \"gfdl#$@gdfkljg43ljglj\".\n\nEdit: Another link which matches my description better: [https://simplicable.com/new/password-fatigue](https://simplicable.com/new/password-fatigue)", "id": "e56f0oe", "replies": [{"body": "oh ok, Thanks!", "id": "e56h7tx", "replies": []}]}]}]}]}]}], "title": "A possible way to end brute force attacks?"}