{"url": "https://www.reddit.com/r/learnprogramming/comments/9as8w5/learning_python_quick_question_about_two_operators/", "text": "So I'm in a class that involves using Python to teach Data Structures and Algorithms. However, I've never learned Python before. So, I decided to go on youtube to learn. I must say, I'm pleasantly surprised how easy it is to learn it. One reason is my experience with Java, C++, and C# going back at least 3 to 8 years allowing me to easily adapt to the new language and I know I'm just learning the basics right now but I really understand it. So far I've learned about strings, arithmetic operators, functions, if/else/else-if statements, and arrays(though they're called Lists in Python for some reason). \n\n&#x200B;\n\nRight now, I'm still fooling around with else-if statements and I found something strange. I heard about the keyword \"is\" and how it can be used to compare and that's not the same as the \"==\" operator. But I found something odd.\n\nIn the program I created to learn, I used both operators to learn the differences and I found this:\n\n&#x200B;\n\nIn the first version I used \"==\":\n\n[https://ideone.com/ZKhH3m](https://ideone.com/ZKhH3m)\n\n&#x200B;\n\nAnd the result printed as I expected.\n\n&#x200B;\n\nBut in the second version I used \"is\":\n\n[https://ideone.com/pEz7HS](https://ideone.com/pEz7HS)\n\n&#x200B;\n\nAnd when I ran the program, instead of printing the first statement, it printed out the second result in the else statement.\n\n&#x200B;\n\nWhy is that? Exactly what is the difference between \"==\" and \"is\"?", "score": 1, "comments": [{"body": "If you've studied Java, it's the difference between `thisString == \"apple\"` and `thisString.equals(\"apple\")`.  One checks if the referenced objects contain the same values (`==` in Python, `.equals()` in Java) and the other checks if the names refer to the same underlying object (`is` in Python, `==` in Java).\n\nIn essence, `==` asks \"Do these objects have identical values?\" while `is` asks \"Are these literally the same object, just under different names?\"", "id": "e4xp50t", "replies": []}, {"body": "The string literal `\"Kite\"` is internally represented as a string object.\n\nWhen you run the `input(...)` function, it's going to construct and return a totally different string object.\n\nThose two string objects may happen to contain the same values, depending on what you type in, but at the end of the day, they're two completely different objects.\n\nSo, doing `name is \"Kite\"` will always return False.\n\nWhen you do `name == \"Kite\"`, on the other hand, Python is actually internally rewriting that comparison to `name.__eq__(\"Kite\")`. Every string object defines a custom `__eq__` method that defines what it means for two objects to be the \"same\".\n\nIf it helps, here's how Python compares to Java -- doing `a is b` in Python means the same thing as doing `a == b` in Java. Doing `a == b` in Python means the same thing as doing `a.equals(b)` in Java.\n\n---\n\nAs a general rule of thumb, in Python, you almost never want to compare two objects using the `is` operator -- it's almost never useful to check if two variables are referring to the same exact object. Rather, we almost always use `==` -- it's far more useful to check if two variables are referring to objects with the same value.\n\nThe only exception is when you're checking to see if some variable is `None`: it's idiomatic to do `if foo is None` instead of `if foo == None`. This is because there's only ever one None object, so it's slightly more efficient to skip the overhead of doing a full-fledged equality check.\n\n\n>  arrays(though they're called Lists in Python for some reason).\n\nWhen people say \"arrays\", they generally mean \"a data structure that can store a *fixed* number of elements in some indexable order\". When people say \"lists\", they generally mean \"a data structure that can store an *arbitrary* number of elements in some indexable order\". E.g. you can add or remove elements to a list and increase/decrease its length; you can't do the same for arrays.\n\nLanguages like Java, C, and C++ will, by default, give you only arrays as a primitive. If you want to use lists, you'll need to import a class from the standard library.\n\nPython, on the other hand, just gives you a list directly, since it's more useful most of the time.", "id": "e4xp6vv", "replies": []}, {"body": "Sorry for the late reply.\n\nSo let me try and understand this.\n\nIn Python, \" == \" asks if the objects or \"containers\" contain the same values inside while \"is\" asks whether or not the values inside the different containers are the same?", "id": "e546mb4", "replies": []}], "title": "Learning Python. Quick question about two operators"}