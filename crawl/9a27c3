{"url": "https://www.reddit.com/r/learnprogramming/comments/9a27c3/noob_here_why_they_dont_make_a_universal/", "text": "This is probably going to happen in the future right?", "score": 0, "comments": [{"body": "> Why they dont make a universal programming language? \n\nWho is *they* ?", "id": "e4s6anh", "replies": [{"body": "I too would like to know this. ", "id": "e4s9dij", "replies": [{"body": "Who *they* are?  Or why *they* won't make a universal language?\n\nAs well as all the other good arguments about why a universal language won't happen,   there is no *they* that could make it happen.\n\nMany of the big players have made their own languages (Microsoft:C#, Google:Go, Apple:Swift) and, while none of them claim to be a universal language,  what do you think the response would be if they tried that claim?", "id": "e4samqe", "replies": [{"body": "Anyone who backs JavaScript, will win. It is already Universal. The language of the web. \nOnce Web assembly becomes mainstream, then will we have another face off of the next universal language to complement JavaScript through it. ", "id": "e4sbkit", "replies": []}]}]}]}, {"body": "[replaced 'standard' with 'programming language'](https://xkcd.com/927/)", "id": "e4s6jeq", "replies": []}, {"body": "> Why they dont make a universal programming language?\n\nIf it were that easy, it would already have been done. And if you tried to make some kind of universal language yourself, what you'd really be doing is adding one more language to the mix.\n\nGenerally speaking, most \"general-purpose\" programming languages can do everything any Turning-complete language can do. However, some languages are specialized in one area over another. For example, while you *could* potentially write an modern operating system in Python, chances are it'll be poorer in performance than a typical OS written in C. And while you *could* serve web pages with a C-based backend, it's generally a lot easier to do in PHP or JavaScript.\n\nFact of the matter is that it'd be really, really, *really* hard to make a universal language that works well for making games *and* OSes *and* webpages *and* embedded systems (which may or may not require mission-critical fault tolerance) *and* statistical analysis *and* anything else you can think of. And if it's only okay in some areas, chances are people will use whatever language is the best for those areas, hence we return to the current state of having many languages that excel for many different purposes.\n\nNot to mention that the design of such a language would not likely be universally agreed upon, considering the design philosophies of several languages today clash.", "id": "e4s6qsr", "replies": [{"body": "Thats what i think is frustrating. You either should have 1 universal language, or at least the different language should not be doing the same things. But im just a noob, so this is probably a stupid opinion lol.", "id": "e4s6wib", "replies": [{"body": "I think part of the problem is that you're assuming that learning a new programming language is hard, but it's not.\n\nLearning your first programming language is really hard. After that, learning new languages gets easier each time, and it becomes completely natural to pick the best language for each project, which isn't always the same one.\n\nFor example, some languages are good for minimizing \\*programmer time\\*, while other languages are good for minimizing \\*cpu time\\*, and it's very, very hard to achieve both at once.\n\n&#x200B;", "id": "e4s8xsg", "replies": []}, {"body": "Yeah, I can understand that frustration. However, application domains are not so clear cut, either.\n\nFor example, maybe a data scientist wants to use a language that's good at computing complex math, like vector/matrix algebra. So they decide to use the (made-up) \"Math Programming Language\" (MPL) for that.\n\nNow let's say a game developer wants to make the next big 3D shooter. Well, 3D games involve a lot of complex math (like vectors and rotations), so could they use MPL? MPL is only for math, though, and has no extra functionality for stuff like assets, music, animations, etc... that are necessary for the game. So maybe they use \"Game Programming Language\", which has those things... but then that language would need MPL to do the underlying math to make stuff like animations work, and so GPL already does the same things MPL does...\n\nSo as you can see, it's not so easy to have a single universal language OR many mutually distinct languages. That's because it's natural for different fields and application domains to overlap, and thus the languages designed to do them often necessarily have common features.", "id": "e4s7hc9", "replies": []}, {"body": "Should this programming language be strongly typed or weakly typed? Static or dynamic? Hybrid? Garbage collected or require manual memory management (or something else)? Should you have direct access to pointers? Lazy or eager? Does it optimize away tail recursion? Is it object oriented? Mostly or completely? Is multiple inheritance awful or awesome? Are there pointers? Is it based on S-expressions or do s-expressions suck? Does the language support reflection?", "id": "e4skqsn", "replies": []}]}]}, {"body": "Same reason \"they\" don't make a universal tool for carpentry/metalworking.\n", "id": "e4s6fkc", "replies": [{"body": "Both carpentry and metalworking follow the same laws of structures. There is a thing called 3D printing, and one day all carpenty, metalworking, concrete, you name it, will be made in the same \"language\". Nice comment though.", "id": "e4s6q44", "replies": [{"body": "\\> There is a thing called 3D printing, and one day all carpenty, metalworking, concrete, you name it, will be made in the same \"language\".\n\n3-D printing is great, but there's no reason to believe that it will replace all other forms of construction. It's just another way to build things - great for some things, terrible for others.\n\nDo you really think that building a bridge over a canyon will be done more easily by a 3-D printer than by traditional techniques someday?\n\n&#x200B;", "id": "e4s8ry2", "replies": [{"body": "I see. I think traditional forms of construction will never disappear just like riding horses when we already have cars. \n\nBut lets say you zoom out from the timeline of human evolution. And consider how things will be in the next centuries. I can definitely see other planets being colonized and built entirely on the chain of 3D printing technology. So the builders of the future will only design, if AI is going to evolve and we dont blow up everything before, and we become energy efficient. Then the only reason you would have traditional forms of construction would be as hobbies.\n\nOn the other hand, with programming languages they will evolve to more simplified and optimized versions, i guess... to the point where you will have only one language that does it all better than all others?", "id": "e4s96yq", "replies": [{"body": "> just like riding horses when we already have cars\n\nBut just like there were a variety of horses for different purposes, we now have a variety of cars for different purposes. In fact, today we have more types of vehicles than we had of horses, as the capabilities of vehicles are greater and can be applied to more problems.\n\nAs a result, we're actually *further away* from a universal transportation solution than we were in the days of horse and buggy.", "id": "e4s9x9x", "replies": [{"body": "wow you destroyed my argument. upvoted.", "id": "e4sbaj9", "replies": []}]}]}]}, {"body": "> There is a thing called 3D printing, , and one day all carpenty, metalworking, concrete, you name it, will be made in the same \"language\".\n\nYou are completely misunderstanding 3d printing. It's just another option *complementing* the other ways of manufacture. It is not intended to replace other options.\n\n", "id": "e4sv1d5", "replies": []}]}]}, {"body": "They each have their own pros and cons. There are always new languages being created, but there's no way to tell what is going to gain traction.\n\nYou can't have a universal language because some design decisions are directly contrary to others. e.g. C# and Java that does memory management for you vs C++ that doesn't.", "id": "e4s6hzv", "replies": []}, {"body": "No, a universal programming language will probably never happen.  Different programming languages have its own strengths and weaknesses.  Think of it like a different type of car whether its a SUV, sedan, off roader, etc.  They have their own purpose.  You might prefer a SUV over a sedan depending on your circumstances.  The same applies for programming languages.  The beauty of it all is that once you learn how to program a language, you can pick up a different one relatively fast.", "id": "e4s6u97", "replies": [{"body": "Bro, why a car just get a fighter jet. We need a fighter jet, cars are useless.", "id": "e4s6ybl", "replies": [{"body": "You're joking, but the analogy is good, because once you know how to drive a car, learning to drive a different type of vehicle is easy. Programming languages are like that - they're not completely different things altogether, they're basically most of the same concepts but rearranged for a different purpose and goal.\n\n&#x200B;\n\nFor example, if I'm going to race, I want a sports car, not a minivan. If I want to pick up my 4 kids from school, I want a minivan, not a sports car. There's no \"universal\" vehicle that would be good for both of those purposes. A car that's large enough for lots of passengers is not going to be fast, and a car that's fast is not going to have a lot of seats.\n\n&#x200B;\n\nSame with programming languages. If I want to write a program that runs at maximum speed, I want a programming language that gets out of the way and lets me control every aspect of my computer exactly the way I want it. If I want a programming language that makes it really easy to get a simple working program in as few lines as possible, I want a programming language that saves me time by taking care of the unimportant details for me, even though it slows things down a bit.\n\n&#x200B;\n\nSee how the analogy works? There's no way a universal language would work in both scenarios.", "id": "e4s96j1", "replies": [{"body": "got it. great explanation.\nthanks.\nbut still maybe one day we can have one all terrain car that does everything awesome? Or that is impossible?", "id": "e4s9jo1", "replies": []}]}]}]}, {"body": "Why do we have bicycles, cars, motorcycles, planes, boats, and rockets? Different languages are good at different things and no-one can agree on the features an \"ideal\" language should have (because languages are tools that are used for different purposes and the purpose to which you put the language is, to some degree, going to make certain features more or less attractive).", "id": "e4s74dz", "replies": [{"body": "ufos bro, thats what we need. replace all with awesome all terrain ufos.", "id": "e4s790l", "replies": [{"body": "Your question was reasonable. We're trying to help. Why are you just trolling everyone who's actually answering your question?\n\n&#x200B;", "id": "e4s97vi", "replies": [{"body": "... just trying to refute..", "id": "e4s9h22", "replies": []}]}]}]}, {"body": "You are not using a Swiss Army Knife for all your house repairs either, are you?\n\nCertain languages are better for certain tasks. The point is always to use the right tool for the right job.", "id": "e4sv03f", "replies": []}, {"body": "No, they are all my beautiful children, no one will combine them into one large child.", "id": "e4t5g9a", "replies": []}, {"body": "> This is probably going to happen in the future right?\n\n[Of course](https://www.destroyallsoftware.com/talks/the-birth-and-death-of-javascript).\n\nNo, not as long as people have a variety of different problems to solve.\n\n---\n\nFor the record, Bjarne Stroustrup tried to create a language with all of the features he could possibly think of. It's called C++, and it is a nightmare. There are subsets that are wonderful, but it's very difficult to constrain everyone to the parts of C++ that are readable.", "id": "e4s9t6v", "replies": [{"body": "thanks for letting me know to never venture on C++.\n\noh no, so javascript is going to die? No way... im learning javascript...", "id": "e4s9zvy", "replies": [{"body": "C++ is the cat's pajamas if you use it wisely. However, like Perl, it rapidly leads to horrifying problems if you do dumb shit with it. And worst of all, because professors tend to use it in a certain way to teach data structures, you learn all of the dumb shit in college and have to unlearn that entire style of programming if you get a job that uses it in industry.\n\nRegarding Javascript, you'll have to listen to the whole (extremely entertaining) talk to understand what he's describing with \"death.\" It's all tongue-in-cheek.", "id": "e4safrg", "replies": [{"body": "ahh gives me some relief. for a moment i thought i should quit javascript. im definitely going for python after.", "id": "e4sbc2k", "replies": []}, {"body": "Everything leads to horrifying problems if you do dumb shit with it.", "id": "e4seoeh", "replies": []}]}]}]}], "title": "Noob here. Why they dont make a universal programming language? Why C, C++, C-, C$, java, javascript, durkadurka?"}