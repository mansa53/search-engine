{"url": "https://www.reddit.com/r/learnprogramming/comments/9bzw04/function_in_java_that_uses_unsigned_integers_to/", "text": "I wrote a program that was critiqued as inefficient with no further explanation than to consult SO. I've worked and worked on this but can't figure out how to improve the efficiency. The program takes in a string from the user in the main method which is passed to a function. The function parses the string value to an unsigned integer and runs a while loop if greater than 0. Inside the while loop I use bitwise operators to read the unsigned int value one digit at a time (right to left), which is then shifted to the right. The read integer value is parsed back to a string and added to a placeholder and when the loop is over the final string placeholder \"remainder\" is returned.\n\n&#x200B;\n\nOne of the biggest issues I've hit with this program is that the values are parsed back to a string in reverse. So, I included a for loop in my main method that prints the values in reverse to show the appropriate output. We are learning some lower level stuff which is why the instructor wants us to use unsigned integers and bitwise operators rather than longs and arithmetic operators. The program works as expected but does seem way too complicated. It has to be written without using long values or any arithmetic operators other than bitwise operators. Any advice on cleaning this up?\n\n&#x200B;\n\n    public static String converter(String userNum) {\n         //Set variables for conversion prep\n         //Convert user input (string) to unsigned integer\n          String remainder = \"\";\n          int binaryNum = Integer.parseUnsignedInt(userNum);\n          if (binaryNum == 0) {\n             remainder = \"0\";\n          }\n          else {\n             while (binaryNum > 0 || binaryNum < 0) {\n                int binary = binaryNum & 1;\n                binaryNum = binaryNum >>> 1;\n                remainder += Integer.toUnsignedString(binary);\n             }   \n          }\n          return remainder;\n       }\n       \n       /** Main method for program execution.\n       * @param args not used\n       */\n       public static void main(String[] args) {\n          Scanner scan = new Scanner(System.in);\n          //Prompt user for input\n          System.out.println(\"Enter a positive integer from 0 to 4,294,967,295\");\n          //Obtain user input\n          String newNum = scan.nextLine();\n         //Use conversion function\n          String convertedNum = BinaryConverter.converter(newNum);\n          String reverse = \"\";\n          //Use a for loop to reverse print string - ensures proper display\n          for (int i = convertedNum.length() - 1; i >= 0; i--) {\n             reverse = reverse + convertedNum.charAt(i);\n          }\n          System.out.println(reverse);\n       }        \n    } \n    ", "score": 1, "comments": [{"body": "A few things:\n\n* If `binaryNum` is equal to 0, just return \"0\". You will not need to wrap the while-loop in an `else` block. \n* There's no need to check if `binaryNum` is less than 0.\n* Instead of appending `binary` to the end of the `remainder` string, append `binary` to the front of the `remainder` string. Having a for-loop reverse the `remainder` string is unnecessary.\n* Using the `StringBuilder` class is efficient for creating a string that requires repeated appends/insertions. Strings are immutable, so each time you concatenate two strings, you create a new string object, which can be inefficient.", "id": "e57438d", "replies": [{"body": "Thank you! I\u2019ve never actually used StringBuilder and after implementing these things my program looks much cleaner. ", "id": "e574mct", "replies": [{"body": "No problem, glad I could help!", "id": "e57535c", "replies": []}]}]}, {"body": "> `binaryNum > 0 || binaryNum < 0`\n\nAlso known as `binaryNum != 0` ;)", "id": "e575278", "replies": [{"body": "Definitely looked over that. Thanks for pointing this out!", "id": "e575got", "replies": []}]}], "title": "Function in Java that uses unsigned integers to convert a string to binary"}