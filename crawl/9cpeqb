{"url": "https://www.reddit.com/r/learnprogramming/comments/9cpeqb/help_with_this_lambda_expresion/", "text": "I understand the basic gist of lambdas. `x => x.length` for every element, x, in some array will take that element's length. But in an example with threads, I can't understand what's going on when a task in set to run. Can someone please break it down for me?\n\n\u200b\n\n        class Program\n        {\n            private static void Main()\n            {\n                Random r = new Random();\n                var items = Enumerable.Range(0, 100).Select(x => r.Next(100, 100)).ToList();\n                //ParallelQueue(items, DoWork);\n            }\n             \n            private static void ParallelQueue<T>(List<T> items, Action<T> action)\n            {\n                Queue pending = new Queue(items);\n                List<Task> working = new List<Task>();\n                while (pending.Count + working.Count != 0)\n                {\n                    if (pending.Count != 0 && working.Count < 16)  // Maximum tasks\n                    {\n                        var item = pending.Dequeue(); // get item from queue\n                        working.Add(Task.Run(() => action((T)item))); // run task\n                    }\n                    else\n                    {\n                        Task.WaitAny(working.ToArray());\n                        working.RemoveAll(x => x.IsCompleted); // remove finished tasks\n                    }\n                }\n            }\n    \n            private static void DoWork(int i) // do your work here.\n            {\n                // this is just an example\n               //Task.Delay(i).Wait();\n                Console.WriteLine(i);\n            }\n        }\n\n\u200b", "score": 1, "comments": [{"body": "What language?", "id": "e5cbvd8", "replies": [{"body": "oh sorry, C sharp", "id": "e5cbxfp", "replies": []}]}, {"body": "The TLDR (omitting some not-important details) is:\n\n* A lambda expression is just another way to write a function. You know what functions are right? You write them all the time. Functions take input and return output (and can also have side effects).\n* Supposing for simplicity that `x` were an `string[]`, then `x => x.length` is basically equivalent to `static int myFunction(string[] x) { return x.length; }`\n* In the generic case, `x => x.length` is equivalent to `static int myFunction(T[] x) { return x.length; }`\n* An `Action` is just a function that returns `void`.\n* An `Action<int>` is a function that takes an `int` as input and returns void.\n* Generically, an `Action<T>` is a function that takes a `T` as input and returns void.\n* `Task.Run` takes an `Action` (remembering that an `Action` is just a function), and executes it in a separate thread.\n* `Task.Wait` (and related functions, like `Task.WaitAny`) are useful because they allow you to wait for some task to finish.\n\nNote that your initial statement (`x => x.length for every element, x, in some array will take that element's length`) isn't really a great explanation of lambdas, since a lambda expression is:\n\n* Just an easy way to write a function\n* Doesn't necessarily have anything to do with an array\n* Doesn't necessarily have anything to do with a \"length\", since the function may not even deal with arrays or lists or anything.", "id": "e5chmkg", "replies": []}], "title": "Help with this lambda expresion"}