{"url": "https://www.reddit.com/r/learnprogramming/comments/99ujlf/a_method_for_acquiring_new_technical_skills/", "text": "Hi everyone. In this post I wanted to share a simple technique that has become one of my top approaches for learning almost anything technical. If it works for you, great!\n\nSmall disclaimer: I do not consider this method to be a shortcut as it will still require a large time investment. It does, however, provide a framework to make approaching difficult topics a little less intimidating.\n\nThis technique actually came from a professor I had during my Sophomore year of college. He was the type of professor that everyone looked up to regardless of who you were or how much experience you thought you had. There was no such thing as \u201ctoo hard\u201d or \u201ctoo ambitious\u201d in his world, and the later part of his career was spent trying to redefine computing altogether.\n\nRecently I was told that he has officially retired. Since this technique made such a lasting impact on me, I decided to try and pass it along with the best broken English I can muster.\n\n# First Things First\n\n* If you\u2019re just starting with programming, expect to be confused a lot. The only time this is a concern is if you actually hate what you\u2019re studying. The thing is that you will *always* get confused anytime you try and take an ambitious leap into a new realm. It just so happens that for most people, beginning to program itself is an ambitious leap. Don\u2019t let it stop you.\n* You can adjust this to your liking. My personal approach tries to emphasize hands-on effort while going through any sort of technical material since this helps me retain new information better.\n* While this method has helped me a lot, you still need to be willing to sit down and put in the time. Put in as much time as you can schedule in and you will reap the benefits later on.\n\n# The Method\n\n1. The first step is to clearly identify what it is you want to learn. It can be broad, i.e. \u201cI want to learn C++\u201d or it can be specific, i.e. \u201cI want to learn how Haskell implements lazy evaluation\u201d. It could be that you want to build a small website for your resume. It could also be something you did not choose, for example if your boss wants you to learn it or it is part of a class you are taking. This is all fine.\n2. Next comes the part where you identify resources that seem good for you personally. *Have more than one!* I will say that I have rarely, if ever, found a single resource that explained everything I wanted to know for a given topic, or explained everything in a way that made sense to me. Even if you\u2019re following a tutorial, have some back up materials. If you hit a point where they gloss over something that confuses you beyond belief, fall back on your other sources and see if they cover something similar. See if their version makes sense to you, then return to your tutorial once it does.\n   1. As an example, back when I wanted to learn OpenGL, I had not one, not two, but four separate resources: 2 online tutorials that seemed good, 1 desk reference/tutorial hybrid, and 1 math book. Between the 4 of them I got what I wanted, and whenever I thought one explained a topic badly, I just hopped to one of my other ones (or Google) to see if their explanation was better. Be proactive. Sometimes just reading the same paragraph 40 times isn\u2019t your best option.\n   2. As for how I found these, Google is the main thing I use. I would first Google for tutorials on a topic, then I would Google for books. If they showed up on a place like StackOverflow and had a lot of support then I would add it to my list. The resources would very often be different as well: GDC talks from a while back, a research paper(s), or a set of PowerPoint slides from a University. I should also point out that \u201cList of best x for y\u201d usually brings up some good stuff: here is the top result for [\u201cList of best books for C++\u201d](https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list).\n   3. As another example, my professor did not have a textbook for the course back then. Instead he had a list of resources he thought were good supplements, but he did not require that you use all/any of them.\n3. Now it is time to set up your environment. For this you will need to create at least 1 folder to put the files for the actual project you want to complete. Then, you will create another separate folder for your scratch work. And by scratch work, I actually mean that you will treat it as if it were a piece of throwaway paper that you do side work on. It is a place for you to write little pieces of code to test something small before you put it into your real project. The code in the scratch folder doesn\u2019t have to be pretty, but it does have to convince you that you understand a concept before you continue adding to the main project. It can also convince you that an idea you have actually works before you mess with the real code. Here is an example:\n   1. You are editing files inside of your main project file as you read the tutorial you\u2019re following. The tutorial has already introduced you to Java arrays, and then later they say something like \u201cBut how do we get the length of an array? Easy! All arrays have a secret .length field.\u201d\n   2. You stop. Hidden .length field? Every array has this and you don\u2019t have to do anything for it to work? You move over to your scratch project to test it out.\n   3. \u201cArrayLengthScratch.java\u201d gets created, and inside the main method you create 3 arrays: an array of characters (char\\[\\] charArray), an array of ints (int\\[\\] intArray), and an array of doubles (double\\[\\] doubleArray).\n   4. Next you print all of their lengths. \u201cSystem.out.println(charArray.length); System.out.println(doubleArray.length); \u2026\u201d\n   5. Finally you compile it, and holy crap it works, and the lengths are all exactly what you expected! The tutorial must have been right after all.\n   6. Then a thought occurs: Can you edit the length variable?... You add \u201ccharArray.length = 10;\u201d, and when you go to compile it fails miserably because .length is final. Now you know something else.\n   7. Happy with what you\u2019ve discovered, you move back to your main project folder and continue with the tutorial or whatever it is.\n4. This one is more of a rule than a step. With this method, copy+paste should be avoided. By this I mean the action of highlighting code, ctrl+c, ctrl+v, compile. Even if you promise yourself you\u2019ll read it after you paste it and try to understand it\u2026 still bad. Even if you think you already get what it\u2019s doing after reading its explanation: nope. If you are going to do this, at least take the time to hand type every single line.\n5. By this point you have likely made a dent into a particular topic. If it was a tutorial, maybe you just finished \u201c01. Hello Triangle\u201d or \u201c03. Reading User Input\u201d, meaning there is probably some working code inside of your main project that does what the tutorial said it should. This is when a lot of people get tripped up because they just move on to the next topic! This is one of the quickest ways to trick yourself into thinking you understand something you don\u2019t. It is time to take ownership of the code so that it\u2019s different from the tutorial/book example\u2026\n   1. Let\u2019s say \u201c03. Reading User Input\u201d is done and working on your machine. It starts up, asks the user for their name, prints \u201cHello, \\*name\\*!\u201d and quits.\n   2. To challenge your understanding, you take it a small step further. Can I ask them how old they are? It\u2019s ok if this step requires you to Google around or even tap into one of your other resources. Make use of your scratch section to test things you find or ideas you think of.\n   3. After a little bit of tweaking, what was tutorial 3 is now tutorial 3.5. It asks the user their name, then their age, and then their occupation. If their age is greater than 80 then maybe it tells them they\u2019re old or something. The point is, it now does more than the original because you wanted to challenge yourself.\n   4. This is also a good time to combine what you\u2019ve learned previously to add to what you\u2019re currently working on as part of the extension.\n   5. Once you\u2019re satisfied you can move on. Just make sure to do this: I can\u2019t tell you how many times I\u2019ve done this only to realize I\u2019m still way too shaky on the current topic to even think about moving on. Instead, I spend a little extra time working with the code I have by tweaking it, adding to it, etc. Maybe I\u2019ll reread the same tutorial again a couple of times. Whatever it takes in order to take ownership of the content.\n6. And that\u2019s just about it! But I want to share one more piece of advice that might sound stupid: **run your code**. Run it often. Run it every time you make a change. If you\u2019re working on a project that is your own creation, find the simplest path to getting a barebones version running and then add functionality from there. Even if all your methods do is throw a runtime exception saying \u201cADDME\u201d when called because you haven\u2019t implemented them yet, put them in so that it all compiles and runs. It\u2019s much easier to test and debug smaller additions as you make them than it is to test it later only to find multiple things are broken at the same time.\n\n# Summary\n\n* Never have just one resource\n* Always have at least two folders: your real project and a folder for its scratch work\n* Anytime you want to test an idea or convince yourself of something someone said, switch to the scratch section and hammer out some simple test code\n* Copy+paste should be avoided while learning - at least take the time to hand write it\n* Never be satisfied by getting a tutorial working as expected: add to it to claim ownership of the code and convince yourself you actually understand what you just did\n* Run your code as often as possible\n\nI hope this helps someone! I personally really like this style and use it whenever I can. It\u2019s a very aggressive method since you\u2019re rarely ever just passively reading or blindly following a tutorial.", "score": 531, "comments": [{"body": "Another thing that a new programmer may want to do (depending on how they learn), is take literal notes. Pen and paper, reading through the literature and writing things down to retain that information. This definitely isn\u2019t a must, but is something that I\u2019m doing and is certainly helping me so far and allows me to look back when needed. I\u2019ve only been starting to learn programming this week (after learning a bit in high school until I started to sleep in class) and remember how hard it was for me to learn by strictly reading and typing. \n\nSorry for the ramble but just wanted to put my 2 cents in. ", "id": "e4qz8zt", "replies": [{"body": "I study Computer Science at a university and take hand notes. Constantly I'm asked why when I can just use the computer or get lecture notes printed off. The simple act of writing down the material (even if you will never look at it again) will help you stay attentive to details, create a natural flow of the information, and most importantly causes it to stick in your head better. ", "id": "e4r6ivf", "replies": [{"body": "How do you do this in a speedy class where the professor spitballs information at you?", "id": "e4refqz", "replies": [{"body": "Most of what they are saying is explanations and details, not what you should be noting. Listen closely, pick out key concepts or good-to-know tricks, and jot down a short note about it. After the lecture, review your notes and flesh them about a bit more based on memory, clarifying anything that you glossed over on the first pass. Now you have better notes and you've reviewed them once - both great for committing to memory and having something to review again in a few weeks.", "id": "e4rfude", "replies": [{"body": "I really want to add to this something that has worked well for me:  \n  \nComment your code obsessively. Write out long form explanations of what your code is doing an why. Explain where this parameter is typically coming from, what the method is doing with it, and why. Start out each class with a literal paragraph about what you hope this class will achieve and how you are going to use it.  \n  \nI've always viewed these as my notes, not necessary what a professor is lecturing about. My thought is that eventually when I am working on real production code, I will be well versed it commenting my code, and my co-workers will love me.  \n  \nEdit: since people keep saying this, what I mean is by writing long form notes for how my program works, I will get progressively better and better and writing more concise comments, and also become better and better at explaining how my code works. I wouldn\u2019t put paragraphs in production code.", "id": "e4ro95k", "replies": [{"body": "> My thought is that eventually when I am working on real production code, I will be well versed it commenting my code, and my co-workers will love me.\n\nEh.... if you're writing novels in your comments, especially about mundane tasks, your coworkers are not going to be particularly happy about slogging through all of your comments to find the real meat of the info, especially if they see this in code review.\n\nThere is such a thing as self-explanatory code, but comments are most helpful when you do things in your code that is outside of the generally accepted way to handle a problem or something that is sort of a hack/workaround that you need to bypass an issue.\n\nI would advise you to be judicious in what you comment and not just sprinkle them everywhere that you can.", "id": "e4s59p9", "replies": [{"body": "I agree with both of you.  When you're learning programming, comment obsessively.  Comment the fuck out of everything you're doing.  If you don't understand how your for loop is working, comment every single line of it if you need to until you understand it.  If that code is going into production, clean that shit up, and only keep the really professional comments that are going to let your peers and people coming after know what you were trying to get at.\n\n&#x200B;\n\nI'm teaching myself Python, my very first programming language, I'm 51 and to be honest, it isn't coming naturally to me at all.  But I really, really want to get this mastered, so I'm keeping to it.  My code is about 90% comments right now.  # and \"\"\" all over the place.  But nothing I'm doing now will ever go out to github in that state.  By the time I feel comfortable with it, I'll keep the commented versions to myself and clean it up to just what is necessary.  ", "id": "e4s6hjh", "replies": []}, {"body": "I wouldn\u2019t continue to write novels, I\u2019m saying I\u2019ll be quite good at writing concise and accurate comments by then.", "id": "e4s96ca", "replies": []}]}, {"body": "On the contrary, that practise will drive your co-workers crazy.\n\nThere is nothing wrong with commenting obsessively while learning. Whatever works for you, do it. Everyone learns differently.\n\nBut when you start doing production work, writing things such that others can read them is paramount. That doesn't mean it should be verbose; on the contrary, more to read means more time needed to read it and more time spent trying to understand it. The code itself should be able to tell the story, for the most part. Experienced developers understand code, they don't need English translations for everything.\n\nBut there are some things you can't easily say in code. Code can say what and how, but it rarely says why. If there is a number or a conditional for a special case, it can be worthwhile to explain the case that it is meant to handle. Anything that wouldn't be obvious, or could easily be misunderstood, is worth pointing out.\n\nAs a rule of thumb, try to say what it is for through its name, why it is the way it is with comments, and trust that the developer can understand how it works simply by reading the code.", "id": "e4u51a5", "replies": [{"body": "and my point is that that does not come naturally for most people. Writing those long form explanations on college code will help me writing shorter, more concise \u201cwhy\u201d comments later. ", "id": "e4u5lfc", "replies": []}]}]}]}, {"body": "Listen to what was said, process, and write just enough to remind you of what they talked about. When this is done for an entire lecture you'll realize you will remember the nitty gritty as you remember it easier as you skim the \"storyline\" of the lecture", "id": "e4rh4u9", "replies": []}, {"body": "You could always audio record the lecture on your phone. During lecture just listen carefully and write the important points down (you should be actively thinking about it, like how it's useful or what applications are there). After the lecture, try recalling the concepts and explanations based on pure memory. Write down everything you remember. Then go back to the recording and see what you forgot.", "id": "e4rmiqb", "replies": []}, {"body": "I typed notes in markdown, literally verbatim what the professor was saying. In general though, the professor will write down the important stuff on the board.", "id": "e4s8yfz", "replies": []}]}]}, {"body": "I've found writing out pseudo code in a notebook helps a lot more as well", "id": "e4rs6ny", "replies": [{"body": "I do this with my notes. Like I\u2019ll write the code out in my notebook from the section I\u2019m reading, then I\u2019ll bullet point what it is supposed to be doing. ", "id": "e4sdcly", "replies": []}]}, {"body": "These are all good points guys, thanks for posting them! I definitely didn't used to like taking notes, but then I found myself having to reference older stuff that I had done a lot but had never written anything down for it. I eventually caved and started buying some hardcover notebooks.", "id": "e4rsg16", "replies": []}]}, {"body": "No. 5 is gold. I guess we should also not be afraid to revisit the tutorial over n over till it\u2019s in the back of of head.\n\nOne thing I\u2019ve learnt about myself is, I sometimes forget that learning things takes time. As you get older, you tend to expect mastery of new skills immediately like whatever you already know, and get disappointed when things don\u2019t drop in place within seconds. Ironically that\u2019s when you are actually learning something, and you choose to give up.", "id": "e4r24eg", "replies": []}, {"body": "OP, thank you for this.  I just started (like less than a month) and I\u2019m working on fcc, and just getting to the first challenges where you build a page using what you\u2019ve learned.  I got to the tribute page with a blank slate and 99% of what I breezed through was not retained, and I\u2019m searching for everything I just went through to remember how it works.\n\nSo now I\u2019m going to go back through the lessons and try hand-coding them so that I can see them outside the prepared environment.", "id": "e4qudwr", "replies": [{"body": "That's good, I think that's a good idea to re-commit to going through them, but with a different approach in mind this time.\n\nGood luck!", "id": "e4rsnmb", "replies": []}]}, {"body": "For that scratch folder, what I tend to do have another file (usually testing.js) in my same working folder and then I use it to work out the logic of my functions before copying it to my main script. That way I know the logic works and what I need to tldo is implement it on already working code. \n\nAnd my IDE manages it fine since I just need to open that folder and I have my original, and testing file in one place.", "id": "e4ramyr", "replies": []}, {"body": "A tip i use while learnig that I just recently made a parctice for myself and is very similar to the notes thing: Take time to comment your code, even when following a tutorial! My biggest issues was having the info stick with me after I stepped away from the tutoreal. so i would complete it at a blazing pace, and then when I went to implement what I learned, I would be confused about what went where, a depdency, and how it all connected. So with my latetst thing I put comment right next to the newest concepts, explaining what something is, why its there, or how it effects the rest of the code. so then my code becomes way easier for me to look back on, and I dont have to track down the tutorial. And for bonus points, when I ask someone else for help and they read over my code, they can see what I was thinking when I followed the tutorial, and when I made my code.", "id": "e4rdwv0", "replies": [{"body": "I think this is a really good idea. It makes it so your code is self-documenting so that you can use it as a quick reference anytime you work on something similar.", "id": "e4rssde", "replies": []}]}, {"body": "Thanks for sharing. Is this content on the web somewhere? Should post on medium or some other public domain that may get better search results.\n\nIt amazes me how things like this are available to new developers but you will still see them come and post saying where do I start? What can help me? \n\n", "id": "e4qqkil", "replies": [{"body": "No this specific piece is only available here right now! I wrote this up specifically for Reddit. I've never published anything through Medium but I'll look into it. I wouldn't mind rewriting this as a more traditional article depending on their requirements.", "id": "e4qro55", "replies": []}]}, {"body": "Thank s my friend", "id": "e4qsggo", "replies": []}, {"body": ">you will create another separate folder for your scratch work.\n\nOne thing I love about JetBrains IDE (pycharm, intellij, etc) is that they have a builtin scratch folder. You just add a new file and choose \"scratch\". It automatically organizes the scratch files into a scratch folder within your project. :) ", "id": "e4r208n", "replies": [{"body": "That's incredibly useful to know, thanks for posting this. They have a great suite of IDEs in my opinion.", "id": "e4rt5p4", "replies": [{"body": "Yes they do. I would hate to have to program without JetBrains in my toolbox! :)", "id": "e4s0oqm", "replies": []}]}]}, {"body": "Thank you so much for this, OP. I'm a flailing mid uni CS student who's never quite got it, being only introduced to coding in uni. I need a 180 in how I approach my studies, and your words really rang. Cheers.\n\nEdit: one thing a commentor said that rings true for me is handwriting notes. Many of my uni resources for class are often in soft copy - ie. Ppt, pdfs, online docs and vids, and the medium is really distracting for me. My hands get restless when they are idle. So, to not rely on recorded lectures (a blessing/disguise my uni does) as much, I'm trying my best to attend live lectures and hand write notes. Hopefully this way I will be engage with and retain the material.\n\nFurthermore, me and my wallet have been considering purchasing some physical copies of recommended textbooks. Yes, I'd probably be able to find soft copies out there for free. But again about the physical aspect of things. Perhaps having a paperback on hand to annotate will get me in the zone.\n\nA new sem is starting. Hope to truck on solidly this time. Thought I'd share if anyone else is going through similar. And lmk if you guys have any more tips that might help. ", "id": "e4rjjnk", "replies": [{"body": "Glad this helped! Yeah I really liked their comments about hand writing notes. I feel like it's a good habit to get into even for after you're out of school.\n\nAnd +1 for purchasing some of the books... For some reason only certain resources work for me online, but some I just do better with a physical copy. Plus there's something to be said about seeing it sitting there on the desk all the time, reminding you to read it haha.\n\nThey're expensive though, so I definitely had to limit this unfortunately. I totally understand that side of things.", "id": "e4rtnmu", "replies": []}]}, {"body": "This is great! I've been taking class and forcing myself to study and I've learned that I learn best when I'm doing more or less of what you outlined above. It's been working for me and it's great to have your post as a resource to help out.", "id": "e4rlob8", "replies": []}, {"body": "A scratch project is a swiss army knife. Understanding what something does in isolation is really important in so many aspects of programming. From testing, design, fixing bugs, adding features, to *fourth point here*.", "id": "e4rquph", "replies": []}, {"body": "Very helpful for sure.  I've been learning Python and I started out just going through Learn Python The Hard Way. But there are days where I just do not feel like reading anymore of Zed Shaw.  Nothing against him, or the way he writes and teaches, there are just days where I can not crack that PDF open.  So rather than beat myself up about it, I have gathered two YouTube collections going over Python basics, I've found the official [Python.org](https://Python.org) tutorials and one other resource I like reading a lot.  If I'm not feeling Zed today, I can go to one of the other resources and get motivated to learn from them instead.  It works well so far, I certainly feel like the basics are starting to come together.", "id": "e4s6qa7", "replies": []}, {"body": "Honestly I can say that it's working for me. I want to learn c# and I already learned c++ but one thing that worried me was that I wouldn't know where to start so I just made the hello world program then made a loop. Then used variables then did multiplication and addition. What surprised me is that I was actually thinking about more things to do. All the while following the tutorials. Constantly thinking, \"what if I do this or what if I do that? I'm starting small but hey, we all have to start someplace. ", "id": "e4szv6p", "replies": []}, {"body": "What you call a scratch folder, could very well be an experimental branch, can it not?  \ud83e\udd14", "id": "e4qwcsh", "replies": [{"body": "Not really, and it's going to be drastically easier to just have 2 folders you switch between so you don't need to worry about stashing or popping or something of that nature.", "id": "e4rcdto", "replies": []}, {"body": "You could, but I would view an experimental branch as something else on version control. I would have the expectation that maybe, if it pans out, it will be merged into the main repo eventually.\n\nWith the scratch folder, the only thing it will ever be merged into is the recycle bin. It doesn't have to represent any sort of cohesive project: just a place for quick and dirty side work, at least the way I use it.", "id": "e4rszjn", "replies": []}]}, {"body": "Thank you for taking the time to write this! It was very helpful... ", "id": "e4qwwpd", "replies": []}, {"body": "Definitely agree with this one. I've been incorporating most of what you said here on my studies and although its a longer route. The end goal justifies everything as when you're working in the future it'll all make sense. What I'm also doing is creating my own project as a challenge!", "id": "e4r0ji9", "replies": []}, {"body": "Thanks for sharing.", "id": "e4rkgku", "replies": []}, {"body": "He's not wrong.  God, I hate C#.   I live off if-then and decision logic.  C# doesn't have any, so you need to use these weird loops to recreate them.  ", "id": "e4s0vto", "replies": []}, {"body": "This is amazing, thank you!\n\nDoes anyone else have any tips along these lines?\n\nI'm starting to learn and it definitely feels daunting. These tips really go a long way for me.\n\nThank you in advance! ", "id": "e4s59rv", "replies": []}, {"body": "Essentially, don't give up. Keep asking questions. Study. Challenge yourself and then challenge yourself to do the same thing in a different way to see if it works. Just keep working on everything and then maybe one day it will fall into place. Might as well spend your time constantly investing into learning more about it and practicing what you have learned over the years. \n\n&#x200B;\n\nThough hand writing something can be a perfect way to help you to be able to retain some of the information better as you progress in the knowledge that you have gained or are gaining. \n\n&#x200B;\n\n[https://youtu.be/h9v5fycH95c](https://youtu.be/h9v5fycH95c)", "id": "e4s9ws1", "replies": []}, {"body": "The advice is very good, particularly the adding to the tutorial bit. Also, your English is very good.", "id": "e4tg48y", "replies": []}, {"body": "Do people really need a guide on how to learn?", "id": "e4qr2dd", "replies": [{"body": "Yes, there are many people who wing it. Unfortunately, like everything in life learning is a skill too. \n\n[https://www.coursera.org/learn/learning-how-to-learn](https://www.coursera.org/learn/learning-how-to-learn)\n\nIs a very good mooc for basic skills to learn quickly.", "id": "e4qr9rk", "replies": []}, {"body": "Do people need a guide on how to run?  Yeah sure, I can throw on my shoes and get to Point B but maybe if I tuck my arms, land on a different part of my foot and work on my breathing then maybe I can get to Point B faster.\n\nLearning is a skill like anything else.  Critical thinking is a skill that one would expect is more practiced but obviously we can see otherwise.  ", "id": "e4qr7gr", "replies": []}, {"body": "Yeah I'd have to agree with the other comments. Back then I thought it was great  to have someone explain how they liked to approach new things. It quickly replaced whatever style I had been using at the time.", "id": "e4qrwph", "replies": [{"body": "Fair comment, I just assumed everyone has their own method down for learning. ", "id": "e4qs6k1", "replies": []}]}, {"body": "Learning for effectiveness is not an intuitive thing.  Most people need to learn how to learn.  That\u2019s 90% of what school is, learning techniques to learn the subject matter (the rest is learning social interaction and networking).  The subject matter can be picked up from anywhere in most cases.", "id": "e4qu86x", "replies": []}, {"body": "I wish your comment wasn't so heavily downvoted. It's an earnest question without an obvious answer. And there's some truth to the redundancy of a guide on how to learn.\n\n\nIt's difficult to master individual concept after concept after concept. Newbies are *not* independent programmers. Guides like this *can* help newbies become independent.", "id": "e4rrnhk", "replies": []}, {"body": "Have a downvote\n\n&#x200B;", "id": "e4qtkop", "replies": []}]}], "title": "A Method For Acquiring New Technical Skills"}