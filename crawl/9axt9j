{"url": "https://www.reddit.com/r/learnprogramming/comments/9axt9j/java_trying_to_create_a_minesweeper_game_with/", "text": "I'm trying to create a Minesweeper game in Java. I want to maximize my usage of encapsulation via classes.\n\n&#x200B;\n\nI've thought about having a GUI class, a game logic class and a Cell class (that will be used to store properties about the minefield grid). However, I've realised that I can't really do this since the GUI and Game Logic need to communicate bidirectionally (Game Logic might want to update the GUI appearance, the GUI might like to tell the game about user input). I don't really want a middle-man class that'll simply hand function calls between the two, that seems like bad practice.\n\n&#x200B;\n\nIdeally, I do want the GUI and game logic to be separated, but I'm struggling to conceptualise a way to achieve this neatly. Anyone have any ideas as to how to achieve this? Or will I simply have to put them together in one class (at this point this looks like the best option)?", "score": 16, "comments": [{"body": "There is an architectural pattern called Model, View, Controller or MVC for short.  It's a well known standard.\n\nYou say that you want good Object Orientation but you don't want a man in the middle class.  Unfortunately, from my perspective at least, these two statements are a bit conflicting.\n\nTo me \"good Object Orientation\" is an abstract term that basically means don't reinvent the wheel and do what seems familiar.  MVC is familiar.\n\nFor a minesweeper game, I would say your Model would be a class with a 2D array as a property.  When you instantiate this class, you will populate each index of this array with a number. \n\nFirst, pick some random indexes and then populate them with -1; representing it contains a mine.  Then you need to calculate the \"empty\" indexes and determine how many neighboring indexes have a -1.  You should have a whole bunch of indexes with 0.  You can take this a step further and instead of it being a 2D integer array, you can make it a 2D custom object array.  This object will have an int field (value) and a boolean field (visible). \n\nNext, your view is just a GUI representation of your 2D array. When you start, you will already have your puzzle calculated and each object that represents a square on your board will have its visible field set to false.  In the code for your view class, you are describing the look and feel of your board and just connecting it to your controller... Which brings me to my final part. \n\nFinally, your controller class is where your logic sits.  Your M class is just a pojo.  Your V class is just Java swing code or some html. Your C class is where you will take user input to update your M class, calculate which cells need to be marked as visible, check to see if the user beat the game or stepped on a mine, etc.\n\nThere are a bunch of ways you can do this. Using a 2D array may or may not be the most efficient.  You might want to have more than two fields in your custom \"cell\" object.  You might not want to use Swing or Html. You are free to experiment.  \n\nBut in the real world, the problem of efficiency is not as big as the problem of maintainability.\n\nYou might be able to come up with some super amazing minesweeper algorithm that makes every move take O(1). But if it's an algorithm that only you or PHD mathematicians can understand, it won't do a lot of good for us mere mortals that want to take your code and add some features to it.\n\nHence, MVC is a good path to follow :) ", "id": "e4zbcxa", "replies": [{"body": "Wow this was really useful, thanks.\nHave utilised MVC in app development but I felt it was never something that was explicit to me since the framework is already built for me.\n\nI'll look more into this and how to implement this. Very inexperienced with Java GUIs and swing but I'm going forward with it.\n\nThanks again.", "id": "e50r6qx", "replies": [{"body": "No problem.  Happy to help.\n\nTo be honest, development with Swing UI is all but dead.\n\nIf you want to play around with UI and Java, I would recommend HTML.  You could build minesweeper using just Html, css and Javascript, but it sounds like you want to use Java.\n\nThymeleaf is a really easy to learn html library.  I would look into the Spring framework too.  The Spring guides have lots of examples using Thymeleaf and Spring web... Which implements the MVC pattern.\n\nTechnically, you can use any html file as the view for a Spring MVC controller endpoint. But Thymeleaf will give you something that looks somewhat decent.\n\nLearning how you can bind Java code to html tags would be really good, real world experience too. ", "id": "e51gwfx", "replies": []}]}]}, {"body": "Isn't what you explained basically MVC? In which case, I don't think that's bad practice.", "id": "e4zao40", "replies": []}, {"body": "The 2-way communication happens because you're trying to handle both input and output in the same place. This isn't necessary. Your GUI should have separate code for registering input and displaying output. Those 2 don't need to interact with each other at all. That's what the game logic is for.\n\nThe GUI only needs to handle the input. You can then make a separate Drawer-class that handles the output for you. If you're using Canvas, you can simply extend Canvas and use all the built-in functionality for the Drawer class. Then all you have to do is make a single instance of a Drawer in the GUI.", "id": "e4zkosl", "replies": []}, {"body": "This seems like a good use case for callbacks or an event queue or similar. The GUI class doesn't need to know anything about the game logic, just that it has received a queue/function that it should place an event on/call which was registered earlier. \n\nGame logic then needs to know about GUI but not vice versa.", "id": "e4z32bc", "replies": []}, {"body": "> I want to maximize my usage of encapsulation via classes.\n\nWhy? Encapsulation is not an end in itself.", "id": "e4zguak", "replies": [{"body": "I've chosen Minesweeper as a project for an assignment. The subject itself stresses encapsulation and other OOP concepts.", "id": "e50r9he", "replies": []}]}], "title": "Java: Trying to create a Minesweeper Game with good Object Orientation"}