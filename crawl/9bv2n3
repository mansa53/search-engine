{"url": "https://www.reddit.com/r/learnprogramming/comments/9bv2n3/calling_a_method_of_grandparent/", "text": "    class UIElement{\n    \tPoint Position;\n    \tTap();\n    }\n    \n    class Application{\n    \tList(Of UIElement);\n    }\n    \n    class AndroidDevice{\n    \tApplication RunningApplication;\n    \tNativeDevice Device;\n    \tTap(x,y); //Send taps to NativeDevice\n    }\n    \n\nThe Android Device in this pseudocode has its  running Application as an instance variable which in turn consist of Several UI Elements (and more).\n\nNow of course i want to be able to Tap the UIElement simply by calling Tap, Unfortunately the only place that has the reference to the native device is the AndroidDevice class.\n\nWhat is the best way to make a UIElement to get access to the native device ?    \nI could pass it down via the arguments of the tap function or by introducing a two level Parent Variable  but im sure there is a better way im missing !  \n", "score": 1, "comments": [{"body": ">What is the best way to make a UIElement to get access to the native device\n\nThere are many patterns to handle this kind of thing. You could pass the reference from the top-level through the intermediary (i.e. expose either a constructor parameter or a public property on your Application, set it in the AndroidDevice class. And do the same for your UIElement class. Note: this is the least desirable way of doing things.\n\nThat creates a tight coupling. A better mechanism might be using events or callbacks. Don't have the code of your UIElement actually *do* something, but rather trigger an event that bubbles up through the Application. That can also have an event that bubbles.\n\nOr you can use a shared service that's either a singleton (or a single instance injected into each class) that handles the communication between your components (i.e. your UIElement calls a function on the shared service that emits a value to a callback stored from the top AndroidDevice class).\n\nLots of options.", "id": "e55yhzd", "replies": []}, {"body": "I suggest just not building all these arbitrary walls cutting everything off from each other. Unless you actually plan on having multiple Applications and AndroidDevices all with their own UIElements, just put all those references in a global singleton, or make a class full of static references to \"global\" objects.\n\nYou defeat the purpose of this strict OOP structure if you violate it by reaching up so far to do simple things like that.", "id": "e568dnn", "replies": []}, {"body": "Can you explain the purpose of the NativeDevice object and the Tap action? Just by reading the names, it sounds like the NativeDevice would generate taps on UIElements instead of UIElements tapping the NativeDevice. If I can understand what the role of each class is I can probably suggest a better design.\n\nGenerically speaking, this kind of problem might suggest that you need some inversion of control (like dependency injection) or perhaps you should restructure your program along MVP or MVC lines.", "id": "e568yws", "replies": []}], "title": "Calling a Method of Grandparent"}