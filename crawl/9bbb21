{"url": "https://www.reddit.com/r/learnprogramming/comments/9bbb21/login_application_using_mvc/", "text": "I had received a very rough training on MVC Architecture a few weeks back. So based on that I wanted to create a simple login application, with a database connection. I tried to make  it but couldn't do much. I tried to search about it online. But there are blogs where people just dump there code and steps with little or no explanation.\n\nSo can I please get a brief explanation of how should I approach this project that also includes the special jargons involved. I am new to web development and this is my first project on MVC.", "score": 4, "comments": [{"body": "You might be the first person ever to request *more* jargon.\n\nMVC architecture is really not related to user authentication. AFAIK, any application can authenticate user in almost any way \u2013 regardless of software design. *However*, if we *were* to incorporate MVC discussions into user authentication, we could. Let me first establish user authentication:\n\n**User Auth in General**\n\n1. A user exists in the database as a string (email, username) and a **salted** and **hashed** password.\n2. An identifying string (email, username) and a password are sent to the application.\n3. The username is matched to a **salted** and **hashed** password. The user is now considered verified.\n4. The user session is stored locally and checked with each request.\n\nOkay, so now we know sort of how it all works. This would be the same process in MVC jargon:\n\n**User Auth in MVC Terms**\n\n1. A User **model** exists in the database as a table.\n2. In a **view**, the user fills out a form which \u2013 upon submission \u2013 sends a POST request to the server.\n3. In a **controller**, the form is processed and the **user's** username is matched to a salted + hashed password. The user has gone through verification.\n4. The **controller** responds with a session key storage that will now track that user throughout the usage of the application.\n\n**Authentication Jargon**\n\nAuthentication is essentially the process of salting and hashing a string in a model and then reversing that process to authenticate. Salting is the process of adding a random long-ish string to a password. `password` \\+ `$Salt121223` which is then hashed using a common hashing algorithm. The salt is generated once per user creation and it would be stored in the user table. The hash function is now ran o`npassword$Salt12122`3** Only the hashed + salted password is stored in the user tabl**e. And yes, you might be thinking, \"that doesn't sound secure. If they get the salt, then they can just generate a Rainbow table with my salt and log me in!\". And you'd be right. Which is why salts should never be exposed. Nor should the hashing algorithm, but that's less important because if they have the hashing algorithm, but not the salts, they are pretty much screwed.  And even if they have all of the database's salts, they need to still generate a shit ton of hashes to compare and find your password. This is a super costly operation.\n\nIn general, BCrypt is recommended because it's easy to use and it's as secure as one can hope for free. Cryptography is a lot like Chemistry. It can be complicated and it can be dangerous. But 99% of the time, you're not making your own *Acetaminophen*. You're buying it from your local drug store. BCrypt is your Tylenol.\n\n\u200b\n\n**How to do it**\n\nWell, without knowing your specific application type, I can't help too much.", "id": "e51qvvx", "replies": []}, {"body": "What did you build the one that didn\u2019t work out of?", "id": "e51xt09", "replies": []}], "title": "Login Application using MVC"}