{"url": "https://www.reddit.com/r/learnprogramming/comments/9b9jga/what_is_a_must_read_book_for_any_programmer/", "text": "General concepts and ideas, not specific language books please", "score": 812, "comments": [{"body": "*Structure and Interpretation of Computer Programs* ", "id": "e51dylr", "replies": [{"body": "[Structure and Interpretation of Computer Programs - PDF](http://web.mit.edu/alexmv/6.037/sicp.pdf)", "id": "e52mgdt", "replies": []}, {"body": "When do you think is a good time to read it? I worked through a few chapters after about 2 years of programming in HS. I feel like if I read it any sooner a lot of it would of gone over my head.", "id": "e51vifb", "replies": [{"body": "This! There's also a lecture series from MIT on this. It's excellent! As a self taught programming I've found it immensely helpful, really filled in a lot of blanks for me.\n\nEdit: turns out the course is taught by the authors of the book.\n\n&#x200B;\n\n[https://www.youtube.com/watch?v=2Op3QLzMgSY&list=PLE18841CABEA24090](https://www.youtube.com/watch?v=2Op3QLzMgSY&list=PLE18841CABEA24090)", "id": "e520dy5", "replies": [{"body": "What does this book teach", "id": "e523x4p", "replies": [{"body": "Basic principles of programming -- black-box abstraction, computational interfaces, metalinguistic analysis etc etc. It also covers LISP (a super basic language) computer hardware (how does a computer..compute), and other stuff. Fundamental stuff.", "id": "e524g94", "replies": [{"body": "Wouldn't really call Lisp basic, simple would be more like it imo.", "id": "e52d8l4", "replies": [{"body": "Explain?", "id": "e52efcw", "replies": [{"body": "Lisp isn't really into pumpkin spice lattes, instagram, or Bath and Body works.", "id": "e52hrrv", "replies": [{"body": "Take your upvote", "id": "e52wxl0", "replies": []}]}, {"body": "Simple implies that lisp has easy syntax or limited uses. In reality Lisp is a pretty rich complex language. Lisp has been around since the 60s and is actually still used today in both industry and research. Particularlly if you include all Lisp dialects Clojure is used in production code at Amazon, eBay, and a few other large companies.\n\nLisp is simple the way C is simple. ", "id": "e52v21h", "replies": [{"body": "> Lisp is simple the way C is simple.\n\nNicely put.", "id": "e532lpn", "replies": []}, {"body": "I see it the other way around! To me, simple means it has few, but easy to understand commands, the whole concept and language is hard(er), but the language is clear and very straightforward. \n\nLisp is a completely different beast than C. :) ", "id": "e535v2z", "replies": []}, {"body": "Lisp is great because it's the language of the best text editor of all time.", "id": "e53ejjd", "replies": [{"body": "And that is?", "id": "e53p4gf", "replies": []}]}]}, {"body": "In my view, basic means it has limited uses/functions. Simple (to me) means it is easy to understand (but it is hard to grasp in this case). You have few commands that are very clear what they do, and they do just that. ", "id": "e535t9p", "replies": []}]}]}]}]}, {"body": "How is this different from CS50 taught at Harvard and Yale and available online?", "id": "e52x1ux", "replies": []}, {"body": "Any versions of this course with more than a handful of pixels in the video resolution?", "id": "e536m31", "replies": []}]}, {"body": "Now. But just do it one thing at a time. Write notes, type notes, google every new thing you see in each chapter and expand on it.\n\nUse textbooks like guidebooks, like templates/outlines, to pre allocate spots for stuff you need to learn, like Syllabus/course objectives/certification exam objectives, and use the internet to fill in/expand on each thing as you come across it in the books.\n\nAlso, especially, look up ways to visualize or conceptualize each thing. Draw it, watch it, do it. Whether it's sorting, containing and transferring, picking from a list, changing each thing in a list by such and such amount, showing stages of growth or decay, whatever the algorithm is supposed to do, find a way to view it or simulate it in some way.\n\nThat's the difference between rote memorization and actually understanding what y = mx + b or what it means to find a perfect square or cube, or what the hell sine and cosine are talking about, what a logarithmic growth actually looks like, etc.", "id": "e520cg4", "replies": [{"body": "This is a relatively smart thing to do. Perhaps try the examples provided and then try changing them. Maybe try turning one example program that you see into a different one.", "id": "e52aot6", "replies": []}]}, {"body": "SYNTAX ERROR: WOULD HAVE OR WOULD'VE, NOT WOULD OF.", "id": "e520a7i", "replies": [{"body": "**SHOULD OF  \nCOULD OF  \nWOULD OF**  ", "id": "e523eud", "replies": [{"body": "YOUR LITERALLY HURTING ME.", "id": "e523gn2", "replies": [{"body": "YOU'RE\\*", "id": "e524pit", "replies": [{"body": "[deleted]", "id": "e527evf", "replies": [{"body": "The hyperbolic use of literally as an intensifier is literally older than the USA, and \"figuratively\" isn't a synonym for that usage since it isn't an intensifier.", "id": "e52jcpr", "replies": []}]}, {"body": "Wow, the hypocrisy.", "id": "e52inch", "replies": []}, {"body": "r/whoosh (I hope)", "id": "e52qpf4", "replies": []}]}, {"body": "GOOD", "id": "e52g6uh", "replies": []}, {"body": "you should of thought of that before coming on the internet where", "id": "e531gep", "replies": []}]}]}, {"body": "Would 'f", "id": "e533vs1", "replies": []}]}]}, {"body": "Another book in a similar vein is How to Design Programs. \n\n[This](https://cs.brown.edu/~sk/Publications/Papers/Published/fffk-htdp-vs-sicp/paper.pdf) journal article describes the philosophy behind the writing of the book and compares it directly to SICP. HtDP is supposed to be a bit easier to understand for newbies too.", "id": "e52ob9l", "replies": []}, {"body": "Dudeee thanks ", "id": "e52udh6", "replies": []}]}, {"body": "The Hungry Caterpillar is a great introduction to debugging", "id": "e51umis", "replies": [{"body": "I'm not sure if there's actually a programming book called the hungry caterpillar, or if you just mean fuck it all and eat everything", "id": "e52dmz3", "replies": [{"body": "Caterpillar = bug.", "id": "e53o5aa", "replies": []}, {"body": "r/woooosh", "id": "e52ygt1", "replies": []}]}, {"body": "Why so?", "id": "e5274p2", "replies": []}, {"body": "At my job we teach young children how to code, and for some reason on the multiple choice they always pick \u201cexterminating bugs\u201d as the definition of debugging. Now I know why. ", "id": "e52ooee", "replies": []}]}, {"body": "I got a lot out of \"The Design of Everyday Things\", even though it's not specifically a programming book.  Made me rethink UI design.", "id": "e51jjrz", "replies": [{"body": "[The Design of Everyday Things - PDF](http://www.nixdell.com/classes/HCI-and-Design-Spring-2017/The-Design-of-Everyday-Things-Revised-and-Expanded-Edition.pdf)", "id": "e52mh6p", "replies": [{"body": "Much obliged. ", "id": "e5302za", "replies": []}]}, {"body": "It's also just super interesting imo", "id": "e51o9um", "replies": []}, {"body": "I have completed the course on Udacity that was created by Norman himself . It was great and if you don't wanna dig deep into the concepts , the course gives a good idea about everything", "id": "e536hie", "replies": []}, {"body": "It's one of my favorite books that I can't recommend enough at work. It's a great book that goes into what makes good and bad systems. I really need to reread it. \n\n", "id": "e526uxh", "replies": []}]}, {"body": "Somehow I manage by Michael Gary Scott ", "id": "e51s3eo", "replies": [{"body": "r/ExpectedOffice", "id": "e53ubeh", "replies": []}]}, {"body": "+ The Pragmatic Programmer\n+ Design Patterns - Elements of Reusable Software\n+ Clean Code\n+ Think Like a Programmer\n\nBTW: This question appears several times per week. Next time, please go through the subreddit before posting.", "id": "e51bsau", "replies": [{"body": "Saving your comment to check some of these books out - thanks", "id": "e51mkhe", "replies": [{"body": "Saving your comment, to remind myself of how great the previous comment was. ", "id": "e52iajl", "replies": []}, {"body": "Check out Joel on Software too. That and the Pragmatic Programmer are the my go-to references for just about everything big-picture work related. ", "id": "e52t1zj", "replies": []}]}, {"body": "If you were an NPC what items would you drop when killed?", "id": "e51y2ju", "replies": [{"body": "[A Steamy Romance Novel: Big Brass Bombs](https://www.wowhead.com/item=63271/a-steamy-romance-novel-big-brass-bombs)", "id": "e532yu0", "replies": []}]}, {"body": "That\u2019s pretty amazing. This one made it to my front page but none of the other multi/week ones did.\n\nWhat are the odds? Thanks OP.", "id": "e52fg8n", "replies": []}, {"body": "> Design Patterns - Elements of Reusable Software\n\nIs it just me or was this book just awfully dry? \n\nI personally recommend something like \"Design Patterns in Ruby\" by Russ Olsen. The way he writes it was nice and actually enjoyable. ", "id": "e52sxhi", "replies": [{"body": "It is awfully dry, I have to agree on that.\n\nI like the much more practical approach of [Java Design Patterns](http://java-design-patterns.com), even though the descriptions and implementations are not 100% correct.", "id": "e52wf6w", "replies": []}]}, {"body": "I was thinking about picking up the GOF design patterns book, but have seen mixed reviews on its continued relevancy and the slightly less accessible style.\n\nI get that in some sense DPs should be timeless, but on the other hand if you're predating, say, generics then it seems like you're going to be missing out on a feature that would fundamentally change how you're really conceptualizing your code.\n\nAre you just repeating the common answers or do you personally recommend Design Patterns?", "id": "e5243iw", "replies": [{"body": "I am personally recommending it even though the book is partly outdated.\n\nThe key is to get an understanding for the patterns and then improve upon them with features that were created after the patterns.\n\nIt's roughly the same as with most Algorithms & Data Structures books. Quite a few are rather old and in parts outdated because of new language features, implementations, etc. Still, they are necessities and in no way obsolete.", "id": "e524ekr", "replies": [{"body": "> It's roughly the same as most Algorithms & Data Structures books. \n\nNo it's not. Are we talking about the same book?  \nGoF/DP explains OOD.", "id": "e52t9le", "replies": [{"body": "You haven't understood my comment.\n\nIt's not about the topic as such, but about being outdated and superseded because of newer programming language features.", "id": "e52vsp2", "replies": []}]}]}, {"body": "> on the other hand if you're predating, say, generics then it seems like you're going to be missing out on a feature that would fundamentally change how you're really conceptualizing your code.\n\nThey're not related.  \nThere is no scenario where you can reasonably swap between the two.  \nEither you need run-time dynamic/emergent behavior for the abstraction (thus a DP might be useful) or you don't.", "id": "e52t3l6", "replies": []}, {"body": "> if you're predating, say, generics\n\nGOF predates Java. The code examples are written in C++ and Smalltalk.", "id": "e557yk6", "replies": []}]}, {"body": "Maybe he was curious of people's personal recommendations ", "id": "e51sybk", "replies": [{"body": "Guess what the other weekly posts contain?", "id": "e51tk5r", "replies": [{"body": "It\u2019s also human nature to correct people unsolicited, in order to make themselves feel smarter and more important.. ", "id": "e51uxx9", "replies": []}, {"body": "It's almost like it's in human nature to crave human contact instead of just browsing through archives of suggestions?", "id": "e51u01o", "replies": [{"body": "Its not all about OP, though. For respondents and the community as a whole, it gets tiresome to see repeats of the same questions and answers so frequently. Which is why most Q&A forums have limitations, rules or regulations on certain questions. In my personal opinion, posting a question that has been answered many times in many ways just to appease some personal desire to socialize is selfish. ", "id": "e5278ul", "replies": [{"body": "Especially when there is a side bar with \"Other Guidelines and links\"  and a FAQ section with also a search feature.  It immediately shows you have not taken the time to put your own effort in and expect others to do it for you, which is a very poor programming characteristic.  Being self-disciplined and having independent researching skills is critical to being an effective and proficient programmer\n\nThe OP should have researched some books he found interesting, explained why he is wanting to learn more about programming which would have opened a more thoughtful and social discussion post instead of a list of books.  Generic questions on easily searchable topics with no background of who you are or what you are doing is definitely selfish and those who enable it are just as bad.  I get like an eye twitch when I see that same top 10 books posted. If i can guess what the first few responses to your post will be, its a shit post. ", "id": "e52vdkl", "replies": []}, {"body": "So don't respond. The rest of us will pick up your slack.", "id": "e52eirx", "replies": [{"body": "Well, what about the other (more original) posts? This is a pretty active community, with a lot of posts every hour. Don't you think it would be easy for a genuine, unique question to be drowned out in a sea of similar questions?\n\nOr, on the other side, there are the subscribers. Everyone on this sub can omly read through so many posts a day - does it really provide value for one \"spot\" a week taken by a repetitive question? Especially when that question is something that is easily Google-able or found through a quick search of the subreddit?\n\nI'm not saying anything is right or wrong. Just saying that perhaps there's some validity in people criticizing repetitive questions like this. There's logic behind it. ", "id": "e52r4ju", "replies": [{"body": "Man it's like you've never heard of up/downvotes. That's how the community decides what is worth visitors reading. Give an answer, and OP gets what they want. Downvote the thread and upvote a better one, and the lurker in a rush still gets the good content. That's how Reddit has always worked.", "id": "e52zulm", "replies": [{"body": "How does that solve the problem of non-unique questions drowning out other ones? Have you never left a subreddit because it eventually just devolved into a giant circlejerk (for lack of a better word)? \n\nThe problem of reposts has been around since Q&A forums have existed, and even before then. The idea of a FAQ section is trying to address the same problem. The majority can speak through upvotes and downvotes, but the problem is that the majority are not the ones answering questions. Especially on a subreddit aimed at helping beginners learn. ", "id": "e5381en", "replies": [{"body": "Why are non unique questions a problem? This is Reddit, not Stack Overflow. People don\u2019t use it by searching for stuff, as a resource of static information. People use it to communicate with each other. If a person\u2019s first instinct is to post a question, rather than search, then they are using Reddit exactly as its developers intended. \n\nReddit\u2019s built in search sucks, but it\u2019s ridiculously easy to navigate to a sub and post a question. QED. \n\n", "id": "e53f1jc", "replies": []}]}]}]}, {"body": "Precisely.", "id": "e532n6n", "replies": []}]}]}, {"body": "If I want human contact, I go outside. \n\nIf I want info, I look it up. \n\nIf I want unnecessarily sarcastic quips defending backward positions, I'll message you.", "id": "e51w30v", "replies": [{"body": "Huh, really? You never talk to people on Reddit? You just go outside and talk to strangers? I believe you. ", "id": "e51xjfy", "replies": [{"body": "What about this post screams \"I NEED EMOTIONAL COMFORT FROM STRANGERS ONLINE BECAUSE I'M TOO SCARED TO TALK TO PEOPLE IRL!!\"? \n\nI mean, besides your own depression and anxiety you seem to project on everyone you come in contact with.", "id": "e52ay1q", "replies": [{"body": "That's nice ", "id": "e52g48a", "replies": []}]}]}, {"body": "[deleted]", "id": "e52466u", "replies": [{"body": "Yeah ideally. Constantly posting the same question is fucking retarded and lazy.", "id": "e52ar8u", "replies": []}]}]}]}, {"body": "> Guess what the other weekly posts contain?\n\nSome, not all, of the people's recommendations?", "id": "e526a3n", "replies": []}]}]}, {"body": "+1 for Clean Code", "id": "e539mz8", "replies": []}, {"body": "I would love if one could link the PDFs if those are available legally online", "id": "e531dyb", "replies": [{"body": "Unfortunately, these are all copyrighted books. They are only available for purchase.", "id": "e532rz6", "replies": []}]}]}, {"body": "Code - Charles Petzold", "id": "e51ngce", "replies": [{"body": "Read this one two weeks ago. Really interesting because it explains how the computers work starting from how electricity works, working up to Boolean logic, transistors, CPU and RAM architecture. By the end we reach assembly and higher languages, information storage and transmission etc. Basically equivalent to a Computer Architecture class, but written in a way that is accessible to all the curious.", "id": "e51tk4y", "replies": [{"body": "I'm not a low level programmer and I don't know how a PC works, and I feel like I'm a competent dev\n\nTo anyone else not interested in the actual hardware, you can still become a programmer too.", "id": "e52lrlu", "replies": [{"body": "You're absolutely right. For me it was curiosity, and after reading the book I still only have a faint ideia. It won't be useful professionally unless you work on constructing microprocessors, and that's not what computer science is about.", "id": "e534ryy", "replies": []}]}]}, {"body": "[Code: The Hidden Language of Computer\nHardware and Software - PDF](https://bobcarp.files.wordpress.com/2014/07/code-charles-petzold.pdf)\n\n", "id": "e52mius", "replies": []}]}, {"body": "The Mythical Man-Month is exceptional, and I'm a touch sad I didn't see it in here already. It's a *little* outdated, but the concepts are rock solid for the most part.", "id": "e51ocgv", "replies": [{"body": "I have a copy that is personalized to me that I got while Fred Brooks was giving a talk at my grad school. Best book ever.", "id": "e5271bn", "replies": []}, {"body": "I think there are much better books, these days.", "id": "e523lud", "replies": [{"body": "Any recommendations?", "id": "e5298dx", "replies": [{"body": "I learned from *Pragmatic Programmer*, *Code Complete* and *Writing Solid Code*, BITD. These days, I would probably recommend Rich Hickey's talks as a good place to start, especially \"The Value of Values\" and \"The State of the System.\"", "id": "e529tbo", "replies": [{"body": "I second the Rich Hickey recommendation. His value of values lecture is excellent.", "id": "e532row", "replies": []}, {"body": "I haven't read Hickey's books, but Pragmatic Programmer and Mythical Man Month are wildly different books.\n\nPragmatic is become a better programmer with code. MMM is become a better team member and leader.", "id": "e539j7c", "replies": []}]}, {"body": "[This thread](https://www.reddit.com/r/learnprogramming/comments/9b9jga/what_is_a_must_read_book_for_any_programmer/)\nhas some pretty good ones.", "id": "e53b749", "replies": []}]}, {"body": "The larger messages still ring true, but I can agree that it\u2019s dated. ", "id": "e5246di", "replies": []}, {"body": "On the same topic?  \nI sincerely doubt it.", "id": "e52sze7", "replies": []}]}, {"body": "You'd think by now that everyone managing software projects would have at least fucking read *The Mythical Man-Month* but nope ... retards, retards everywhere.  \nLessons learned in the 70's remain unapplied. ", "id": "e52sw25", "replies": []}]}, {"body": "Clean Code", "id": "e51tcqk", "replies": [{"body": "[Clean Code - PDF](https://www.investigatii.md/uploads/resurse/Clean_Code.pdf)\n\n", "id": "e52mxn9", "replies": []}, {"body": "People at any level of programming will benefit from it, plus the writer keeps it interesting ", "id": "e54exbw", "replies": []}]}, {"body": "The Harry Potter part 4", "id": "e51jfj5", "replies": [{"body": "The harriest of them all", "id": "e51l27j", "replies": [{"body": "with a lot more Pot", "id": "e52hbhj", "replies": []}, {"body": "Kinky.", "id": "e532omp", "replies": []}]}, {"body": "Jim Dale reads to me while I fall asleep at night.", "id": "e51qgcu", "replies": [{"body": "I actually prefer Stephen Fry. Jim Dales Hermione voice bugs me.", "id": "e52bxp3", "replies": []}]}, {"body": "You're a wizard Harry. ", "id": "e51s8of", "replies": []}, {"body": "The Merlin Cycle of the Chronicles of Amber actually features a wizard who comes to our universe to study computer science and create a standard package for executing arbitrary magic.", "id": "e53flk6", "replies": []}, {"body": "I don't get it... can anyone explain?", "id": "e52lsk3", "replies": [{"body": "Read the question again dude, he really needed it. XD", "id": "e52mev2", "replies": []}]}]}, {"body": "Godel, Escher, Bach by Douglas Hofstadter\n\nMore philosophy than programming... but it connects ideas of formal languages (e.g. programming languages), mathematics/logic, music, art, and Zen to discuss the nature of meaning and human consciousness. Most mind blowing book I've ever read. Fundamentally changes the way you think about... everything.", "id": "e51tsr5", "replies": [{"body": "it also teaches you the most important principle of development, the hofstadter's law", "id": "e52amv7", "replies": [{"body": "I've landed projects within 1% of estimations.  \nUbiquitous low-skill project-managers does not mean it is impossible.", "id": "e52ti3w", "replies": []}]}, {"body": "I've tried reading this book several times and it's always a trip and I end up needing to stop about a third through.\n\nHigh up on my \"pls finish this\" list though. ", "id": "e539l9q", "replies": [{"body": "Definitely not in the \"light reading\" category. It took me almost a year to finish.", "id": "e53awyr", "replies": []}]}]}, {"body": "Hitchhikers Guide to the Galaxy", "id": "e51vmly", "replies": [{"body": "I was thinking the same thing...then I saw your post, so I just upvoted rather than duplicate.  Great choice!!", "id": "e526jey", "replies": []}, {"body": "I haven't been exposed to it. How did it help?", "id": "e523oue", "replies": [{"body": "You'll fit in better with your peers.\n\nPlus, absurdist humour helps some people develop a \"thinking out of the box\" approach to problem solving.\n\nAnd it's just a good read. That alone makes it worthwhile.", "id": "e5260g4", "replies": []}, {"body": "Well, the answer to your question is 42.", "id": "e52w6re", "replies": [{"body": "What was the question btw?", "id": "e537q9y", "replies": []}]}, {"body": "Learn how to stay calm in hairy situations.", "id": "e52t0y0", "replies": []}, {"body": "You get to meet the greatest of them all - Bowbagger The Infinitely Prolonged.", "id": "e532pjk", "replies": []}]}, {"body": "What's your favourite in the trilogy?", "id": "e51zq4d", "replies": [{"body": "\"So long, and thanks for all the fish\", because I love the Arthur/Fenchurch storyline.", "id": "e5215wx", "replies": []}]}]}, {"body": "Refactoring: improving the design of existing code by Martin Fowler", "id": "e51t99y", "replies": [{"body": "Side note, Martin Fowler is in the process of releasing a much anticipated 2nd edition. Probably worth waiting a month or so to buy this version https://martinfowler.com/articles/refactoring-2nd-ed.html", "id": "e52m1n8", "replies": [{"body": "I need to get my hands onto that, thanks", "id": "e53df4e", "replies": []}]}, {"body": "[Refactoring: Improving the Design of Existing Code - PDF](https://www.csie.ntu.edu.tw/~r95004/Refactoring_improving_the_design_of_existing_code.pdf)", "id": "e52mzqt", "replies": []}]}, {"body": "I\u2019m reading Code Complete 2nd edition by Steve McConnell at the moment. Wish I\u2019d read it years ago, it\u2019s an awesomely informative book. Covers a lot of ground, and explains stuff very concisely. Highly recommend it. ", "id": "e51oy66", "replies": [{"body": "Awesome book. The guy really understands the realities of what it means to actually work as a programmer. He's also got a great way of explaining things.", "id": "e526d2o", "replies": []}]}, {"body": "The Silmarillion.", "id": "e51q58k", "replies": [{"body": "Well put.\n\nOf all the non-answers this is the most non-answery.\n\nEdit: word", "id": "e52pivz", "replies": [{"body": "In Programming Perl 4th edition, Larry Wall et al. recommends the LoTR.", "id": "e52wwi2", "replies": [{"body": "Except the Silmarillion isn't LoTR.", "id": "e53mzwq", "replies": []}]}]}, {"body": "read Tolkien only if you want to be bored to death with 3-pages-long fauna and flora descriptions", "id": "e536sif", "replies": []}]}, {"body": "Crime and Punishment", "id": "e51o8h8", "replies": [{"body": "You\u2019re serious?", "id": "e51seja", "replies": [{"body": "I would also throw in Lord of the Flies", "id": "e51tglk", "replies": [{"body": "Files*", "id": "e51x6g9", "replies": []}]}, {"body": "Yeah and I'd throw in The Brothers Karamazov for good measure.  ", "id": "e52bioh", "replies": []}]}]}, {"body": "Check out:\n\nComputer Systems A Programmer's Perspective\n\nCode by Charles Petzold", "id": "e526r99", "replies": []}, {"body": "CODE by Charles Petzold.", "id": "e51qck9", "replies": [{"body": "Ah I never finished this. It was a really good read too. I\u2019ll make the effort to get back into it. ", "id": "e51x0vr", "replies": []}]}, {"body": "Code - Charles Petzold\n\nThis is fantastic book not just for programmer but everyone interested in computers in general.It makes you appreciate the magic that we call computers today.\n\nDesign of Everyday Things-Donald A. Norman \n\nThis book was a eye opener for me you gonna see everything differently after reading this.\n\nThinkertoys-Michael Michalko\n\nI stumbled upon this book by accident and its just wonderful stuck on a concept you can`t understand try methods and tricks this book provides it just made me better problem solver in general.", "id": "e51wo9x", "replies": []}, {"body": "Introduction to Algorithms - Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, Clifford Stein.\n\nPeople tend to forget that the base of programming are algorithms. Learn them and rule with them.", "id": "e51xpcg", "replies": []}, {"body": "Fill yer boots, from the FAQ, https://www.reddit.com/r/learnprogramming/wiki/books\n\ntldr:\n    \n    Code Complete (2nd edition) by Steve McConnell\n    The Pragmatic Programmer\n    Structure and Interpretation of Computer Programs\n    The C Programming Language by Kernighan and Ritchie\n    Introduction to Algorithms by Cormen, Leiserson, Rivest & Stein\n    Design Patterns by the Gang of Four\n    Refactoring: Improving the Design of Existing Code\n    The Mythical Man Month\n    The Art of Computer Programming by Donald Knuth\n    Compilers: Principles, Techniques and Tools by Alfred V. Aho, Ravi Sethi and Jeffrey D. Ullman\n    G\u00f6del, Escher, Bach by Douglas Hofstadter\n    Clean Code: A Handbook of Agile Software Craftsmanship by Robert C. Martin\n    Effective C++\n    More Effective C++\n    CODE by Charles Petzold\n    Programming Pearls by Jon Bentley\n    Working Effectively with Legacy Code by Michael C. Feathers\n    Peopleware by Demarco and Lister\n    Coders at Work by Peter Seibel\n    Surely You're Joking, Mr. Feynman!\n    Effective Java 2nd edition\n    Patterns of Enterprise Application Architecture by Martin Fowler\n    The Little Schemer\n    The Seasoned Schemer\n    Why's (Poignant) Guide to Ruby\n    The Inmates Are Running The Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity\n    The Art of Unix Programming\n    Test-Driven Development: By Example by Kent Beck\n    Practices of an Agile Developer\n    Don't Make Me Think\n    Agile Software Development, Principles, Patterns, and Practices by Robert C. Martin\n    Domain Driven Designs by Eric Evans\n    The Design of Everyday Things by Donald Norman\n    Modern C++ Design by Andrei Alexandrescu\n    Best Software Writing I by Joel Spolsky\n    The Practice of Programming by Kernighan and Pike\n    Pragmatic Thinking and Learning: Refactor Your Wetware by Andy Hunt\n    Software Estimation: Demystifying the Black Art by Steve McConnel\n    The Passionate Programmer (My Job Went To India) by Chad Fowler\n    Hackers: Heroes of the Computer Revolution\n    Algorithms + Data Structures = Programs\n    Writing Solid Code\n    JavaScript - The Good Parts\n    Getting Real by 37 Signals\n    Foundations of Programming by Karl Seguin\n    Computer Graphics: Principles and Practice in C (2nd Edition)\n    Thinking in Java by Bruce Eckel\n    The Elements of Computing Systems\n    Refactoring to Patterns by Joshua Kerievsky\n    Modern Operating Systems by Andrew S. Tanenbaum\n    The Annotated Turing\n    Things That Make Us Smart by Donald Norman\n    The Timeless Way of Building by Christopher Alexander\n    The Deadline: A Novel About Project Management by Tom DeMarco\n    The C++ Programming Language (3rd edition) by Stroustrup\n    Patterns of Enterprise Application Architecture\n    Computer Systems - A Programmer's Perspective\n    Agile Principles, Patterns, and Practices in C# by Robert C. Martin\n    Growing Object-Oriented Software, Guided by Tests\n    Framework Design Guidelines by Brad Abrams\n    Object Thinking by Dr. David West\n    Advanced Programming in the UNIX Environment by W. Richard Stevens\n    Hackers and Painters: Big Ideas from the Computer Age\n    The Soul of a New Machine by Tracy Kidder\n    CLR via C# by Jeffrey Richter\n    The Timeless Way of Building by Christopher Alexander\n    Design Patterns in C# by Steve Metsker\n    Alice in Wonderland by Lewis Carol\n    Zen and the Art of Motorcycle Maintenance by Robert M. Pirsig\n    About Face - The Essentials of Interaction Design\n    Here Comes Everybody: The Power of Organizing Without Organizations by Clay Shirky\n    The Tao of Programming\n    Computational Beauty of Nature\n    Writing Solid Code by Steve Maguire\n    Philip and Alex's Guide to Web Publishing\n    Object-Oriented Analysis and Design with Applications by Grady Booch\n    Effective Java by Joshua Bloch\n    Computability by N. J. Cutland\n    Masterminds of Programming\n    The Tao Te Ching\n    The Productive Programmer\n    The Art of Deception by Kevin Mitnick\n    The Career Programmer: Guerilla Tactics for an Imperfect World by Christopher Duncan\n    Paradigms of Artificial Intelligence Programming: Case studies in Common Lisp\n    Masters of Doom\n    Pragmatic Unit Testing in C# with NUnit by Andy Hunt and Dave Thomas with Matt Hargett\n    How To Solve It by George Polya\n    The Alchemist by Paulo Coelho\n    Smalltalk-80: The Language and its Implementation\n    Writing Secure Code (2nd Edition) by Michael Howard\n    Introduction to Functional Programming by Philip Wadler and Richard Bird\n    No Bugs! by David Thielen\n    Rework by Jason Freid and DHH\n    JUnit in Action\n", "id": "e526ga4", "replies": [{"body": "Seconding #64 on this list. I didn't really get anything practical from that book, but it gave me a better appreciation for my work, and was actually a pretty good read. ", "id": "e53dq6q", "replies": []}]}, {"body": "SICP", "id": "e51jzsx", "replies": []}, {"body": "Check out [this page](https://www.reddit.com/r/learnprogramming/wiki/books) on the wiki. And within that page, there's [an insanely long list](http://web.archive.org/web/20150518004457/http://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read) of books.", "id": "e51mgyp", "replies": []}, {"body": "For general concepts, I highly recommend the http://www.javascriptbook.com/, even if your focus isn't on javascript.\n\n\nI was blown away by its intuitive/illustrative approach when dealing with OOP and algorithmic thinking.", "id": "e51thr3", "replies": []}, {"body": "Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, John Vlissides, Ralph Johnson, og Richard Helm.", "id": "e51vus5", "replies": []}, {"body": "Well, any programmer by definition already can program.\n\nSo I would say an introductory book on economics. I didn't quite appreciate that my employer and myself are merely in a mutually beneficial business arrangement. I don't see the boss man as a boss like I used to, now we're doing a business transaction.\n\nAnd when it comes to compensation, I better understand the forces that shape it, and better understand how to negotiate or achieve higher salary.\n\nI used to think it was odd that I would get paid more than better educated and far harder working doctors. But now I get it, working hard  knowing lots, only makes a lot of money if you do it in the right situation.", "id": "e52f64y", "replies": []}, {"body": "\"How to Win Friends and Influence People\"\n\nYou are not going to be a career long software developer all your life. You will burnout. Therefore you better damn well know how to move up the ladder into management. To move up, you need to know how to get along with people to keep your management job and have respect from your development team. If you are a geek with no social skills, you better learn and adapt to get people on your side.", "id": "e52yqzq", "replies": []}, {"body": "CLRS Intro to algos. ", "id": "e51l9lo", "replies": []}, {"body": "Congo by Michael Crichton. \n\nJust because we can does not mean we should.", "id": "e51rxgv", "replies": [{"body": "I\u2019m reading Dragon Teeth right now. Haven\u2019t gotten to any killer deeper meaning bits yet. :/", "id": "e51tiq4", "replies": []}]}, {"body": "\"How To Read\"\n\nIt's a tough one, nearly impossible to get through if you haven't already read it once. Actually, just watch the movie. ", "id": "e51xaa3", "replies": [{"body": "\"How To Read: The Movie\"\n\nYes, while highly recommended, I prefer the audio version.", "id": "e52qoq7", "replies": []}]}, {"body": "Zen and the art of Disc Golf. ", "id": "e51tqy4", "replies": []}, {"body": "Enemy of the State. An introduction to functional programming.\n\n\n  You only have to read the title, and giggle because you are one of few people who get the reference", "id": "e521hbi", "replies": []}, {"body": "Clean code.", "id": "e52a2yg", "replies": []}, {"body": "Clean Code", "id": "e52m9pn", "replies": []}, {"body": "I saved a comment a while ago, a lot of great resources. [LINK](https://www.reddit.com/r/learnprogramming/comments/8ukniw/_/e1g94qn)", "id": "e52u82u", "replies": []}, {"body": "[Programming from the ground up](https://www.google.co.jp/url?sa=t&source=web&rct=j&url=https://download-mirror.savannah.gnu.org/releases/pgubook/ProgrammingGroundUp-1-0-booksize.pdf&ved=2ahUKEwiq4KvQipTdAhWS7WEKHdSnDfMQFjAKegQIABAB&usg=AOvVaw0IGriOEqIsRv5tGRqllEUB)", "id": "e52ys4c", "replies": []}, {"body": "The Bible, when you can't fix a bug.", "id": "e51t949", "replies": [{"body": "The Bible is filled with bugs. So many illogical contradictions that if you program a robot to do exactly what the Bible says it wouldn't know what to do. God is only 1 or 3? Follow laws of the old testament or not? How many people died in certain battles? ", "id": "e52ibui", "replies": []}]}, {"body": "*the art of debugging with gdb, ddd and eclipse*", "id": "e51ffqm", "replies": []}, {"body": "* Computer systems - A programmer's perspective\n", "id": "e51on5q", "replies": []}, {"body": "\u201cants bikes and clocks problem solving for undergraduates\u201d\n\nI learned to do some pretty cool stuff here", "id": "e51spnl", "replies": []}, {"body": "Programming pearls - Jon Bentley", "id": "e51tfja", "replies": []}, {"body": "Practical Object Oriented Design in Ruby. Teaches the importance of code design, and then, code design.", "id": "e521rp9", "replies": []}, {"body": "If you want to go extreme: The Art of Computer Programming by Donald Knuth. It's a classic , but also very difficult to follow. Bill Gates once said that if could read through the entire book, he'd like to see your resum\u00e8.", "id": "e523liq", "replies": []}, {"body": "\"How to Read a Book\" by Mortimer Adler.", "id": "e52e4sw", "replies": [{"body": "How will you read the \u201cHow to Read a Book\u201d book if you don\u2019t know how to read a book?", "id": "e53yoj9", "replies": [{"body": "Assuming you know how to read a sentence, the first sentence could teach you how to read a paragraph, which teaches you how to reach a  page, which teaches you how to read a chapter, which teaches you how to read a book.", "id": "e54rf4c", "replies": []}]}]}, {"body": "Clean code.", "id": "e52iax8", "replies": []}, {"body": "Consider watching CS50. I feel they do an excellent job of explaining fundamentals", "id": "e52iqvn", "replies": []}, {"body": "The GOF book mate\n\nhttps://en.m.wikipedia.org/wiki/Design_Patterns", "id": "e52nl9r", "replies": []}, {"body": "Code Complete", "id": "e52txiq", "replies": []}, {"body": "[Joerg Arndt - Matters Computational (PDF)](https://www.jjj.de/fxt/fxtbook.pdf)", "id": "e52vxqb", "replies": []}, {"body": "Programming Languages Processors in Java by Watt and Brown. The only book that will actually teach you how to parse.", "id": "e532r4y", "replies": []}, {"body": "Not necessarily for programmers, everybody should read all of these regardless of their profession, but people in STEM are definitely the ones that need it the most.\n\nThe Bible (might want to skip Leviticus and Numbers)\n\nThe Iliad\n\nThe Odyssey\n\nPlato's complete works\n\nAll tragedies by Aeschylus, Euripides, and Sophocles\n\nComedies by Aristophanes and Menander\n\nHistory of the Peloponnesian War\n\nThe Histories\n\nParallel Lives\n\nThe Aeneid\n\nEpistulae morales ad Lucilium, De brevitate vitae, De vita beata\n\nDe finibus bonorum et malorum, De officiis, Tusculanae disputationes\n\nCommentarii de bello gallico, Commentarii de bello civili\n\nConfessiones, De Civitate Dei\n\nSumma theologiae\n\n\nThere's a lot more but I have to go now.", "id": "e537szt", "replies": []}, {"body": "[https://teachyourselfcs.com/](https://teachyourselfcs.com/)", "id": "e53ehfl", "replies": []}, {"body": "While not directly related to Programming the Phoenix Project is an amazing book.", "id": "e51lbil", "replies": []}, {"body": "Fellowship of the Ring", "id": "e51v3h5", "replies": []}, {"body": "The Great Gatsby. \n\nfiction is also important", "id": "e51yrit", "replies": []}, {"body": "Clean Coder", "id": "e51xqb1", "replies": []}, {"body": "*Concepts, Techniques, and Models of Computer Programming.*", "id": "e51vc5r", "replies": []}, {"body": "It must be: Try, Fail, repeat. ", "id": "e520l6j", "replies": []}, {"body": "n-gate.com", "id": "e523q1s", "replies": []}, {"body": "I\u2019m surprised peopleware hasn\u2019t yet been mentioned. ", "id": "e526c91", "replies": []}, {"body": "Documentation to ur desired programming language is a must.", "id": "e52cseq", "replies": []}, {"body": "the C book", "id": "e52f51b", "replies": []}, {"body": "Clean Code ", "id": "e52g77q", "replies": []}, {"body": "Read about patterns.", "id": "e52mfeh", "replies": []}, {"body": "!RemindMe in 10 hours", "id": "e52r8up", "replies": [{"body": "I will be messaging you on [**2018-08-30 13:06:55 UTC**](http://www.wolframalpha.com/input/?i=2018-08-30 13:06:55 UTC To Local Time) to remind you of [**this link.**](https://www.reddit.com/r/learnprogramming/comments/9b9jga/what_is_a_must_read_book_for_any_programmer/)\n\n[**CLICK THIS LINK**](http://np.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=[https://www.reddit.com/r/learnprogramming/comments/9b9jga/what_is_a_must_read_book_for_any_programmer/]%0A%0ARemindMe!  in 10 hours) to send a PM to also be reminded and to reduce spam.\n\n^(Parent commenter can ) [^(delete this message to hide from others.)](http://np.reddit.com/message/compose/?to=RemindMeBot&subject=Delete Comment&message=Delete! e52r95z)\n\n_____\n\n|[^(FAQs)](http://np.reddit.com/r/RemindMeBot/comments/24duzp/remindmebot_info/)|[^(Custom)](http://np.reddit.com/message/compose/?to=RemindMeBot&subject=Reminder&message=[LINK INSIDE SQUARE BRACKETS else default to FAQs]%0A%0ANOTE: Don't forget to add the time options after the command.%0A%0ARemindMe!)|[^(Your Reminders)](http://np.reddit.com/message/compose/?to=RemindMeBot&subject=List Of Reminders&message=MyReminders!)|[^(Feedback)](http://np.reddit.com/message/compose/?to=RemindMeBotWrangler&subject=Feedback)|[^(Code)](https://github.com/SIlver--/remindmebot-reddit)|[^(Browser Extensions)](https://np.reddit.com/r/RemindMeBot/comments/4kldad/remindmebot_extensions/)\n|-|-|-|-|-|-|", "id": "e52r95z", "replies": []}]}, {"body": "Clean Code.", "id": "e530n0l", "replies": []}, {"body": " Clean Code ", "id": "e5339qr", "replies": []}, {"body": "https://stackoverflow.com/questions/1711/what-is-the-single-most-influential-book-every-programmer-should-read#1713\n\n", "id": "e537rpa", "replies": []}, {"body": "programming language on their own tutorials.\n\ne.g. java tutorials", "id": "e53a0uy", "replies": []}, {"body": "I'm enjoying The Imposters Handbook especially if you don't have a CS degree.", "id": "e53af7h", "replies": []}, {"body": "The book that influenced me most is Domain Driven Design: Tackling Complexity in the Heart of Software but Eric Evans.\n\nIt's a book about programming, but its message is align your code with business goals and terms, using those to influence your code. \n\nWorking on a feature for sales and they keep using terms like lead, account, contact, etc in their descriptions of their need? You have those terms in your code matching as close as possible to what they describe. That's the #1 most important thing it teaches: a \"ubiquitous language\" - someone in sales can say \"Hey, I'm not seeing all the contacts show up for my accounts\" and you know 100% without ambiguity what they mean. They're not saying \"a phone number isn't showing up\" they're saying \"they phone call or email I sent isn't showing up\". \n\nIt also teaches about the concept of bounded contexts. That meaning of terms is different between different departments.\n\nAn account in sales is different than an account in customer service is different than an account in collections.\n\nAn account in sales is someone buying something from you. An account in customer service is someone with a problem. An account in collections is someone who hasn't paid you in a while.\n\nThis can all be the same account (probably not all at once), but the information each department needs is different and their interactions with them are different.\n\nAn account in accounting is something to file under accounts payable or accounts receivable with a money value attached, and probably not much more (for customer accounts at least).\n\nThere's no universal representation of what an account is and trying to do so is folly. And that the way one department wants their information modeled has little bearing on how others do. \n\nThe book also introduced me to [Conway's Law](https://en.m.wikipedia.org/wiki/Conway%27s_law) (either directly or indirectly):\n\n> organizations which design systems ... are constrained to produce designs which are copies of the communication\u00a0structures\u00a0of these organizations.\n\ne. g. If sales and customer service communicate well, you'll see a lot of parallels when modeling their workflows. But if they don't, you'll have to dig real deep to begin seeing how they interact.\n\nThis can extend all the way to UIs as well. If you've worked on an administrative tool, you can look at a menu and know which department wanted what.\n\nThere's other stuff, actual programmery stuff on there - how to model entities, how to handle storage and retrieval, Specification pattern, etc. But to me that's all second fiddle stuff meant to demonstrate a means to the end. ", "id": "e53ajbi", "replies": []}, {"body": "upvoted every comment with \"clean code\"...", "id": "e53h0mu", "replies": []}, {"body": "People are mentioning a ton of great books. Google 'Library Genesis ' to get these books for free.", "id": "e5410bw", "replies": []}, {"body": "the cathedral and the bazaar", "id": "e51jb5w", "replies": []}, {"body": "The Martian by Matt Damon ", "id": "e52b4x6", "replies": []}, {"body": "[Top mentioned books on stackoverflow.com](http://dev-books.com/)", "id": "e53b0eg", "replies": []}, {"body": "There honestly is no \"must read\" book for any programmer.", "id": "e5207bo", "replies": []}, {"body": "[removed]", "id": "e51u7un", "replies": []}, {"body": "The internet", "id": "e533s3m", "replies": []}, {"body": "Clean Code", "id": "e53bhft", "replies": []}, {"body": "Introduction to Algorithms. Learn the thought process!", "id": "e53d63i", "replies": []}, {"body": "As for non programming books, check out White Light by Rudy Rucker", "id": "e53fjmg", "replies": []}, {"body": "How to use the search function - by the internet", "id": "e5221mn", "replies": []}, {"body": "Who reads books these days, go and buy a course on Udemy or something like that", "id": "e526s77", "replies": [{"body": "Udemy doesn't have very much in depth knowledge as much as you can find in books. Otherwise, why do we even use books in schools if the instructor already teaches you the material?", "id": "e52i571", "replies": []}, {"body": "Reading one can do as fast as one likes, listening to someone yap, not so much.", "id": "e52cwpd", "replies": []}]}], "title": "What is a must read book for any programmer?"}