{"url": "https://www.reddit.com/r/learnprogramming/comments/9b2bn0/c_help_with_stack_data_structure/", "text": "Hi all,\n\nI'm trying to understand the stack data structure in C. I think I've nearly got it, but the first element I pop off is returning 0 (my stack is of structs holding int data).\n\nHere's my code: [https://gist.github.com/chrispiccaro18/20c16cca4bd7b46cf0894047c02ce4c2](https://gist.github.com/chrispiccaro18/20c16cca4bd7b46cf0894047c02ce4c2)\n\nThe output I'm getting is: 0 200 19 0\n\nWhy isn't the output?: 200 19 28 0\n\nI'd guess it has to do with my s.top int, but after running through the debugger I don't see where it's going wrong.", "score": 1, "comments": [{"body": "Your pop function is postdecrementing s->top and not predecrementing, so pop gets s->array[3] which is junk, then s->array[2] and s->array[1] which are 200 and 19.", "id": "e4ztj7d", "replies": [{"body": "Thanks! So it looks like altering my pop function to this works:\n\n`int pop(stack* s) {`\n\n`s->top--;`\n\n`return s->array[s->top];}`\n\nThat look right to you?", "id": "e4ztsi4", "replies": [{"body": "Yep, that'll work.", "id": "e4ztx75", "replies": [{"body": "Thanks again!", "id": "e4zu48v", "replies": []}]}]}]}, {"body": "You have undefined behavior in your code. Let's take a simple example of pushing one element onto your stack then immediately popping it. First, we invoke `s.push(10)` internally, [`s.top`](https://s.top) is equal to 1 now. Next we will invoke `s.pop()` which will first return `s.arr[1],` which is undefined behavior, *then* decrement [`s.top`](https://s.top).  \n\nIf you change your pop function to the following, things should start working:\n\n`int pop(stack *s) { return s->array[--s->top]; }`", "id": "e4zv9oj", "replies": [{"body": "Thanks, that works too! Is there a better way to implement the push and pop functions overall?", "id": "e4zvnh3", "replies": [{"body": "Ideally your functions should make sure that any assumptions you're making about the state of the stack are upheld when they are invoked. For instance, your push function assumes that `top < 10` otherwise its overwriting beyond the array's memory. Yet, your function doesn't check for this.", "id": "e4zxq7n", "replies": []}]}]}], "title": "C Help with stack data structure"}