{"url": "https://www.reddit.com/r/learnprogramming/comments/9cme53/printing_conditionally/", "text": "In a Python 3 script, I have a function that does some work. It takes in a argument ('verbose') that determines whether or not the function should actually print things out. There are many print statements in that function, most inside except blocks. \n\nI can have an if block before every print statement that checks if verbose is true before printing that statement, but that would add a lot of code (if blocks). Is there a way to accomplish the same thing, meaning actually print only if the verbose argument is true, with less code? Thanks. ", "score": 1, "comments": [{"body": "You could create a helper:\n\n    def maybe_print(verbose, message):\n      if verbose:\n        print(message)\n\nAlthough, that doesn't gain you a whole lot.\n\nYou could create a local function that closes over the verbose flag:\n\n    def your_function(verbose):\n      def m_print(msg):\n        if verbose:\n          print(msg)\n\n      # Will only print if verbose is true\n      m_print(\"Hello\")\n      m_print(\"World\")\n\nNow you don't need to manually pass the flag constantly.\n\nA third option would be, and this can be considered bad practice depending on the circumstance, make `verbose` a global variable that's set at the start of the program. Then you can use my first example, but won't need to manually pass `verbose`. ", "id": "e5brij1", "replies": []}, {"body": "I found using the following to be good:\n\n`with contextlib.redirect_stdout(sys.stdout if verbose else None):`", "id": "e5br4ym", "replies": []}, {"body": "Create another function that checks if it's true and call that function inside your main function. ", "id": "e5bnuxp", "replies": []}], "title": "Printing Conditionally"}