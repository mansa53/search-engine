{"url": "https://www.reddit.com/r/learnprogramming/comments/9bq997/linkedlist/", "text": "Can anyone  tell me the application of linkedlist in real world application?\n\n&#x200B;", "score": 3, "comments": [{"body": "If you want to store multiple things but don't know how many when you write it.\n\nEx: a todo list. The programmer doesn't know how much memory to allocate in the array. They need a way to add to the array dynamically as the user wants to add another item to the todo list.", "id": "e54yyb0", "replies": [{"body": "You don't have to use linked list for that reason. A simple vector would serve that purpose as well. ", "id": "e55decx", "replies": [{"body": "How do you think a vector is implemented?", "id": "e55f70e", "replies": [{"body": "With an array that is reallocated when maximum capacity is reached.", "id": "e55fp1j", "replies": [{"body": "You are absolutely right. My bad. Well there are time/space trade offs with both approaches.", "id": "e55fv6b", "replies": [{"body": "Of course one is not better than other on all cases. \n\n* Are you going to do a lot of insertion/deletion? Go with linked lists.\n* Are you going to just read the data without doing too much insertion/deletion? Go with dynamic sized arrays.", "id": "e55g5d2", "replies": [{"body": "i would argue that the real strong point of array backed lists is random access. depending on how you write code this is a surprisingly rare thing which then is better served by maplike structures. e. g. all FP languages i can think of use linked lists rather than array backed ones.\n\nthough yes i guess sequential read is faster on arrays", "id": "e55q1wp", "replies": []}]}]}]}]}]}]}, {"body": "The benefits of using a linked list is that you don't need to define a length when you make it, and that inserting values in between two nodes is very easy (shift what is pointing at what).  This makes it waste less memory and allows you to easily insert and delete values (as opposed to, say, an array where you may have to shift the values).\n\nAs for real world use cases... honestly, anything that has a list that can potentially grow dynamically, and/or may require constant inserts and deletions.  A to-do list, as mentioned earlier, is probably the simplest example.", "id": "e5503r6", "replies": []}, {"body": "The others have mentioned dynamic size, and that's true, but a dynamically sized array can also do that. But another distinct advantage of linked lists over arrays is that you can efficiently insert and delete from the middle of the list.", "id": "e55b0nc", "replies": []}], "title": "LinkedList."}