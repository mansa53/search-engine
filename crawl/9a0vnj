{"url": "https://www.reddit.com/r/learnprogramming/comments/9a0vnj/how_not_to_solve_it/", "text": "So some coworkers and I have been batting this around on a whiteboard, and one of them suggested sharing it. It's a satirical antipattern-y play on Polya's How to Solve It.\n\n**How Not to Solve It**\n\n1. Lump it together.\n2. Don't talk about it.\n3. Look at nothing else until you've solved it.\n4. Take shallow breaths.\n5. Try only one approach.\n6. Enlarge the problem.\n7. Assume you have all the tools you need.\n8. Your perspective is already correct.\n9. Listen to a rubber duck.\n10. Never restate the problem.\n\nI know there are some other ideas out there begging to be added to this. How else would you not solve it?", "score": 58, "comments": [{"body": "Block Stack Overflow.", "id": "e4rzciy", "replies": []}, {"body": "Don't read requirements. ", "id": "e4rznng", "replies": []}, {"body": "Don't use debuggers when you've perfectly good print statements right there! \n\nProfiling isn't necessary; you already know where the bottleneck is and how to fix it. \n\nDon't commit to version control until you've fully implemented a feature and squashed every bug.\n\nPlanning is secondary to seat-of-your-pants design. \n\nWho cares about end users? They'll *surely* conform to your ways and naturally avoid the Wrong Thing. ", "id": "e4s35ml", "replies": []}, {"body": "Before you begin, make sure you [shave a yak](https://seths.blog/2005/03/dont_shave_that/).\n\nStart tomorrow.\n\nYou are the first one who has ever faced this problem, so get ready to write a lot of code.\n\nTo parse HTML, [use regex](https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags/1732454#1732454).", "id": "e4sbpzc", "replies": [{"body": "Nice \"Zalgo, he comes\" reference. \n\nFor the three people here who haven't read it I'll post the quote anyway.\n\n>Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems.\n\n>- Jamie Zawinski", "id": "e4sepgg", "replies": [{"body": "For HTML, sure. But regexes are amazing otherwise. I have parsed support tickets to extract the location info with them, and just this week I wrote patterns to find and replace code in 200 Java classes for code-generation purposes. Not to mention the daily search and replaces I do in Notepad++. I've also parsed XML with it and I'm not sorry. It's a replacement for hand editing, just don't use it as your main parsing engine.", "id": "e4skpnu", "replies": []}]}]}, {"body": "[deleted]", "id": "e4sbggj", "replies": [{"body": "I'd bet it's like just waiting for the duck to talk to you instead of talking to it.", "id": "e4shgu1", "replies": [{"body": "[deleted]", "id": "e4shyqf", "replies": [{"body": "Oh it's just random programmer stuff. If you're ever stuck, you should talk to your rubber ducky and then you might get unstuck as you explain the problem. ", "id": "e4si2lh", "replies": []}]}]}, {"body": "Yeah, \"explain it to a rubber duck\" is good advice. Even \"ask a rubber duck the question you're thinking \" because those both force you to think clearly enough about the problem to put it into words. A lot of people THINK they've got the question pinpointed, start to actually ask the question, and immediately have a light bulb go on.\n\n\"Listen to a rubber duck\" is a play on this, because while talking to a rubber duck is a good strategy, listening to a rubber duck isn't.", "id": "e4shmes", "replies": [{"body": "[deleted]", "id": "e4sily7", "replies": [{"body": "No? Listening isn't passive, at least according to most people who I've talked about this with. I think you have interpreted \"listen to a rubber duck\" the way I'd interpret \"hear a rubber duck\". In general, most people consider listening to be an active thing that you have to pay attention to do, while you generally hear things by default. (Unless you're deaf or have ear plugs in or manage to tune stuff out to the point of not noticing noise anymore)\n\n\"Dont talk to a rubber duck' is bad advice, sure, but it is slightly better advice than \"listen to a rubber duck\" which implies that you're sitting there, silently staring at the duck and waiting for it to tell you what to do. \"Don't talk to a rubber duck\" on the other hand just means \"dont use the rubber duck debugging method\".", "id": "e4sj39h", "replies": [{"body": "[deleted]", "id": "e4sjqf6", "replies": [{"body": "No, I think \"listen to a rubber duck\" is better than \"dont talk to a rubber duck\" for the purposes of this list. There are often multiple possible \"opposites\" to a given phrase, and I don't think \"dont talk to a rubber duck\" is a better opposite than \"listen to a rubber duck\".\n\nThe point of this is to be a humorous list of bad advice, emphasis on humorous. All the advice is supposed to be amusing by virtue of how bad it is. So things like \"take shallow breaths\" could technically be \"never take a deep breath\" but that's boring if every item on this list is exactly \"don't [do good thing]\". It's funnier to say that you should sit there patiently waiting for the rubber duck to talk than it is to just say \"dont use a rubber duck when debugging code\"", "id": "e4sk5yw", "replies": []}]}]}]}]}]}, {"body": "I think with good and active moderation this might be a better sub.", "id": "e4s48mj", "replies": []}, {"body": "Convince everyone it's not possible. ", "id": "e4s2jay", "replies": []}, {"body": "Start from the bottom up", "id": "e4s3wwh", "replies": []}, {"body": "Don't start coding until you have every detail figured out.", "id": "e4smmx4", "replies": []}, {"body": "Have you tried turning it on and then off again? ", "id": "e4swwza", "replies": []}, {"body": "**HOLY SHIP THE IRONY!**    Number 9 is hilarious for me because I have a friend who's username is rubberduckycooly and he is good at programming so listening to him is a good idea", "id": "e4spc7r", "replies": []}], "title": "How Not to Solve It"}