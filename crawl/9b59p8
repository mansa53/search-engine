{"url": "https://www.reddit.com/r/learnprogramming/comments/9b59p8/easiest_way_to_learn_object_oriented_programming/", "text": "Like the title says, I need to learn Object Oriented Programming with Java for a class in university. \n\n*Also, is their a way to learn memory allocation and all that calloc/malloc stuff for C easier. \n\nThanks!", "score": 57, "comments": [{"body": "When I started out, it was easy to say I understood OOP concepts like abstraction and inheritance when I'd only read their textbook definitions, but actually coding it was a whole different problem! You can read a million times that inheritance is when \"an object takes on the properties of another existing object\". But if you want to be prepared for a coding-heavy course, then google some small beginner examples (inheritance, for example), hop on an IDE and write the parent class, extend it with a child, then see how the child can already use variables and methods that came from the parent.", "id": "e50jaxs", "replies": [{"body": "Implementing data structures is a great way to learn inheritance and why abstraction and encapsulation are important.", "id": "e51m3v7", "replies": []}]}, {"body": "University of Helsinki's Object Oriented Programming MOOC - www.mooc.fi/en", "id": "e50soqi", "replies": [{"body": "I can agree, this course is good. I started with almost zero knowledge in programming. And recently finished \nCourse 1. I can say I have good understanding of OOP now, still lots to learn though.\n\n", "id": "e50ytkh", "replies": [{"body": "There's more to come. Part 2 is difficult but if you keep at it you'll make it. For some Week's topics I took more than 2-3 weeks to complete them instead of just one, but in the end everything fit together like jigsaw pieces.", "id": "e50zfti", "replies": [{"body": "Can agree with part 2 started it last week. And yes it always took me more than a week to finish. Some topics are much more difficult to understand than others. And I don't have much time in some days too. That's why I love online courses like this. I can make my own schedule and work on it.\n\nAnd thanks for encouragement!", "id": "e50zv5v", "replies": [{"body": "Some of the content in Week 2 was bland and incomplete and didn't explain concepts well. I'd recommend you to watch videos from John Purcell's Free Java basics course on Udemy. He's really good with his explanations.", "id": "e5104wa", "replies": [{"body": "Will do, thanks again.", "id": "e510t2x", "replies": []}]}]}]}]}, {"body": "This definitely ", "id": "e50uktj", "replies": []}, {"body": "Was going to suggest this too.", "id": "e50unzi", "replies": []}]}, {"body": "Read Headfirst Java. \nProvides good insight to oop using java. ", "id": "e50m7a5", "replies": []}, {"body": "I'm fighting an immense urge right now to write a comment outlining why looking for *the easiest way* is a suboptimal state of mind for mastering a new craft to begin with.\n\nAs you can tell I lost that fight.", "id": "e510zd4", "replies": [{"body": "I think you half-won it. You still got your point across. Some might even say you made your point in *the easiest way* possible \ud83d\ude1d", "id": "e51oz4h", "replies": []}]}, {"body": "Design paterns.", "id": "e50telc", "replies": []}, {"body": "robocode. And once you \\*get\\* it, everything seems clear as crystal.", "id": "e50vcdw", "replies": []}, {"body": "https://sp18.datastructur.es/", "id": "e50uuej", "replies": [{"body": "Why isn\u2019t this at the top ", "id": "e51lli4", "replies": []}]}, {"body": "I've been learning Java through Tim Buchalka's Java Masterclass on Udemy and it works fine for me. Though I don't really have anything to compare it to, so I can't tell you what the easiest way is.", "id": "e50y2gi", "replies": [{"body": "I\u2019m also taking the Java Masterclass and I like it too. The course is quite long but I think it\u2019s pretty thorough. ", "id": "e50z4qt", "replies": []}]}, {"body": "Just DO IT!", "id": "e50x7e6", "replies": []}, {"body": "So at our university we were first given introduction to C language (I study EE not CS btw). I learned Java myself by going into Android app development.\n\nIt was tough! I understood structured programming well, but OOP was a whoke different story. It took me 2 months to really get a feeling of how OOP works in practice, because theory is easy to comprehend.\n\nI think Java is cool, stick with it, because if you'll understand how OOP works in Java, you can easily transition that knowledge to C++ for example.", "id": "e50xuwr", "replies": []}, {"body": "About C stuff, this is a basic summary of how it works:\n\nTo allocate memory that doesn't go away when you exit the function, you use pointers with mallocs. Malloc is used to allocate memory of the type and returns you a pointer. So if I did `int * number = (int *) malloc(sizeof(int));` I would be allocating memory for an int where `number` is the pointer that holds its address.\n\nYou can also allocate memory for multiple elements (an array of that type of elements): `int * numbers = (int *) malloc(sizeof(int) * N);` where N is the number of elements you want to have. Beware that you need to be careful about the number of elements you allocate so that you don't corrupt memory.\n\nTo avoid memory leaks you should always free the memory with the command `free(<pointer>);` that will release the memory and let the system use it again.\n\n&#x200B;\n\nCalloc works the same as malloc excepts it sets the memory to zero, so that if you want to avoid trash it will automatically initialize all the values to zero.\n\nIf you didn't understand please let me know.", "id": "e5141kx", "replies": []}, {"body": "In my experience, it's most helpful to use multiple resources because people will explain the same topic in different ways which can help flesh it out in your mind. To that end, I've heard good things about the Helsinki MOOC and the Head First Java book. Personally, I also like the way Deitel and Deitel teach in their How to Program... books.  \n\nIn the end, reading will not be sufficient to understand OOP. Practicing will help as will discussing it with more experienced students or developers. There are skills with OOP that are very difficult to explain like finding the balance between inheritance and composition. \n\nIt's like trying to explain how to drive a manual car. Sure, you can explain how you release the clutch as you push the gas but until you actually *do* it, you won't know what that feels like and what too much, or too little gas actually means.", "id": "e519cji", "replies": []}, {"body": "lol there's an easy way?\n\n&#x200B;\n\nEDIT : On a more serious note.  There's no magic solution.  Practice practice practice.  This goes for both Java and C.  Also if you're learning dynamic memory allocation in C, it is difficult.  Practice by building something.  Like a todo app.\n\n&#x200B;\n\nBut don't think you can learn to code easily - if that was the case everyone and their dogs would be doing it.", "id": "e51xal8", "replies": []}, {"body": "Every time I post here I get downvoted so, just be ready. People are very ego-minded.", "id": "e50wh1u", "replies": [{"body": "> Every time I post here I get downvoted so, just be ready. People are very ego-minded.\n\nCould it be your commas?", "id": "e50x4t7", "replies": []}]}], "title": "Easiest Way to learn Object Oriented Programming w/ Java?"}