{"url": "https://www.reddit.com/r/learnprogramming/comments/9azemb/what_exactly_is_the_model_in_programming/", "text": "I was always under the assumption that the Model is **JUST** the data in the database (e.g., the MySQL, SQLite, Oracle, etc. database itself), and that the View is **JUST** what the user sees and interacts with (e.g., the HTML, Android view XML, Java Swing classes, etc.), and that the other bit(s) (henceforth referred to as OB) are the \"glue\" between the Model and the View (e.g., C, P, VM, etc.).\n\nI thought that the OBs were what make the database queries, performed all the calculations (e.g., convert pounds to kilograms), generate the message to send to one of Amazon's warehouses that I want a book, tells the View to update itself, decodes an MP3 to play, etc.\n\nAs I'm sure you all know, doing a Google search on this will provide a basic similarity between answers (i.e., all agree the Model has to do with data), but after that they all diverge somewhat.\n\nI realize that I will probably get conflicting answers here, but I am hoping to get a discussion going so I can try to make this gel in my brain.\n\nThanks!", "score": 56, "comments": [{"body": "Whenever you cross a process boundary, you need more than just the data. That's because data has structure and you need to describe it. So things like RMI for Java, SOAP instead of JSON, COM interop etc., Etc., Exist to describe not just the data but the structure of the data and even the structure of the function definitions themselves.\n\nIn web programming everything is a wild west so who cares if you don't send property X or property Y or if it is a null you need to be able to deal with it (just don't send nulls to the backend lol, but the backend should be able to deal with a missing property). There is even a JavaScript type for this, undefined, different than null (that gets mapped to null in the backend and should be checked you do not get null checking for free).\n\nSo, the model in programming depends on what context you are talking about... The view-model describes more than just the data but UI specific states and perhaps the mapping between the view-model and model. If you are talking SOAP it is also much more than just the data, because SOAP includes the data types and valid values and even logic.\n\nAs programmers we want single responsibility principle and want models to be property bags but it all breaks apart when you try and send the data over the wire like the web. That's why you see varying definitions because there's context involved. If you are sending data from Java to JavaScript or C# to JavaScript there has to be either a mapping or conventions (but depending on conventions is a mine field -- thats why you have either heavy integration testing or you send more than just the data).\n\nHope that helps.", "id": "e4z6ksq", "replies": [{"body": "I was under the assumption that (C, P, and VM) were between the View and the Model, but I see things like [this](https://www.linkedin.com/pulse/understanding-difference-between-mvc-mvp-mvvm-design-rishabh-software) where it shows the model sending data to the View, and I get confused.", "id": "e4z7y8j", "replies": [{"body": "See this https://www.reddit.com/r/programming/comments/25nrb5/facebook_mvc_does_not_scale_use_flux_instead/ big companies use terms to mean whatever they want them to mean... The model doesn't send data to the view with MVC pattern, look at GOF design patterns for the canonical definition \n\nHalf of what you hear on the Internet is all hype, marketing, has an agenda or is just plain wrong... So keep your bullshit filters on always", "id": "e4z8iv7", "replies": []}, {"body": "Model isnt sending data to the view or controller in that picture, its a poor representation.\n\nThe better way to describe it is the controller sends a model to the view for CRUD operations, then you send the model back to the controller (often editted now) for saving, from the view.\n\nCreate: Send a new empty model to the view, view sets it up, then posts it back.\n\nRead: Send a model to the view. Never heard back from the view because this is a readonly object (IE a collection of rows in a readonly grid)\n\nUpdate: View GETs model from you by requesting it (generally by ID), you send the user to the update view populated with the model. View POSTs back the updated model for saving.\n\nDelete: View POST/DELETEs to controller, requesting a deletion at {Id}, you do that and send back an OK. (This end  point rarely has an actual view or model associated with it since all you really do is handle the Id itself)\n\n", "id": "e4z9aas", "replies": []}, {"body": "In traditional MVC (i.e. desktop applications and the like), the model does indeed send data to the view. But the model doesn't know of the view... at least, not directly. Rather, the view is registered as a listener of the model. This is done so that you can have multiple views of the same model, and all views are kept in sync - change something in the model and all views will update. The view can also interrogate the model if it needs to do so. The model is the single source of truth. In theory, the view could at any point \"reset\" by re-interrogating the model.\n\nTraditional MVC is essentially cyclic. When the user does something, the view fires an event into the controller. The controller translates that into a command to update the model. The model, having been updated, informs the view that it has changed, either pushing the new data into the view or just making it ready so that the view can later interrogate the model. When the view notices the change in the model, it redraws itself. This isn't yet a true cycle, but the user is the missing piece that brings us back to where we started.\n\nSo the controller isn't between the model and view per se. What you're describing is a little close to MVVM, where the ViewModel is meant to sit between the model and the view, translating in both directions.\n\nAlso note that this is *completely different* from the MVC that most web frameworks implement. I typically call that \"web MVC\" to distinguish it. Web MVC doesn't deal with observers or long-lived objects at all. In web MVC, the model is generated by the controller and consumed by the view - it's essentially simple data that is the point of contact between the two other pieces. But the model lives for just a single request, and then it's discarded. The various pieces in web MVC serve different roles than in traditional MVC, even though the have (unfortunately) similar names.", "id": "e50qc4s", "replies": []}]}]}, {"body": "In my opinion, you are asking the wrong questions.\n\nMy way of coping with the huge amounts of contradictory material regarding MVC/MVVM/... is to view them simply as general guidelines, as a means to an end, and not as an end in itself. The different architectures are suggestions as how to achieve flexible, reusable code. Instead of wondering \"should I put this in the M or in the C?\", ask yourself the question what it is you achieve by structuring your code a certain way.\n\nI believe that dividing your code into three parts is rather artificial and feels quite forced. The \"meaning\" of each part depends very much on context. Don't get me wrong: I am pro modularity/layering/decoupling/..., but strongly against the idea that 3 is somehow the magic number and that everything can be clearly put in one of these three boxes.\n\nWhether the M should only contain the database is, to me, a meaningless question. It's similar to asking whether someone is short, average or tall. It is subjective, ill-defined, and in itself, the adjective is unimportant. There is a \"true question\" behind it, which might be \"will these specific pants fit that person?\", and that is a lot more objective. You might then also realize that you forgot to ask if the person was fat.\n\nWhat matters to me is not whether a class is M, V, C, ... but rather\n* Does this class depend on a specific GUI library? Or any other kind of library?\n* Does this class assume there is some sort of GUI?\n* Does this class assume the data is stored in a database, or does it not matter where it comes from?\n* Which other classes does this class rely on, and what are the assumptions they make?\n* ...\n\nEach class will have their own combination of answers, and it it these combinations that determine in which layer/component/module they belong. It is how code can be used that defines it. The M/V/C/VM/P labels are an attempt to \"easily\" categorize your classes, but in my eyes, they fail due to the fact that they're too vague and oversimplify things.", "id": "e4zhfa6", "replies": [{"body": "> I believe that dividing your code into three parts is rather artificial and feels quite forced. \n\nThat's because you're not supposed to. MVC isn't a framework encompassing literally every part of an app; things like async jobs are neither M nor V nor C. ", "id": "e4zvumh", "replies": []}]}, {"body": "Here is how I look at it.  Say you have orders and items, and you want an \u201corder total\u201d.  This will go in the order model and the model will provide the total even though it is not stored in the db specifically.  That is known as business logic.  Or say you have a business rule that an estimated ship date is always 3 days after the order is placed.  That can also be supplied by the model even though it is not in the db.  The part that represents a database row is called an orm.  When you put them together you get a \u201cfat model\u201d.  For simplicity consider the view to be a template that displays the order.  The controller instantiates the model and the view, requests the data from the model, passes it to the view and renders it.  Something like this: \n   \n$order = new order();\n\n$order_no = $request[\u2018order_no\u2019];\n\n$order->load($order_no); \n\n$this->view->items = $order->getItems();  //orm\n\n$this->view->total = $order->getTotal();  // logic\n\n$this->view->render();\n\nHth", "id": "e4zpc42", "replies": []}, {"body": "\nthe data model", "id": "e4zxbdm", "replies": []}, {"body": "First of all, kudos for realizing that you're going to get conflicting answers.\n\nThis is my conceptual model in my mobile application, which is a glorified Todo list.\n\n\n**Model things**\n\n1. The _Server_ definition of TodoItem.  `class TodoItem {/*data*/}` with simple getters and setters\n\n2. My _Application_ definition of TodoItem.  `class TodoItem:INotifyPropertyChanged`.  Whenever the model changes, the UI changes. This is just what Xamarin wants me to do\n\n**Model, kinda sorta ViewModel**\n\n3. TodoManager.  Included in this, is keeping track of what the most important TodoItem is. This guy's main purpose is to make sure that my application (ViewModel and View) is synchronized with my Model.\n\n**View Model**\n\n4. DoThingsViewModel.   This is correlated to a DoThingsPage (*View*). It modifies my most important TodoItem.\n\n5. CompletedItemsViewModel.  This is correlated to a CompletedItemsPage (*View*), that lists all the completed items.", "id": "e508oj3", "replies": []}, {"body": "We'll, I don't play much with anything other than MVC, so I can only speak to that ideology. \n\nBasically MVC is Model View and Controller, as I'm sure you're aware. The Model is our data, the View is our consumer interaction of the data and the Controller is the \"other bits\" you're talking about. \n\nMVC is traditionally a web focused ideaology but in actuality it translates really well to RESTful APIs.\n\nIn a restful API you have the Model, which is our data object we're most commonly querying from a database or data source of some kind. \n\nThen you have the View, which is a little bit of a horrible name for the API world because it essentially represents routing and responses to http requests. \n\nAnd finally you have the Controller. This bit is essentially the middle man between the view and the model. The view ( or route in this case) receives and http request to a certain endpoint and routes the request and all the data inside of the request ( such as query parameters ) to the controller which will query the data source with the requested parameters and return a data model. Which is sent back through the view via a response body. \n\nModel is most commonly going to refer to an abstract representation of your queried data.", "id": "e50p6xe", "replies": []}, {"body": "Model is an abstract concept, within the domain of analysis and design. A data model can be instantiated/implemented by an SQL database for example but can be described abstractly by UML or ERD diagrams. It's all about how we proceed from the conceptualisation of a system to its implementation in language, diagrams, databases, programming languages etc.\n\n", "id": "e50ucrb", "replies": []}, {"body": "It's not a singular term, its a generic term used for different things in different contexts. In practice, you can kind of use it interchangeably with \"data transfer object\" or DTO for most contexts though.\n\nYour database is a sort of model: its a model of your data stored in some fashion. Usually you query for that and transform it into some internal model for your application, some other set of DTOs (common term here: Entity) that make more sense for usage in the application code (see: this mapping is what ORMs are supposedly for, though you'll get wildly differing opinions on whether ORMs are good or bad :-) )\n\nSo in MVC the controller might ask the application code for some models that it wants to hand to the views to render, or pass out an endpoint as an API, or render in a GUI, etc. You COULD use the same model objects here, but a lot of people will take that internal model, combine it with other data you might need, and hand the whole thing to the view as a NEW model (common term around MVC: ViewModel. For APIs you might see these referred to as the Contract of the API endpoint).\n\nSo its just a general term that isn't tied to a specific representation.\n\nOne caveat: If you hear someone say \"Domain Model\" that is a different thing. That's a Domain Driven Design term that carries a lot more with the term than just \"a set of DTOs\". In that case, it really is more of a complete \"model\" of your entire problem domain, but its a completely different usage of the term.", "id": "e4zxrsw", "replies": []}], "title": "What, exactly, is the \"Model\" in programming architectures (e.g., MVC, MVP, MVVM)???"}