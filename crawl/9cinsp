{"url": "https://www.reddit.com/r/learnprogramming/comments/9cinsp/what_to_do_when_a_card_eg_king_has_a_card_number/", "text": "Let me know if this is confusing, because it's 1 am and I am frustrated and should probably go to bed.\n\nI'm trying to write a simple blackjack game for my first project, but I'm stuck on the Jack, Queen, and King having different values than their card number (ex: King is 13, Queen is 12, but their actual value is 10).\n\nI want to make it so I can have one variable that will display what the player's hand is (not the face value of 13), so that when I go to add up the hand I don't have to have multiple equations, some adding the actual face value (ex: 9) to another literal card number (ex: 6), and then some equations where I have to manually input 10 for the King, Queen, and Jack to be able to add these cards.  \n\nAlso, I'm using Java.", "score": 1, "comments": [{"body": "How do you handle the ace?\n\nHow do you handle suits / multiple decks?\n\nWhy do you insist on using a single variable to both id the card and store it's value?", "id": "e5b0z8x", "replies": [{"body": "This is a good point. Sorry, I thought there may be a more efficient way of doing something that I was missing, rather than having a few different variables for each case", "id": "e5b11c5", "replies": [{"body": "You don't necessarily need to store multiple values. When you go to add up the score, look at the value(1-13) and just add them up the way they should be added. If you try to hard code the real point values then you'll still have the issue of the Ace being both 1 and 10 and have to do an on-the-fly calculation anyways.", "id": "e5b16he", "replies": [{"body": "For the project, the Ace luckily only takes on the value of 1, so that shouldn\u2019t be an issue. I guess I\u2019m more confused on how to make a program that will keep consistently running every time the players decides to add another card to their deck (I have to output the value of the new hand every time they do so)", "id": "e5bhb28", "replies": []}]}]}]}, {"body": "You should have a `Card` class with `name`, `value`  and `faceValue` properties. When you do your math you would call the `getValue()` method on each card and add them up. The `Hand` class would have methods that do various calculations on a `List<Card>` property, which represents all the cards a player is holding. ", "id": "e5b0uc5", "replies": [{"body": "This is the proper, sensible reply.", "id": "e5b5pbu", "replies": []}, {"body": "This is what I was thinking, but I'd just use an object not a class, then just run reduce on the current array of cards and get the value of them all\n\n&#x200B;", "id": "e5b3mtw", "replies": [{"body": "> but I'd just use an object not a class\n\nAn *object* is an *instance of a class*. You can't create an object without having a class.", "id": "e5b5o1v", "replies": [{"body": "I didn't see the part at the end where he said he's using java, but couldn't you still just reduce the value instead of calling a function every time?", "id": "e5b6zcy", "replies": []}]}]}, {"body": "This seems fine at first, but will cause problems when \"special\" rules come into play. E.g. the Ace is 1 or 11 depending on the other cards. \n\nMy idea would be to have a \"Rule\" class that defines the rules of the game, including how much cards are worth. In the simplest case it can just look up the values from a table. ", "id": "e5b7dln", "replies": [{"body": "That's the job of the `Hand` class, not the `Card` class. The reason being that its job is to handle the behavior of a group of `Card`s. The `Card` itself should not care about other objects. A `calculateValue()` function belonging to `Hand` should be taking the presence of other cards into account when determining the value.\n\nA `Rule` class does not make sense to exist because it has no meaning on its own. The functionality belongs to `Hand`. You might add a `getUpperValue()` and `getLowerValue()` to `Card` and `Hand` would try both when attempting to calculate the value.  If the value does not change then they both return the same number.", "id": "e5bpg6k", "replies": [{"body": "Yes that's about what I was trying to say. The class didn't need to be called Rule, but the logic how the game works should definitely not be in the Card class. \n\nA Hand might also not be abstract enough tough. What if it was some other card game where your score also depended on other properties on the Board. \n\nOr if he wanted to implement the logic to \"split\" your Hand when it's possible. Does that  belong to the Hand class? Maybe, maybe not...", "id": "e5btogz", "replies": []}]}]}]}, {"body": ">I don't have to have multiple equations\n\nWell, you literally need multiple methods of adding up the cards, so I'm not sure how you're going to avoid that.", "id": "e5b0sc6", "replies": []}], "title": "What to do when a card (e.g, King) has a card number of 13, but a stored value of 10?"}