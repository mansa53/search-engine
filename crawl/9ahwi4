{"url": "https://www.reddit.com/r/learnprogramming/comments/9ahwi4/feeling_lost_how_do_i_learn_to_think_like_a/", "text": "I know this probably sounds stupid....\n\nBut I'm finding going through CodeCademy isn't the best.\n\nI mean I kind of feel like I am just doing copying Syntax and not really, learning?\n\nHow do I begin to \"think\" like a programmer?", "score": 3, "comments": [{"body": "> But I'm finding going through CodeCademy isn't the best.\n\n> I mean I kind of feel like I am just doing copying Syntax and not really, learning?\n\nThat's *exactly* the problem with Codecademy, Sololearn, and similar sites/apps. They teach *syntax*, but not *programming*.\n\nUse a *proper* tutorial for the language of your choice (that you haven't mentioned, so we cannot give you any recommendations).\n\nAlso, there are books \"Think Like A Programmer\", C++ and Python editions, by V. Anton Spraul, No Starch Press that help you understand the thinking process of a programmer. The actual used language is secondary. The key of these books is to understand the thought process from problem to algorithm to program implementation.", "id": "e4vkba9", "replies": [{"body": "Sorry... basically it was Python. But yeah I could tell you syntax now. But not actually get started from a blank piece of paper and do some actual programming\n\nThanks I will try find some books around to teach me properly", "id": "e4vke53", "replies": [{"body": "Since you mentioned Python:\n\n+ [Automate the Boring Stuff with Python](http://automatetheboringstuff.com)\n+ [Invent Your Own Computer Games with Python](http://inventwithpython.com)\n\nBoth are free to read online, the latter also offers some more advanced books. \n\nGood luck!", "id": "e4vksy2", "replies": [{"body": "Thanks bro I appriecate it. \nIts kinda left me feeling a bit dumb and down lol", "id": "e4vkuke", "replies": []}]}, {"body": "Depending on how far you are, I would recommend [*Think Python*](http://www.greenteapress.com/thinkpython/thinkpython.html), which was the course book for my introduction to Python.  It explains syntax but also runs through the purpose of various aspects of the language quite well.  It also includes a lot of tricky and interesting programming challenges and exercises.  I found it good to \u2018bodge\u2019 my way through the first time with whatever works, then come back later with some more experience and see what I\u2019d do differently.", "id": "e4vxgdp", "replies": [{"body": "Interesting! I actually just checked on some HumbleBundles I supported in the past.\n\nI own, functional thinking and becoming functional, they look to be from the same publisher? Maybe worth looking at also", "id": "e4wxf9k", "replies": []}]}]}]}, {"body": "Start looking up coding challenges and trying to solve them.", "id": "e4vk3m8", "replies": [{"body": "Exactly! Solving algorithm challenges is what really develops your thinking in terms of programming. Will also help you at interviews in the future.", "id": "e4vpw4c", "replies": [{"body": "I assume sites like coderwars and coderbyte etc are prime for this?", "id": "e4xkt0h", "replies": [{"body": "Yes. Consider also TopCoder or CodeForces. These are also a popular destinations for contest.", "id": "e4xl21i", "replies": [{"body": "Brilliant, thanks", "id": "e4xl3mj", "replies": []}]}]}]}]}, {"body": "I'm about four weeks into teaching myself Swift (my first programming language), and I'm finding by far the most benefit is derived from actually using code in my own projects, however small and meaningless they may be.\n\nI've currently completed three projects where I started with a blank page, and completed them to end up as fully functioning apps.\nThe first was a simple hangman app. It took me about twelve hours to complete what would have taken an experienced programmer maybe fifteen minutes.\n\nIt was a lot of stress and a lot of Google, but I made it.\n\nI've created two further apps since then, and although working through the book I'm using is important to teach me new skills, actually using the code myself in the wild is where I'm getting the most benefit.\n\nThe way I'm seeing it, is studying is where I'm taught new things, but using them myself is where I learn them.\n\nMy advice would be to come up with a project that you think that you have the knowledge for, have a go at it, and no matter what, don't give up on it until it's finished.", "id": "e4vms9x", "replies": [{"body": "can i ask how do you go from an idea, a blank screen and making that project?\n\nfirst im trying to learn the language first before i start any project but i feel i get stuck at this part. idk where to start or what to do first when i get there. people say the best way to learn is doing a project but what if i dont feel ready enough for it? or know what to make anyways.\n\nim learning JS at the moment", "id": "e4vnqit", "replies": [{"body": "Try to come up with something that uses what you've just learned, but on your own idea.\n\nLike, let's say you've learned how to take a number from a user, and previously some math. can you write a program that takes an inputted number and squares it? \n\nOr take what you're shown, and do something different with it. If it has an example of using objects to represent a dog for example, make one representing a car, or a movie.\n\nI think codecademy is a lot of teaching syntax without a lot of examples? so make examples of it.\n\nAlso, don't be scared to take on too much? It can be hard to figure out how difficult something is without knowing a lot, but google for some beginner projects and choose 1 that looks neat. A hangman game the person above you did is a good choice, but pick something you think is neat.", "id": "e4vpd1j", "replies": []}, {"body": "I'm learning Swift, so I guess that being able to use Xcode help, so it's probably not a completely blank screen.\n\nThe book that I'm using to learn (Hacking with Swift) teaches you how to do various things. Whilst I'm learning those things, I try to imagine how they could be used to make something of my own. And once I have an idea and I think I have the knowledge to make it, then I just go for it.\n\nI'll refer back to the book a lot. I'll use Google and Stack Overflow a lot. But with a lot of trial and error, and a lot of shouting at my computer (which seems to help my code work better), I can eventually get my code to do what I want it to do.\n\nOne thing that I've found very useful, is learning from a book, because it's so easy to go back and look through.\n\nI first started trying to teach myself with videos. And although these were useful because I could visually see what the 'teacher' was doing, I found it painful to go back and find the snippets of information that I needed; so much scrubbing and searching for sometimes a single line of code.\n\nI've also used Codecademy a little bit, and found the same problem.\n\nInstead now using an eBook, I have iBooks open on one side of my screen, Xcode open on the other, and being an eBook I can highlight important parts, and keyword search the entire book, so it's so much easier to find the information that I need.\n\nAs for feeling like you're not ready... there's only one way to find-out.\n\nThrough Google and through trial and error, I've learnt many things by simply building my own apps. Things that I needed to complete my apps, that I didn't know before beginning.\n\nKind of like... where there's a will, there's a way. I want my app to do something. I know that it's possible, I've just got to figure-out how, and if that means I've got to sit here for six hours making no progress before finally making a breakthrough, then so be it.", "id": "e4vsn5k", "replies": []}]}]}, {"body": "I would suggest handwritting/handtyping the syntax first.\n\nThen, once that become easy, you can then focus on solving problems.\n\nYou have to progress.\n\nFirst learn the syntax, THEN focus on solving problems.\n\nIt's like working out: you can start adding weight if your form is terrible.\n\n\u200b", "id": "e4vl42x", "replies": [{"body": "Yeah youre right. I think just being stuck in this constant syntax only rut has just gotten me a bit lost and down", "id": "e4vtu7v", "replies": [{"body": "If you study JUST syntax a few hours everyday and write 1 liner programs, those \u201cquick wins\u201d should keep you motivated. \n\nBut after a couple of weeks, you should be ready for more complex programs. \n\nHas that not been your experience?", "id": "e4x7xpx", "replies": []}]}]}, {"body": "Dude, literally go buy the book titled \"think Like a Programmer\" right now. I was in the same spot you are around this time last year. I failed my C++ class and thought I would never get programming. After I got that book everything changed. I retook that class and got the highest grade in the class, it's a total game changer I promise you.", "id": "e4vub2e", "replies": [{"body": "Thanks man i shall check it out!", "id": "e4wxfnh", "replies": []}]}, {"body": "I've heard good things about the [MIT Intro to Computer Science Using Python](https://www.edx.org/course/introduction-to-computer-science-and-programming-using-python). ", "id": "e4vvxw6", "replies": []}, {"body": "Heya, good question. This is normal feeling, and leads to impostor syndrome in the end, but don't worry.  This method its a good way to keep you motivated that you get results quickly, and later you'll start learning the bigger picture.  If it would be the other way around you'd be already bored after so much theory. So just bear with it. Even if you're copy pasting, you're learning. In the bigger picture a programmer is mostly a problem solver. you don't even need code for it. Or a specific language most of the time. You just have 'things' that do things and solve problems. The only thing you get good at from junior to senior, is reading, breaking down problems, and selecting what tools to use for tackling those problems with the least overhead and cognitive load.  Actually most of my junior mentees jump to code, but I need to slow them down. After you've got those basic syntax, than you can start bothering with the WHY, why do I write specifically this, what are the alternatives etc etc. Thats where self research comes to play. When I learn something new, I follow the code examples, just copy paste it, get it working, then start cloning other people work from GitHub learn from that, and then read all the documentation with given framework.  And I the end use it to solve my own problems. \n\nBeing a good coder, is just being really good at applying what you've learned, taking from others and bending it to your situation, and being able to detect what is 'good' and fits for your project. \n\nHappy coding! if you ever need help find me on https://emile.wtf for free mentoring! ", "id": "e4vp5np", "replies": [{"body": "For instance right now I'm getting my hands dirty with kubernetes again. So what I basically did was:\n\n- Go to the official documentation\n- Look up all the documentation I  can find on different sources (slideshare, youtube, GitHub, speaker deck, my local friends  I in the startup community, slack)\n- Try to get the vocabulary\n- Try to understand the big conceptes \n- Try to apply familiar concepts that I learned earlier into the kubernetes domain\n- Read all the boring API documentation on my work commute. \n\nWhile I am doing this I write a big log with all the questions. Also sometimes I cheat, and just bring a cluster up without exactly knowing what I'm doing, but just play around and try to understand why and how it bangs. However, where I was satisfied with \"it works\" as a junior I am now only satisfied if I understand how it works. So I can fix when it at some point stops working.\n\n\"What is a pod\", \"How does a pod relate to a container\" why is there such a distinction between services, deamon-sets blablabla. And then I'm trying to find all the resources that answer those questions. \n", "id": "e4vpi4y", "replies": []}]}, {"body": "think in code.", "id": "e4vopwn", "replies": []}], "title": "Feeling lost.. How do I learn to \"think\" like a programmer?"}