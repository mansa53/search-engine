{"url": "https://www.reddit.com/r/learnprogramming/comments/9a0gak/cqt_first_bigger_hobby_project_an_application_to/", "text": "Hi everyone,\n\n&#x200B;\n\nI have been studying computer science for the past two years and know my way around the basics of c++. I have done smaller useless hobby projects in the past but since I switched from qwerty to dvorak two months ago, I had the idea to make a program to help me practice. (dvorak is a special keyboard layout)\n\n&#x200B;\n\nThe basic idea is just a regular tool that you can find online anyways, but with a twist. As I try to make things out of my comfort zone I primarily want to add the ability to analyze a given text file. The file would contain a series or words or in case of text be converted to a series of words. From these you would than be able to practice words, but also common patterns like in English 'ing' or 'the' or other patterns. This way you can practice on any language or even specific jargon which means code as well.\n\n&#x200B;\n\nThat would be the basic version, but I have a few more  ideas of which I'm not sure how and if its even a smart idea to do. This is why I'm here to not only ask for general tips, but mainly feedback and tips of including a neural network. I have some knowledge of the workings of a neural network, but no idea on how I would even get started.\n\n&#x200B;\n\nThere are two things I'm considering using it for. One is for analysis of text, but mainly code. You would than give it code you've written and It would train line by line or part by part learning your coding style. It could than be used for auto completing text. However this feels too far off the main concept so I'll probably keep it for a separate  project. The other idea is for good and deliberate practice. It would train on words you type and the time it took to type it. This way it would learn about the patterns you struggle with. When trained well enough it could give you words which would  feel a little like gibberish, but they would be made up of patterns you struggle with so you can specifically train on those.\n\n&#x200B;\n\nMy main question is how I would go about that. I'd prefer making it without libraries if possible so I learn more about the inner workings. My idea of a neural network in this scenario is one you feed information like words where you put each letter in a node and the network would guess the difficulty (time to type it / average time to type a word of this length). But I have no idea how I could reverse the process of using it to create words that are difficult. It feels like the wrong approach. Therefor, should I use a neural network? What are good alternatives?\n\n&#x200B;\n\nAlso feel free to give me additional ideas on features. I'm not only focusing on leaning but also on making something semi-useful.", "score": 1, "comments": [], "title": "[C++][QT] First bigger hobby project, an application to practice typing using AI"}