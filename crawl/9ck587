{"url": "https://www.reddit.com/r/learnprogramming/comments/9ck587/c_array_of_classes/", "text": "  \n\nI am trying to define an inheritance system where a base class, named Animal, has virtual functions that can inforce some functionalities to the derived classes. The derived classes are species of animals, ie. Lion, Zebra, Dog, Cat. \n\nI would like to make save ten different species dynamically to array of ten. This is what I have come up with:\n\nconst int SIZE = 10;\n\nAnimal \\*myarray\\[SIZE\\];\n\nmyarray\\[0\\] = new Lion();\n\n&#x200B;\n\nThe issue is that \"object of abstract class type \"Lion\" is not allowed\". How do I go about creating this array? \n\n ", "score": 1, "comments": [{"body": "Well, for starters, you should probably be using an std::vector, or at least std::array instead of raw C-style arrays.\n\nSecondly, lets take a look at your compiler error message:\n>object of abstract class type \"Lion\" is not allowed\n\nWhat does your Lion class look like? Are you implementing all (pure) virtual Animal methods? Your compiler is telling you that you cannot make an object of type Lion, because it doesn't know what a Lion does, because you haven't overriden those methods.", "id": "e5b94t8", "replies": []}, {"body": "not sure what you're doing (since you didn't post any more code), this works for me\n\n    #include <iostream>\n    using namespace std;\n\n    class Animal {\n    public:\n      virtual void shout() = 0;\n    };\n\n    class Lion: public Animal {\n    public:\n      void shout() {\n        cout << \"raawr\" << endl;\n      }\n    };\n\n    int main() {\n      Animal *animals[10];\n      animals[0] = new Lion();\n      animals[0]->shout();\n      return 0;\n    }", "id": "e5c0ahv", "replies": []}, {"body": "That error has nothing to do with the array. Even `Loin *myLion = new Lion();` would fail.", "id": "e5c01bl", "replies": []}, {"body": "The solution was already posted, so I'll just add that you should not use bare pointers. Always use `unique_ptr` or `shared_ptr`. What you're writing is not proper idiomatic C++.", "id": "e5bf6wa", "replies": [{"body": "> you should not use bare pointers.\n\nMore like you should not use bare `new`/`delete`, and use smart pointers to manage ownership. Non-owning bare pointers are still fine.", "id": "e5bh2dy", "replies": [{"body": "I absolutely agree. But given his elementary missteps I thought I'd spare him the second order refinement to the story.", "id": "e5biluq", "replies": []}]}]}], "title": "[C++] Array of classes"}