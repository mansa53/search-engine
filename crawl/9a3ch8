{"url": "https://www.reddit.com/r/learnprogramming/comments/9a3ch8/how_to_pick_up_c_comprehensively/", "text": "C++ seems so hard to practice, I'm not saying the topics are hard to understand but just like it's so complex that expanding anywhere past the console is very hard. I picked up Python in a couple of months well enough to write my own applications from scratch. I know many of the topic of C/C++ in fact the language is how I really learned to program but I struggle to find ways to practice it and apply my knowledge in personal projects since its more of an industry language. I'd say 90% of the careers I want to pursue with my computer science degree require or prefer C/C++ skills (As well as Java/OOP and Python/other scripting language) And C/C++ seems like its going to be the hardest to gain an understanding of unless I get an internship working with it.\n\nAny tips on getting a good enough understanding to land an internship working with C/C++ since thats my main goal", "score": 1, "comments": [{"body": "If you want to learn C: [The C Programming Language](https://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628) (Written originally by the creators of C )\n\nIf you want to learn C++: [Programming: Principles and Practice Using C++](https://www.amazon.com/Programming-Principles-Practice-Using-2nd/dp/0321992784/ref=dp_ob_title_bk) (Written by the creator of C++)\n\nAlso, [this](https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list) should help you put together your general assortment of resources for C++.\n\nI would learn each one separately. C++ in particular will require a large time commitment in order to become fluid with it since it is a dense language compared to C which is fairly compact.\n\nIf I had to summarize C++ into 3 main pillars, I would say: Low-level system access, OOP, template meta programming. The book I recommended should go over all 3. I recommend going through it slowly and practicing all the parts that you don't already know. It has a lot of examples, including showing you how to implement std::vector.", "id": "e4sokfe", "replies": []}, {"body": "Build web applications or games. I recommend web applications since that's a much more employable skill.", "id": "e4slevb", "replies": [{"body": "Web applications in C?? AFAIK that\u2019s not a thing. I enjoy your recommended employable skill but I don\u2019t really care about what\u2019s employable, anyone can go where the moneys at and burn out in 10 years. I want to go into a sector that I enjoy which is hardware ", "id": "e4sozba", "replies": [{"body": "Wat. You said C++. Not that it matters a whole lot. You can write web apps in Brainfuck if you really want to.", "id": "e4t71k4", "replies": []}]}]}, {"body": "Learning C++ *comprehensively*? Don't, the language is so large and convoluted that everyone just picks a subset that they like and sticks to it.\n\nI suggest starting with simple C-like style, just using a few C++ syntax niceties. Then decide which part of the of the language you're interested in.\n\nOr is C in general what you're having issues with?", "id": "e4tmsdv", "replies": [{"body": "Just using C in general, I have no plans on trying to learn it ALL just enough to be applicable to put it on a resume or pass an interview with it", "id": "e4tnicu", "replies": [{"body": "Oh, well in that case just make stuff. Learn to use the most popular C libraries, like OpenGL or whatever, to help learn how things are meant to work. C is very similar to Java, if you know that then you'll have to more specific with what you're having issues with. ", "id": "e4tsybc", "replies": []}, {"body": "I do not recommend the advice of treating C++ as an augmented C. Idiomatic C++ style specifically makes use of language features that makes C++ safer and more abstract than C. C patterns such as manual memory management and owning raw pointers are actively discouraged in C++.", "id": "e4u5yvs", "replies": []}]}]}], "title": "How to pick up C++ comprehensively?"}