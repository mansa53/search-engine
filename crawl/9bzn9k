{"url": "https://www.reddit.com/r/learnprogramming/comments/9bzn9k/how_feasible_it_is_to_create_a_python_to_tcl/", "text": "Imagine there are 1000s of Python scripts that need to be converted to Tcl. How can one do it? What does it take:  what knowledge, skills, and what level of experience/skill?\n\nDoes anyone know? Thanks in advance ", "score": 5, "comments": [{"body": "This is normally called a \"transpiler\" - translating one programming language into another.\n\nYou'd have to be EXPERT LEVEL at both Python and Tcl to do this. Not a beginner task at all.\n\nSure, there would be some parts that are easy. But once you run out of the easy stuff, you'd run into the problem that Python and Tcl are fundamentally different languages. All it takes is one language concept that doesn't exist in Tcl - like list comprehensions - and you'll have to write hundreds of lines of code to translate every Python list comprehension into valid Tcl code. Not at all easy.\n\nAs one example, Jsweet is a Java-to-JavaScript transpiler. It's more than 200,000 lines of code. That's the order of magnitude you'd have to write.\n\n&#x200B;", "id": "e576qiq", "replies": [{"body": "Thanks for the reply. \n\nIf it was a team of 5 experienced programmers (10+ years of experience with BOTH Python and Tcl), how much time could it take them? Your personal assessment", "id": "e57b34m", "replies": [{"body": "A month or two to get it working with most programs, then a year to work out the details and bugs and make it really robust.", "id": "e57m3pw", "replies": [{"body": "I see. Have you heard of anything that can accomplish this goal already to some extent? i.e, is there such a compiler already or at least an attempt to be one?", "id": "e57ydpz", "replies": [{"body": "I'm not aware of one between Python and Tcl.\n\nThere are several transpilers between Python and other languages, so one of those may be a good starting point.\n\nAs a couple of us have mentioned, Tcl is just not a popular language anymore, it really doesn't make sense to translate Python to Tcl. It should be the other way around.", "id": "e57zq1y", "replies": []}]}]}]}]}, {"body": "You would need to write a program that could read and understand python code. It depends on what features you would want to support. E.g advanced arithmetic statements, `in` syntax, etc\n\nYour program would then generate valid tcl code from the input", "id": "e56yhbg", "replies": [{"body": "This is what I am pretty much asking.\n\nWhat **skillset (languages, technologies, frameworks etc.)** should I have in order to write such a program?\n\nLet's say that the only feature it has is converting Python to Tcl.", "id": "e56yvbr", "replies": []}]}, {"body": "Converting Python to Tcl seems like a very weird thing to do, considering how Python is much more popular and better supported. What's the reason for even needing it?", "id": "e57c087", "replies": [{"body": "Well let\u2019s say there is just a requirement to transition from Python to Tcl. \n\nCan you provide reasons for why it is a weird idea?", "id": "e57csc8", "replies": [{"body": "To me at least Tcl is practically a dead language: I don't see why anyone would choose Tcl for a new project. It likely is still in use in many places where it was written back in the day and is just a legacy system now. That's why it sounds to me like you're migrating a recent Python codebase to Tcl so it would integrate with certain legacy stuff it needs to integrate with, as opposed to going the other way and migrating the old Tcl stuff to Python to get a similar uniform and compatible system.\n\nAnother reason I feel this way is because I'm involved with WeeChat, an IRC client that has scripting support for both Python and Tcl. There are [215 Python scripts](https://weechat.org/scripts/stable/language/python/) for it and only [4 Tcl scripts](https://weechat.org/scripts/stable/language/tcl/). The latter are mostly from ~10 years ago as well. So there's an obvious bias against Tcl in an environment where they're equal choices. That is making me question, whether porting things to Tcl in 2018 is the smartest decision, especially going forward and trying to maintain such codebase. I personally don't write Tcl nor do I know of a single person who does. Economically that doesn't make sense either, as it becomes increasingly difficult to find people to maintain that, as the situation is with legacy systems written in COBOL etc nowadays.", "id": "e57djlb", "replies": []}, {"body": "I agree.\n\nIt's like transitioning from CDs to cassette tapes. A step backwards in every way.", "id": "e57m8r7", "replies": []}]}]}], "title": "How feasible it is to create a Python to Tcl \"interpreter\" for a beginner?"}