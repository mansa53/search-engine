{"url": "https://www.reddit.com/r/learnprogramming/comments/9av6zs/need_help_with_c_programming/", "text": "When i do\n\nfor (i=0;i<2;++i) printf(\"%d\",i);\n\nthe 'i' remains unincremented! Why is that? When does the 'i' variable get incremented during the cycle? And how does it differ from post-increment if both give the same printf result!", "score": 1, "comments": [{"body": "What output are you seeing? \n\nPre and post increment work identically as lone expressions, they are only different when involved in another expression:\n\n    int a = 3, b = 30;\n    int x = ++a;    // a is now 4, x is 4\n    int y = b++;    // b is now 31, y is 30\n\nPost increment is useful in writing one-line assignment-then-increment kind of code, like:\n\n    auto iter = someVector.begin();\n    while (iter != someVector.end()) {\n        // first assign *iter to val, then increment iter\n        T& val = *iter++;\n        DoSomethingWith(val);\n    }\n\nEdit: just realised you asked for C code, so here's an equivalent:\n\n    char *p = someCharArray; // assuming this is a pointer to a valid C string\n    while (*p != '\\0') {\n        // first assign *p to c, then increment p\n        char c = *p++;\n        process(c);\n    }\n\nAlso, please format code when submitting, it's (a lot) harder to read otherwise.", "id": "e4yd1nb", "replies": [{"body": "Your code is fucking unreadable. OP probably doesn\u2019t know what character arrays are, plus you\u2019ve complete obfuscated the point of this post with an indirect snippet.\n\nFucking asshat.", "id": "e4yf10w", "replies": []}]}, {"body": "I would expect this to print \"01\".  What are you seeing?", "id": "e4yitik", "replies": []}, {"body": "I\u2019m still learning C myself, but shouldn\u2019t that be \u201ci++\u201d, instead of \u201c++i\u201d?\n", "id": "e4ydoiu", "replies": [{"body": "It makes no difference. I usually use `++i` myself, because it is more straight-forward. On older compilers there was also a speed advantage because of this, so the preferred version used to be `++i`, but today it doesn't really matter.\n", "id": "e4yfdxm", "replies": [{"body": "Why do people downvote `++i` lovers? `++i` is so much simpler to explain and understand than `i++`.", "id": "e4zh3ed", "replies": []}]}, {"body": "Jesus it\u2019s been a minute, but I\u2019m pretty sure that in a loop context, ++i will increment before the first loop, while i++ increments on the first loop\n\nEDIT: Eh I was close. \n\nLet\u2019s do this:\n\ni = 1\n\nj = i++\n\nk = i \n\nj will equal 1, because i is incremented AFTER the operation. (Set j to i, then add 1 to i)\n\nk will equal 2, because i was incremented on the previous step", "id": "e4yf3xi", "replies": [{"body": "Nope. There is no such magic. The for loop doesn't care what is inside the increment expression; it runs it last in the iteration no matter what it is. `++i` and `i++` have the same effect.\n", "id": "e4yfayy", "replies": [{"body": "I updated my comment with the correct answer. Appreciate the downvote. ", "id": "e4yfhim", "replies": []}]}, {"body": "Your code is not only fucking unreadable, your premise is complete and utter bullshit that is just plain fucking wrong, you fucking asshat. /s", "id": "e4yh5aq", "replies": []}]}]}, {"body": "It shouldn\u2019t matter whether you\u2019re pre or post incrementing in the for loop. Is there another part of the logic that deals with i and has been left out? It looks right to me", "id": "e4yfpwj", "replies": []}, {"body": "I think nobody here has given the right answer. The reason your i is not incremented is because the for loop works like this: \n\n1) Initializes (You've set it to 0).\n\n\n2) Checks the condition. 0 is less than 2, so it's true.\n\n\n3) The loop body (your printf statement) is now executed.\n\n\n4) **Then** i is incremented. In this case whether you use pre or post increment it does not matter because the for loop must execute either ++i or i++ first before moving on.\n\n\n5) Now i is checked against the condition again. 1 is less than 2 so it's true.\n\n\n6) Printf is executed again.\n\n\n7) i is incremented, and it's now true.\n\n\n8) Condition is checked. 2 is not less than 2, so the loop ends.\n\n\nHope this helps.\n", "id": "e4ys6fd", "replies": []}], "title": "Need help with C programming"}