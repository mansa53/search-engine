{"url": "https://www.reddit.com/r/learnprogramming/comments/9baor4/c_resources_for_learning_low_level_optimization/", "text": "Hello all. I'm an intermediate programmer with experience mainly in C++. I'd like to start learning as many low level optimization tricks as possible. I realize that the optimizer is going to be enough in most cases, but I want to know how to improve code even further so I'm not caught off guard in cases where the optimizer isn't enough. Can anybody point me to resources/give advice on the path I should take to getting good at this skill?", "score": 4, "comments": [{"body": "[Godbolt](https://godbolt.org/) is a great tool to understand how your code is being compiled, and the effects of different compilers and options make on the results.\n\nBut, that only tells you about the generated assembly code, and it's awfully hard to know how that translates to code performance.  For that, you have to measure, measure, measure.  Get to know your profiling and benchmarking tools very well.  Like [Google's microbenchmark library](https://github.com/google/benchmark).  There's a couple CppCon videos on this subject that will give you a flavor for how they work.  Optimization is more about correctly measuring performance than it is about writing faster code.", "id": "e51k1bg", "replies": [{"body": "These are some really great resources, thank you. I actually do want to learn more about how generated assembly translates to code performance though. I realize it will be incredibly difficult, but my gut is telling me that the learning experience will be worth it. \n\nThank you for the resources though. I'm definitely going to be getting a feel for the tools you mentioned soon", "id": "e51llj1", "replies": []}]}, {"body": "Warning: Mike Acton is the absolute mad man when it comes to optimization. They go full DOD and AOS to SOA.\n\nhttps://www.youtube.com/watch?v=rX0ItVEVjHc\n\nhttps://www.youtube.com/watch?v=16ZF9XqkfRY\n\nhttp://www.dice.se/wp-content/uploads/2014/12/Introduction_to_Data-Oriented_Design.pdf", "id": "e535r6n", "replies": []}, {"body": "I would learn what the compiler is going to do for you and how you can write code that ensures the compiler optimizations will happen.\n\n\nthe compiler reads in your c++ code strips out a bunch of junk it doesn't need turning it into an intermediate representation(IR).  and intermediate representation is the step between your code and assembly. code -> Intermediate representations -> assembly. Using the generated IR the compiler performs a bunch of optimization passes to generate more efficient code. then it will allocate registers and generate assembly. You can do is learn what the compiler is doing and how to help it out.  \n\n\nIf you find yourself in some weird ass situation where the optimizer isn't able to provide good enough performance you are likely to have a good idea of what you are doing and how you can improve the performance. barring bad algorithms (which the optimizer can't help you with generally) tts not a situation someone just stumbles into \n\n\nGeneral things i would look at besides how the compiler works. continuation passing style / accumulator parameters to force tail recursion. use of macros in c programming (i mostly know this from a low level systems perspective). I think the general concept is pre-processor directives.  how not to trash your cache / how to increase the likelihood of cache hits. How to efficiently use registers. Knowing your architecture (what registers you got to play with). \n\n\nhope this helps holler at me if you want specifics. ", "id": "e55ejgd", "replies": []}], "title": "[C++] Resources for learning low level optimization?"}