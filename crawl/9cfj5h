{"url": "https://www.reddit.com/r/learnprogramming/comments/9cfj5h/essential_data_structures_concepts_in_c/", "text": "Hello everyone, starting this year, I'm going to be starting my search for an internship and C++ is the language I'm most comfortable with. However, I was wondering what are important concepts that I should know going into an interview? After going through some videos/resources, I've compiled this list:\n\n* Tree Traversals\n   * Pre-order\n   * In-order\n   * Post-order\n   * Breadth-first\n   * Depth-first\n* Recursion\n   * Base case\n   * Helper functions\n   * Not used often, limited stack space.\n   * Can convert to iteratively with stacks/queues.\n* Stacks/Queues\n   * Balancing parentheses.\n* Object-oriented Programming\n   * Create a class.\n   * Set up methods.\n   * Private/public variables.\n* Hash Maps\n   * Data structure that can be used to solve most problems.\n* Sorting\n   * Run-time analysis.\n   * Bubble sort/merge sort.\n   * Quick sort (if have extra time)\n* Strings\n   * How to construct them.\n   * Iterate through them.\n   * Determine whether it\u2019s a palindrome.\n\nI was wondering if anyone can help me add any significant/must-know concepts. I'm not looking for a list of interview questions, but rather a list of concepts. Thanks in advance!", "score": 0, "comments": [{"body": "To all following commenters: please, do not bring up the old circlejerk \njokes/memes about recursion (\"Understanding recursion...\", \"This is \nrecursion...\", etc.). We've all heard them n+2 too many times.\n\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/learnprogramming) if you have any questions or concerns.*", "id": "e5aaiyr", "replies": []}, {"body": "Obviously Big Oh notation. \n\nAlgorithm types, ie: Greedy, Divide and Conquer, Dynamic Programming, Network flows.\n\nSome understanding of NP complete problems is always useful. It\u2019s good to know when you can\u2019t solve a problem efficiently.", "id": "e5ab8kg", "replies": []}, {"body": "You\u2019ve mentioned a lot of general algorithm and data structure concepts, but you also mentioned \u201cconcepts in C++\u201d in your submission title. For C++ specifics, it would help you to be familiar with ownership, RAII, and move semantics. For example, when would you use a raw pointer versus a reference versus an `std::unique_ptr` versus an `std::shared_ptr`? What is an rvalue? Know about idiomatic, \u201cmodern\u201d C++. Do you use `auto` and range-based `for` in your code? Do you use const correctness? What is SFINAE? What is the rule of three/five?", "id": "e5ajuox", "replies": [{"body": "Will take this into account, appreciate it!", "id": "e5ar6vg", "replies": []}, {"body": "Would you think these are essential for a software engineering internship type of question?", "id": "e5ayd9p", "replies": []}]}, {"body": "That's a pretty decent basic list.\n\nSo..... despite every chip being multicore these days, parallelism, threading or otherwise, is not a topic that people learn? I would for instance ask you \"Discuss how you would do a multi-threaded breadth-first and depth-first\".\n\nOr I would try to get you to reinvent the Boyer-Moore algorithm for substring matching.", "id": "e5ak1hz", "replies": []}], "title": "Essential data structures & concepts in C++?"}