{"url": "https://www.reddit.com/r/learnprogramming/comments/9cfz7p/really_basic_noob_question_of_how_programs_work/", "text": "I was wondering, lets say you wanted to create an app or a game or any sort of program, how would you go about doing it?\n\nOf course, you have the program you use to write code, whether it is Notepad++, Visual Basic, or something better than the ones I have experience with aha,\n\nI have only ever run code straight from the editor, but if you are making say, an app, and running it without the program installed or running, how does the computer know what you are asking of it?  Do they have languages prebuilt into all computers?  Is there a 'background code' of sorts that explains the language to the computer when you create it?How is it launched?  Surely you need a program to interpret it?\n\nHow does it all work, what is the process going from the code to the running program?\n\nCould I in theory just write my code in my regular notepad and run it?  Or are code editors essential and determine what you can do?\n\nWhat about game engines and the like, how do they work?\n\nIt confuses me a tad, in college I was only taught how to use a small handful of code editors, and didn't understand how it all really worked or what my options were for writing code, so I would appreciate any explanation.", "score": 1, "comments": [{"body": ">how does the computer know what you are asking of it?  Do they have languages prebuilt into all computers?\n\nThe CPU knows one language only, [Machine code](https://en.wikipedia.org/wiki/Machine_code). All other languages have to be translated into machine code or executed by an interpreter (which has been translated into machine code).", "id": "e5af8i2", "replies": []}, {"body": "The only \"computer\" is the CPU: it is made by CPU designers and chip fabricators, and is capable of providing a bunch of registers to store values, and executing a set of instructions on those registers in customised binary format, known as that CPU's instruction set. Usually each architecture (x86, x64, ARM, PowerPC, etc) maintains its own ISA. An assembler interprets assembly code for a CPU into its binary instructions.\n\nThe next layer is that of operating systems: these are usually written in C and compiled down to the assembly for each CPU. OS give you the ability to \"boot\" into them, and give applications running on top a bunch of APIs to access files, hardware, communication, etc. OS and CPU designers work very closely to try to achieve optimum performance and security between the two. This is why platform bugs like Meltdown and Spectre affect both layers pretty severely.\n\nCPU + OS gives you the platform for a user-level C/C++ compiler/linker, that can read and write files from the OS kernel, deal with input / output in a console window, etc. Using this toolchain you can now create applications and libraries for specific OS. Libraries like OpenGL, SDL, etc provide a platform independent API for their users to be able to write platform agnostic code, but that's only because all the platform specific code is underneath.\n\nA game engine will utilise all these toolchain and cross compilers to give you build environments for various target platforms. They will also usually use them to provide users platform specific editors that run on their corresponding OS (like Unreal on Windows or Unity on MacOS), and allow users to write code that runs on top of the platform independence layers. (Unreal on Windows will use MSVC to create the editor solution and project files, and to (cross) compile its engine; Unity on MacOS will use Mono for Mac.)", "id": "e5af198", "replies": []}, {"body": "The lowest level programming language is *machine code*, which consists of instructions that the computer understands directly (technically there's microcode below that, but you'll never see it unless you work in a company that makes processors). Every other language must be translated to machine code in order to create a working program. Some language like C and Rust are *compiled* into machine code before running the program, while others such as Python and Javascript are *interpreted* while you run the program.\n\nA related concept is *assembly language*, which is pretty much the same thing as machine code except it has human-readable instructions instead of just numbers like in machine code.\n\n>Could I in theory just write my code in my regular notepad and run it?\n\nIn theory, yes. In the past most programs were written in assembly, but today it's very rare.", "id": "e5afams", "replies": []}, {"body": "I think there's really good explanations from people before me of how a program gets executed, and I recommend Code by Petzold if you want a good book to gain a general knowledge of that.\n\n&#x200B;\n\nIf you're asking \"How do I run my code outside of an editor\" then, there's two ways. \n\nIn interpreted languages (like python), then whatever computer you want to run it on would also need that language, and you can either run it from the command line like \"python3 [someprogram.py](https://someprogram.py)\" (assuming python3), or adding a \"shebang\" to the top so that the computer can read that and get the program it needs to use to interpret the code. Google something like \"how to run <language> code in <OS>\"\n\nIn compiled languages, it will build an executable file, which contains the machine code, so you can just run that.\n\n&#x200B;\n\nSo, a code editor isn't necessary, it just adds nice features, like being able to run code from it.", "id": "e5axiqt", "replies": []}], "title": "Really basic noob question of how programs work"}