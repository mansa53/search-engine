{"url": "https://www.reddit.com/r/learnprogramming/comments/9c47o0/learning_c_with_java_background/", "text": "I'm TAing a course on Object Oriented Programming that I thought was in Java but the professor rebuilt the course for C++ over the summer. I know Java and C++ are similar and I don't need to learn how to program from scratch I just need to be familiar with the syntax and how the language works so that I can help students figure out why their programs aren't working. Plus I need to do it quickly as TA assignments went out late putting me two weeks behind. \n\nWhat are good resources for quickly becoming acquainted with C++ with a Java background?", "score": 1, "comments": [{"body": "> I know Java and C++ are similar\n\nActually, some trivial syntax for things like loops apart, they are really very different.", "id": "e57v2ak", "replies": [{"body": "I\u2019m a decent Java developer and I use Java primarily in my job currently and I found C++ easy in some ways and **very** hard in others.\n\nIt looks like Java in a lot of ways, but it has so many small differences (to say nothing of memory management, which caused half my headaches).\n\nIf you\u2019re a Java developer, it\u2019s definitely not a walk in the park to learn C++.", "id": "e587g1u", "replies": []}]}, {"body": "The biggest source of confusion for you initially will be the general lack of `new X()` everywhere, where just writing `SomeClass object;` will call the default constructor and create an object. This is the \"stack\" in C/C++, and where variables are automatically allocated : they get destroyed when they go out of scope. In general you want to exploit the stack as much possible (in context of a function doing something).\n\nThe next source of confusion will likely be pointers and the weird syntax around `new` and `delete` - even though you shouldn't really be needing these C++11 onwards, knowing how to work with them is always worthwhile. Unfortunately, this is one of those things like quaternions or regular expressions that just takes reading multiple points of view, trying things yourself, etc, until it finally clicks.\n\nSomewhere along the way you'd have noticed `const` correctness and passing stuff by reference: this will be vital in class and function design. With C++11 at this point you should take a look at move constructors and how to exploit performant returning by value etc.\n\nIn parallel you'll be dealing with the separation of header and implementation files, and optimising headers for fast compilation. This should also introduce you to the hard-to-decipher linker errors, and general build nuances and environment.", "id": "e57xj8f", "replies": []}, {"body": "They aren't really that similar.  Syntax and similar concepts like OOP will easily carry over, but C++ has a lot of extra stuff, probably the thing you'll not be used to is manual memory management.", "id": "e583chn", "replies": []}, {"body": "The syntax should be easy enough, you'll probably pick up on that right away. Honestly really understanding C++ might be hard, but you only have to be a little ahead of the students to be effective. Instead of resources like books I would just google around and take a very hands on approach. I would tackle these things in basically this order:\n\n- Makefiles/compilers: Read up then practice, learning how to run the code is essential to learning anything else.\n- Basic syntax: Write a program that lets you take user input, do some calculations, and output them. This sort of thing is honestly really easy in C++.\n- Basic object-oriented program: Create an object, store values, create methods, try inheritance. Stick to things that seem trivial in Java while you're starting.\n- Pointers/references: This is the hard part, they're just a bitch at first and eventually they click. Frame it in terms of Java, when you pass a string to a method and modify it, it changes outside the method. This isn't true for an int. That's pass by reference vs. pass by value. See how that concept relates to references and pointers. Just experiment a ton in simple programs until you can reference and dereference without second guessing yourself.\n- Some data structures: Particularly vectors (like arraylists in Java), they'll basically work like you expect.\n- Some kind of debugger: If the course is IDE based use the one there, if it's centered around the terminal learn GDB. Get comfortable setting breakpoints, checking the values of things, etc... In my experience debuggers are more important here than in Java so don't be afraid to break it out when you're stuck.\n- Memory management: If it's a very introductory course to programming in general it might not be an issue, but most full C++ courses cover it. Allocate memory (malloc() and alloc(), learn the difference) and free it. Using Valgrind to find memory leaks. Know the sizes of different data types in bytes like the back of your hand. See how to use all this with constructor and destructor methods.", "id": "e57wtan", "replies": []}], "title": "Learning C++ with Java background"}