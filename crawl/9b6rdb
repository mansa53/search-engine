{"url": "https://www.reddit.com/r/learnprogramming/comments/9b6rdb/bestfastest_way_to_learn_c_if_i_already_know/", "text": "I\u2019m pretty comfortable with Java and Python and know programming concepts already. However, I\u2019m looking to participate in programming competitions such as USACO and I heard that C++ is the best language to use (since the top competitors seem to have the most success with it).\n\nOn the USACO page, it lists C++ and C++11 separately, what\u2019s the difference and which should I learn?\n\nSecondly, where would I go to learn it the quickest since the contests will be happening soon? Assuming that I already know most of the concepts, I pretty much just need to learn syntax and some C++ specific stuff right?", "score": 12, "comments": [{"body": "Learn C++11 or later. If you know java, a lot of the ideas carry over (taken from) to C++. The most important bit is to learn pointers/references and good memory management. C++11 or higher you should definitely be using STL as well as smart pointers. If you get used to those features you\u2019ll be set for a lot of intro C++", "id": "e50tl8w", "replies": [{"body": "Is C++17 code backwards compatible at all? Like if I code in C++17 will it compile in C++11?", "id": "e50uqdv", "replies": [{"body": "If you\u2019re using any features specifically introduced in C++17, then no. But chances are it would be a small fix. Why would you need it to be backwards compatible though?", "id": "e50v3ko", "replies": [{"body": "I was just wondering what version of C++ to install since I might decide to use it for other projects as well. If it\u2019s backwards compatible then I\u2019ll just install the latest version. On the USACO page it lists C++ and C++11 separately.", "id": "e50v8p3", "replies": [{"body": "You don\u2019t need to install C++, just a compiler. If you use GCC you should be able to use 11/14/17. ", "id": "e50vu25", "replies": []}, {"body": "You don't \"install C++\". You install C++ compiler. Changing standard is just 1 compilation flag.", "id": "e517x7u", "replies": []}]}]}]}, {"body": ">learn pointers/references and good memory management. \n\nI agree on that, pointers are most useful things for certain algorithms and in embedded systems", "id": "e50vkjh", "replies": []}]}, {"body": "I was in a pretty similar situation as yours a few months ago. I already knew how to program in Python (I mostly use programming to develop applications for numerical calculus), but I wanted to learn C++ to manage the code more deeply, in order to improve the overall performance. I took a series of three Microsoft courses (the basics, intermediate and advanced) which can be found in edX, and I've found them really helpful. They don't propose a lot of exercises, it's almost entirely up to you to practice the contents covered, which usually get to the point. I don't know about C++ alone, C++11 is just a version of the compiler (C++ 2011 Standard). Also check out this webpage, [www.cplusplus.com](https://www.cplusplus.com), to refer in case you need a more in-depth explanation of the contents, or to broaden them.", "id": "e51muhw", "replies": []}, {"body": "By \"know other languages\", does that include C? If it doesn't, then learn C first, C++ piggybacks directly off it.\n\nYou can compile almost all C code using a C++ compiler, so just start looking at C tutorials.\n\nIf you've never worked in an un-management language before then I think you'll be surprised by how different the general mindset is.", "id": "e50uc63", "replies": [{"body": "No, only languages I can say I\u2019m comfortable using/reading right now are Java and Python. Is learning C really required? Since C isn\u2019t an object oriented language.", "id": "e50udrk", "replies": [{"body": "Nothing is really \"required\", but then why learn C++ to start with? If you try to ignore memory management by using smart pointers and such then why not just stick with Java?\n\n> I heard that C++ is the best language to use\n\nThat's not really a good reason and isn't really conducive to productive learning. If you're not sure why you'd want to do low level programming, then I'd continue using what you know until you hit a roadblock.", "id": "e50uiwy", "replies": [{"body": "I mean why learn C when C++ has some different features and I can learn the \u201cC backbone\u201d while learning the C++ syntax?", "id": "e50ukgm", "replies": [{"body": "I've heard people say \"avoid learning C if you really wanna learn C++\", but in your particular case, learning C first might actually be a good idea, since it is much easier to learn than C++ and will give you most of what you need for programming competitions.", "id": "e50unrt", "replies": [{"body": "So are programming competitions less focused on object orienting approaches and more on things like pointers?", "id": "e50upab", "replies": [{"body": "Programming competitions have very little in common with \"ordinary\" programming. They are mostly about solving math problems with a computer. You typically don't need any object-orientation or anything like that for it.", "id": "e50v4kj", "replies": []}]}]}, {"body": "Because a lot of the stuff in C++ is designed to automate tasks that C programmers do (with varying degrees of success). Trying to learn what a \"smart pointer\" is without understanding how pointers work first is going to lead to misunderstandings.\n\nAlso, C++ is a **massive** language that's been amalgamating cruft for decades. No one has a comprehensive understanding of the whole language, everyone just picks a subset of C++ features and uses it to make C programming more bearable. And figuring out what's useful is harder if you've never written C, it's just the natural starting point.", "id": "e50uur5", "replies": [{"body": "Thanks for answering all my questions, I\u2019ll definitely at least look at the C concepts first then.", "id": "e50uwkv", "replies": []}]}]}]}]}, {"body": "This is wrong advice. /u/ihavesomeinquiries can start learning C++ from it's C parts. I doubt people learn C++ from it's upper-level features. Practically every C++ book/tutorial/course starts off the same level as any C tutorial, they just go much further. But they ommit potential antipatterns in C++ that learning plain C might cause.\n\nTop C++ mentors say the same (Kate Gregory even made a CppCon(?) presentation \"Stop teaching C\"). The same says Bjarne Stroustrup.", "id": "e518c0w", "replies": []}]}], "title": "Best/fastest way to learn C++ if I already know other languages?"}