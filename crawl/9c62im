{"url": "https://www.reddit.com/r/learnprogramming/comments/9c62im/how_do_you_design_good_software_when_you_are_not/", "text": "I was reading Paul Graham's essay on good taste in designing programs and how we are programmers should not merely translate manager's will into code. My question is how do you design programs when you're not the one incharge or you work in a team and you need t convince everyone of your design?", "score": 0, "comments": [{"body": "Can you do a quick mockup of your idea or do a separate fork if you want to dedicate that much time? \n\nShowing is different than telling, especially with something like software. ", "id": "e589f5m", "replies": [{"body": "The problem is when the manager doesn't understand your taste. I spent one entire morning coming up with a way to sort and delete duplicate queryset results on basis of string rankings in O(n). All they see is that I wrote only two functions in the whole day. ", "id": "e589osz", "replies": [{"body": "Did your changes lead to actual, concrete improvements? E.g. you discovered that the segment of your code that sorts/deletes the queryset results were an actual bottleneck in the overall application and you found a way to noticeably decrease the amount of time your query was running?\n\nIf so, then probably what you need to work on is communication. It's reasonable that a non-technical manager wouldn't care about whether or not you were able to rewrite an O(n\u00b2) algorithm into an O(n) one or whatever. Instead, you should explain what you did on a more higher level -- show benchmarks, explain how your work directly helps advance your team's goals...\n\nOn the other hand, if your improvements were incremental, or if you were improving something that doesn't align with the team goals, then yes, I think your manager would be correct to push back. For example, suppose you were able to improve performance by only a few hundred milliseconds in a segment of code where performance isn't the top priority or you focused on improving the efficiency of something that's executed fairly infrequently. In those cases, yeah, there's a case to be made that you didn't spend your time working on the right things.\n\nIn any case, in regards to convincing your team and your manager... Learn to pick your battles -- don't ask for massive changes to everything. Figure out what your team and your manager's incentives and priorities are. E.g. when talking to your manager, explain how your proposed changes help positively impact the business as a whole. Try and start by convincing individuals, rather then groups -- groups have more inertia/are more likely to just stick to the status quo. Gather allies/consensus before proposing a change in direction at team meeting or whatever. Avoid playing the blame-game/avoid painting the work other people have been doing in a negative light. Instead, focus on the positives/how certain changes can help the team as a whole. When applicable, take the initiative -- if you're changing a segment of code and see a relatively risk-free way to make a more globally positive change, consider carving out some extra time and do that.", "id": "e58fevs", "replies": []}, {"body": "A lot of people in this industry have a mentality of getting things working is more important than getting things right. They just don't have the energy to spend on writing something that's robust and efficient, so they write it sloppy and hope that it won't make much of a difference.\n\nIf you're the type of person that likes to write code well, then that can be very frustrating to deal with. Sometimes it's better to go with the flow though, because it forces you to be more productive. Writing good and clean code is nice, but if it takes too long, most people will think that it is a waste of time.", "id": "e58c68s", "replies": []}]}]}], "title": "How do you design good software when you are not the one incharge?"}