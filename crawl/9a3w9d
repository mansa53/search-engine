{"url": "https://www.reddit.com/r/learnprogramming/comments/9a3w9d/been_at_this_for_several_weeks_really_desperate/", "text": "Hi everyone,\n\nI feel like I've melted my brain trying to figure this out on my own and I just can't make sense of it. The more I work at this, the less I think I understand.\n\nI have a modal on my page that when you click it, creates an in-browser pop-up that asks a user for two pieces of information: a location and a reminder. This is what it looks like in pug/jade that's simply called `checkLocation.pug`\n\n    .modal\n      .modal-content\n        form(method='POST' id='newReminders')\n        input(type='text' name='location' id='location' placeholder='location')\n        br\n        input(type='textarea' name='reminder' rows='4' id='reminder' placeholder='type your reminder here')\n        br\n        button(id='saveButton') save\n      span.close-button &times;\n\nI have browser-side java script handling the appearance and disappearance of this modal in a file called `checkLocation.js`:\n\n    var modal = document.querySelector(\".modal\");\n        var trigger = document.querySelector(\".trigger\");\n        var closeButton = document.querySelector(\".close-button\");\n      \n          function toggleModal() {\n            modal.classList.toggle(\"show-modal\");\n          }\n      \n          function windowOnClick(event) {\n            if (event.target === modal) {\n              toggleModal();\n            }\n          }\n      \n          newIcon.addEventListener(\"click\", toggleModal);\n          closeButton.addEventListener(\"click\", toggleModal);\n          window.addEventListener(\"click\", windowOnClick);\n\nBoth of these files are in a `views` folder. Outside of that folder I have my `server.js` file that handles the sever-side javascript like routing. So far for this I have this stuff going on:\n\n    const mongo = require('mongodb');\n      const assert = require('assert');\n      const url = 'mongodb://localhost:27017/doko';\n    \n      router.get('/get-data', function(req, res, next){\n        var resultArray = [];\n        mongo.connect(url, function(err, db){\n          assert.equal(null,err);\n          var cursor = db.collection('reminders').find();\n            cursor.forEach(function(doc, err) {\n              assert.equal(null, err);\n              resultArray.push(doc);\n            }, function(){\n              db.close();\n              res.render('myReminders', {items: resultArray});\n            })\n        })\n    \n      }); \n    \n      router.post('/insert', function(req, res, next){\n        var geoLocation = {\n        title: req.body.location,\n        content: req.body.reminder\n      };\n    \n      mongo.connect(url, function(err, db){\n        assert.equal(null, err);\n        db.collection('reminders').insertOne(item, function(err, result) {\n          assert.equal(null, err);\n          console.log('Item inserted');\n          db.close();\n        })\n      })\n        res.redirect('/checkLocation');\n      });\n\nWhat I can't figure out is how to make the connection between my modal form and the database. I know in the server-side javascript I need to have the `router.post` grab information from the modal but ... I'm totally lost. I have been reading everything I can find and have been watching YouTube videos and I am definitely missing some important things here and I am so desperate for help. I'll even pay someone to help me if that's what needs to happen.\n\nI have all the files [in a git repository for anyone to look at.](https://github.com/Runnerswift/doko/tree/doko/doko/doko1)", "score": 3, "comments": [{"body": "I'm not familiar with pug/jade, but I can explain the basics of how web form data gets submitted to the server.\n\nThe simplest way is that you create an HTML form element. It looks like you have that: the method is POST and the id is newReminders. However, you're missing another really important attribute: **action**. Action is supposed to be the URI that the client contacts - on the server - to receive the result of the form. The server then gets the value of all of the input fields from the form, and returns a new web page in response.\n\nTry setting action to the url of your server, then when you press Enter on the form the browser's url should change to that url. Now you implement the server side and interpret the form data.\n\nFurther down the road, a \"better\" way to do that is to have JavaScript use an XMLHttpRequest to send the data to the server without reloading the page.\n\n&#x200B;", "id": "e4srcxo", "replies": [{"body": "Oh! That's great! So I'd set the action to point to `localhost:27017/doko`? I'm not 100% certain how database URLs work. Database stuff definitely isn't my strong suit haha!", "id": "e4tawk7", "replies": [{"body": "No - you wouldn\u2019t send your form data directly to the database, you\u2019d send it to your node server. That\u2019s what that \u2018POST\u2019 route in your app is for, to accept the POST from the browser", "id": "e4tbvgl", "replies": [{"body": "Oh! So I'd send it to my `server.js` file which would then 'catch' the data and since I already have code in there to send it to the database, that would handle it. \n\nHey, this is starting to make sense to me! \n\nSo I'm gonna wanna have my form code read:\n\n`form(method='POST' action='../server.js' id='newReminders')`\n\nMy `server.js` file is one directory \"up\" from where my pug files are.", "id": "e4tc3kr", "replies": [{"body": "Yes, but not actually to `server.js`. when you start the server, it will be running on a port on localhost. You\u2019d send it to `http://localhost:<port>/insert`, replacing the port placeholder with whatever port you are running the node server on", "id": "e4tccpt", "replies": [{"body": "Oh! Okay, so since I have my `server.js` file 'listening' to port 3000, I'd set the pug to send the form data to:\n\n`form(method='POST' action='http://localhost:3000/insert')`\n\nIs the `/insert` part of the URL necessary?", "id": "e4tcx5t", "replies": [{"body": "Yes - you can see in the definition of the post route that it is set up to respond to the `/insert` path.\n\nNo offense - but it seems like for your level of understanding of Node and HTTP in general, you might be better off working through some basic Express.js tutorials to get the basic foundations down. Trying to tackle a project with a DB and view rendering system is going to be a real struggle if you don\u2019t understand the routing model.", "id": "e4td8ph", "replies": [{"body": "No offense taken, you're absolutely correct! I just started learning how to code a couple months ago. I was accepted into a kind of \"bootcamp\" for total beginners and while we spent a lot of time on some things, we've glossed over others. I think you're right that I should go over the course from the beginning again.\n\nThank you for your help, I really appreciate it!", "id": "e4tdi3f", "replies": []}]}]}]}]}]}, {"body": "Almost...\n\nYour frontend needs to only communicate with your own backend.\n\nThen the backend communicates with the database.\n\nIf you let the frontend access the database directly, someone will come along and delete all of your data.", "id": "e4tfmo4", "replies": [{"body": "So I have:\n\n`form(method='POST' action='https://localhost:3000/insert')` and just to be safe I have a button with the same kind of thing:\n\n`button(type='submit' action='https://localhost:3000/insert'`\n\nI put it in both places because it's still not working and I have no idea where the problem is. When the \"save\" button is clicked, the form doesn't close and nothing makes it to the database.\n\nI'm so bad at this. I have no idea where the problem is.", "id": "e4tgen6", "replies": [{"body": "It sounds like /u/Djbm already answered this, and we're on the same page.\n\nPart of the problem is that you're trying to learn so many things simultaneously:\n\n* Database\n* Back-end\n* Front-end form\n* Front-end JavaScript\n\nIf anything goes wrong with any of those four parts, the whole thing doesn't work.\n\nIt's much harder to try to learn all of those together. Typically you should learn them separately and master them separately first, then put them together.\n\n&#x200B;", "id": "e4wfa6d", "replies": [{"body": "Ideally, I want to focus on just a couple things once the course I'm in is over. The thing is that for this course I have to show a final project in order to receive a recommendation from the instructors for job search. My whole future is riding on this. I'm virtually unemployable because of some really awful luck over the last few years - no employer will touch me because my resume is a total mess. \n\nSo I look at this course and the people who want to connect us students with employers as my last chance to find a job again, and if I don't have much to show for my final project then I'm out of luck.\n\nI need this to work so bad and I'm having panic attacks because I can't figure it out and I can't get much help. Believe me, I would really love to have the time to just chill and focus on one thing and learn it really well. I'm actually *really* interested in front-end JavaScript and CSS. I just hope I get the chance to pursue it professionally.", "id": "e4wfy65", "replies": [{"body": "OK, maybe you don't have the time to master it. Still, I think you should try to build up even projects like this one step at a time. Here's an idea.\n\n1. First make a back-end that serves a web page containing a form, then prints a \"Thanks\" message when you submit the form. This is like back-end 101 stuff and it sounds like you skipped it.\n2. Add everything you want to the form. Get the back-end to mirror back what you entered, like \"Thanks monkey\\_sage for ordering 17 widgets\" or whatever the form contains. DO NOT USE ANY JAVASCRIPT OR CSS. Just make a bare-bones simple HTML form.\n3. Now add in the database support. Get it to set things in your database. Maybe make another web page that queries the database at this point.\n4. Finally, when all those steps are done, start working on the JavaScript. Make the front-end appear inside of a modal dialog and switch to an AJAX call / XMLHttpRequest instead of submitting a form.\n\nYou could 1 - 3 in a day or two tops if you work hard. There are a thousand tutorials for that much.\n\nStep 4 is hard, but it will be much, much easier if you have steps 1 - 3 working really well first.\n\nFinally, the LAST, LAST step is to use CSS to make it all look really slick and professional and pretty. This should be done last after you have it all functional.\n\n&#x200B;", "id": "e4wl15n", "replies": []}]}]}]}]}]}]}], "title": "Been at this for several weeks, really desperate for help: Submitting form data to a database [nodeJS, express, mongo]"}