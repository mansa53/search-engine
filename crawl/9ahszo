{"url": "https://www.reddit.com/r/learnprogramming/comments/9ahszo/weird_behavior_of_code_wen_adding_new_object/", "text": "Hi, i have this simple code:\n\n \n\n    Promise.all(userPromises).then((users) => {\n for(var i = 0; i < comments.length; i++){\n comments[i].authorName = users[i].username;\n console.log(comments)\n console.log(comments[i].authorName)\n            }\n    console.log(comments)\n\nSo basically i have to arrays of objects - users and comments. I want to add a new property to each of the comments object called commentAthor which will equal to one of the users properties. The weird thing is that when i console.log comments  (line 4) i don't see the property authorName anywhere, but when i console.log(comments\\[i\\].authorName) the property exists. When i console.log the comments again outside of the loop the property still doesn't exist. What's happening?\n\nThanks in advance ;)", "score": 3, "comments": [{"body": "Are you remembering to actually wait for the promises to finish?\n\n    Promise.all(userPromises).then(users => {\n        ...\n    }\n    console.log(...) // The function inside \"then\" will NOT have run yet, no matter what\n\nIf you're trying to log something synchronously but expecting to see something set by the results of `then`, you never will because it's *always* asynchronously executed, even if the promise is already fully resolved.\n\n    ", "id": "e4vjjrz", "replies": [{"body": "No, i am waiting for The promises, everything seems correct, idk why this doesn't work :)", "id": "e4vjq6d", "replies": []}]}, {"body": "The closure you're passing to `.then` doesn't seem to be finished (there's no closing `}`), could you show us the whole function?", "id": "e4vnvxt", "replies": [{"body": "    //comment pagination\n    router.put('/:id/paginate', (req, res) => {\n    \t//decide by what to sort\n    \tvar sortCriteria = null;\n    \tswitch(req.query.sort){\n    \t\tcase 'top':\n    \t\t\tsortCriteria = {'meta.hearts': -1};\n    \t\t\tbreak;\n    \t\tcase 'old':\n    \t\t\tsortCriteria = {date: +1};\n    \t\t\tbreak;\n    \t\tdefault:\n    \t\t\tsortCriteria = {date: -1}\n    \t}\n    \tvar skipDest = parseInt(req.query.page) * 10;\n    \tComment.find({quoteId: req.params.id}).sort(sortCriteria).skip(skipDest).limit(10).then((comments) => {\n    \t\tuserPromises = [];\n    \t\tfor(var i = 0; i < comments.length; i++){\n    \t\t\tuserPromises.push(User.findOne({_id: comments[i].author}));\n    \t\t}\n    \t\tPromise.all(userPromises).then((users) => {\n    \t\t\tfor(var i = 0; i < comments.length; i++){\n    \t\t\t\tcomments[i].authorName = users[i].username;\n    \t\t\t\tconsole.log(comments)\n    \t\t\t\tconsole.log(comments[i].authorName)\n    \t\t\t}\n    \t\t\tconsole.log(comments)\n    \t\t\tres.json({\n    \t\t\t\tcomments: comments,\n    \t\t\t\tuser: req.user\n    \t\t\t})\n    \t\t})\n    \t})\n    })\n\nThis is my whole route.\n\nThanks for all your help!", "id": "e4vp973", "replies": [{"body": "I don't see any obvious problems with the `comments` value; if it's ever properly populated, it should be printed by the `console.log(comments)` line in the final closure (if the code gets there). You might try logging `comments` immediately (i.e. right before `userPromises =[];`) to see if it looks correct there. If it does, then something later on is corrupting it; if it doesn't, then we can stop scrutinizing this code and can look into the `Comment.find(...).sort(...).skip(...).limit(...)` line.\n\nYou said that when you log `comments`, you don't see the `authorName` property, but when you check that property explicitly, it's there. Have you tried checking `authorName` explicitly outside the loop? Is it still there?\n\nDoes `authorName` exist somewhere else on the prototype chain? I.e., when you log `comments`, it might only be printing the \"own\" properties of each comment, and `authorName` might be \"owned\" by a superclass of Comment.\n\nAside from that, I have a few suggestions on other parts of the code:\n\n* Use `const` and `let`, if you can. This depends on what version of Node you're running, since they're only supported in Node 6.4 and later. The general rule is to use `const` by default; use `let` only if you have to; and never use `var`.\n\n* Be consistent with semicolons, and add them wherever they're needed. Semicolons are technically optional in JS, but sometimes omitting one can change the meaning of the code (but the code is still valid JS). It's always better practice to not rely on Automatic Semicolon Insertion (ASI) and do it yourself. A linter (e.g. ESLint) can help you with this.\n\n* This one's personal preference, but I avoid using loops with `Array.push` in favor of `Array.map`. E.g.,\n\n        const userPromises = comments.map((comment) =>\n          User.findOne({_id: comment.author}));\nThen you could choose to get rid of the `userPromises` variable entirely, if you wanted:\n\n        Promise.all(comments.map((comment) =>\n          User.findOne({_id: comment.author})))\n        .then((users) => {\n          ...\n        });\n\n* Always handle rejected promises somehow. Recover from the error if possible, or just log it so that we know something went wrong, or explicitly do nothing with it if it doesn't make sense to do anything. In this case, you'll want to send an error message to the user with `res`, otherwise the route will deadlock and the user will just be waiting forever.", "id": "e4vqycj", "replies": [{"body": "Thanks for all your tips, I will definitely stick to them. When I log comments[0].authorName outside the loop it is still there, however when I log comments in the same place it isn't:(", "id": "e4wl5c7", "replies": [{"body": "That's good, that means you're in business. I think it's just not showing all the properties of each object in the array for some reason - I haven't used node in years so I don't know its rule for that. But I would guess that `authorName` is just somewhere else on the prototype, e.g. if `Comment` is a subclass of `UserActivity`, maybe `AuthorName` is defined by `UserActivity` instead.", "id": "e4wt9dl", "replies": []}]}]}]}]}, {"body": "`comments` is the array object, while `comments[i]` references a particular comment.  Instead of `console.log(comments)`, try `console.log(comments[i])`.", "id": "e4vigfy", "replies": [{"body": "Still no rezults :(", "id": "e4viwh0", "replies": []}]}], "title": "Weird behavior of code wen adding new object property"}