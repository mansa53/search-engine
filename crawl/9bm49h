{"url": "https://www.reddit.com/r/learnprogramming/comments/9bm49h/first_project_texas_hold_em/", "text": "Hello all,\n\nhttps://pastebin.com/L4S1vH4j\n\nhttps://github.com/tomophilia/Texas-Hold-Em\n\nPython 3\n\nFor my first project, I wrote a Texas hold em game.  As of now, you can only play with friends (or as all players). \n\nI read the first chapter of Fluent Python and liked his deck of cards code so much, I had to make a game.\n\nYou play as \"Tom\" and your cards are displayed throughout the hand. \n\nThis a full Texas Hold Em game.  I know there are some kinks to work out still here and there but I have tested this thing exhaustively. \n\nI'd like any feedback you think is relevant or if anyone has questions, I'd be glad to help!\n\n\nI am split between trying to add a GUI or trying to add an AI that can play against the player.  Both are kinda intimidating but, so was this when I started.\n\nThis was mostly made in Pythonista on iPhone.  \n\nThanks again!\n\nThanks for checking it out.\nI have been studying for about a year. \n", "score": 7, "comments": [{"body": "I skimmed your code and here are some comments:\n\n* First of all, since this is a python file it should be named with the .py extension.\n* Line 64: `l` should have a meaningful name. Also consider assigning `l[0]` and `l[1]` to meaningful names.\n* Line 65: This whole section can be rewritten simply as `if l > final_hand`. Python's default comparison is recursive on lists and tuples: It compares the first elements, and if they are equal it compares the second elements, etc.\n* Line 125: While efficiency is not important for such a simple program, a better way to implement deck shuffling and dealing is to use `random.shuffle` and then use `list.pop` to deal cards.\n* `rank_the_hand`: This function is *nasty*. Break it up into different parts. For each type of hand create a function that checks for that hand, and call those in order from greatest to least (stopping when you get a match). So you should have something like `is_straight_flush`, `is_four_of_a_kind`, `is_full_house`, etc. Note that there is some room for code reuse here: `is_straight_flush` can call `is_straight` and `is_flush`, and you can have a general `is_n_of_a_kind` function.\n* Line 319: This code is unreachable.\n* Line 322: This is only reachable if someone can place a negative bet. Enforce the validity of bets immediately when the bet is placed and then get rid of this case. (And line 316 can just become an `else` statement.)\n* There seems to be a lot of code scattered outside of functions that appears to be for testing? Try making proper unit tests instead, using the `unittest` library.", "id": "e54ppgx", "replies": [{"body": "You can't just say is_straight && is_flush\n\nFor example:\n\n2h3h4h5h6s7h8h would return true but is not a straight flush.\n\nI worked on a similar project last year and my is_x functions returned a hand object of the 5 cards that make the hand which had > == ect operators and I said if is_straight==is_flush so if the 5 cards that make the straight and flush are the same 5 cards it's indeed a stwight flush. ", "id": "e550gz0", "replies": [{"body": "The way he has written the function, and I'm not saying this is the best way, is to try all possible 5 card hands individually. For a 5 card hand you can do `is_straight && is_flush`.", "id": "e550q50", "replies": []}]}, {"body": "That is some good input. I do need to look up unit test and I def see what you meant about the rank_the_hand func. \n\nThanks ", "id": "e56qsyr", "replies": []}, {"body": "Holy molay. After reviewing your comment again- I didn\u2019t know list comparisons are recursive! That would\u2019ve saved me soooo mich time. \n\nThanks again", "id": "e59m0ww", "replies": []}]}, {"body": "I haven't understood everything in your code, but here are some comments:\n\nTry not to write code like this\n\n    if final_hand[0]==8:\n        hand_text=str(final_hand[1][0])+' high straight flush. '\n    elif final_hand[0]==7:\n        hand_text='Quad '+str(final_hand[1][0])+'s'\n    elif final_hand[0]==6:\n        hand_text='Full House - '+str(final_hand[1][0])+'s'+' over.'\n    elif final_hand[0]==5:\n        hand_text= str(final_hand[1][0])+' high flush. '\n    elif final_hand[0]==4:\n        hand_text=str(final_hand[1][0])+' high straight. '\n    elif final_hand[0]==3:\n        hand_text='Three ' + str(final_hand[1][0])+'s'\n    elif final_hand[0]==2:\n        hand_text= 'Two pair. '+str(final_hand[1][0])+'s'+' and '+ str(final_hand[1][1])+'s'\n    elif final_hand[0]==1:\n        hand_text=' a pair of '+str(final_hand[1][0])+'s'\n\nYou have written `elif final_hand[0]==` many times. Try to shorten the code by doing something smarter. Perhaps you can make a map/dictionary from the number to the effect, and then write `hand_text = the_dictionay(final_hand)` instead of all that. Of course, you might want to call the dictionary something else.\n\nIn that method you have also mixed the logic with the presentation. I.e. the strings \"Full House - something over something\" is part of the presentation, the user interface, and not essential to the logic of the program. Try to keep the logic and presentation separate.\n\nThe function `rank_the_hand` seems way too long. I don't understand exactly what it's doing, but there must be a shorter way. It also contains a lot of repetition, for example the code ` final_hand[0] = ...` and `final_hand[1].append(...)` appear many times.\n\nHaving a lot of nested ifs or lots of elifs is a code smell, at least to me.\n\nWhy do you alternate between this_style and thisStyle for function names?\n\nWrite comments with # not '''.\n\nTry to keep your style consistent, sometimes you don't have spaces after a comma, for example, like this: a,b,c instead of a, b, c.\n\nIn general, try to write shorter functions that are reusable.", "id": "e54ijka", "replies": [{"body": "Thanks for your insight.  I especially like the keeping logic and presentation separate. That would\u2019ve saved me a headache. \n\n", "id": "e56r95e", "replies": []}, {"body": "> Write comments with # not '''.\n\nBy Python conventions, functions and classes should be commented using triple quoted strings.\n\nhttps://www.python.org/dev/peps/pep-0257/", "id": "e56rgot", "replies": [{"body": "That's docstrings, not all comments.", "id": "e56yu01", "replies": []}]}]}], "title": "First Project: Texas Hold 'Em."}